/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,i,o={886:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var i=n(577),o=n(487),r=n(131);class e{constructor(e,t,n,r){this.cachedLanguages=new Map,this.lang="english",this.isCached="is_cached",this.bookName=e,this.contentFilePath=t,this.imagesPath=n,this.audioPath=r,this.contentParser=new i.F(t),this.playBackEngine=new o.o(n,r),this.broadcastChannel=new BroadcastChannel("cr-message-channel"),null==localStorage.getItem(this.isCached)||localStorage.getItem(this.isCached)}async initialize(){let e=await this.contentParser.parseBook();e.bookName=this.bookName,console.log("Dev App initialized!"),console.log(e),this.enforceLandscapeMode(),console.log("Adding a load event listener!"),window.addEventListener("load",(async()=>{await this.registerServiceWorker(e)})),this.playBackEngine.initializeBook(e)}async registerServiceWorker(e){console.log("Registering Service Worker!"),"serviceWorker"in navigator?(new r.ZW("/sw.js",{}).register().then((e=>{this.handleServiceWorkerRegistration(e)})).catch((e=>{console.error(e)})),await navigator.serviceWorker.ready,this.broadcastChannel.onmessage=t=>{console.log("CRapp: Message Received!"),console.log(t.data.command),"Activated"==t.data.command&&this.broadcastChannel.postMessage({command:"Cache",data:{lang:this.lang,bookData:e,contentFile:this.contentFilePath}})},navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)):console.warn("Service Worker not supported!")}handleServiceWorkerRegistration(e){var t;try{null===(t=null==e?void 0:e.installing)||void 0===t||t.postMessage({type:"Registartion",value:this.lang})}catch(e){console.error("CRapp: Service Worker Registration Failed!",e)}}handleServiceWorkerMessage(e){"Recache"==e.data.msg?console.log("CRapp: Recache Message Received!"):"Loading"==e.data.msg?(console.log("CRapp: Loading Message Received!"),console.log(e.data)):"Update Found"==e.data.msg&&console.log("CRapp: Update Found Message Received!")}readLanguageDataFromCacheAndNotifyAndroidApp(){window.Android&&window.Android.cachedStatus(!0)}enforceLandscapeMode(){try{screen.orientation&&screen.orientation.lock&&screen.orientation.lock("landscape").then((()=>{console.log("Screen orientation locked to landscape!")})).catch((e=>{console.log("Screen orientation lock failed! Interface may not work as expected on mobile devices!")}))}catch(e){console.warn("Screen orientation lock not supported! Interface may not work as expected on mobile devices!")}}}let a=new e("LetsFlyLevel2En","/BookContent/LetsFlyLevel2En/content/content.json","/BookContent/LetsFlyLevel2En/content/images/","/BookContent/LetsFlyLevel2En/content/audios/");await a.initialize(),t()}catch(e){t(e)}}),1)},922:(e,t,n)=>{var i;n.d(t,{z:()=>i}),function(e){e.CuriousReader="CuriousReader",e.GDL="GDL",e.Unknown="Unknown"}(i||(i={}))},577:(e,t,n)=>{n.d(t,{F:()=>o});var i=n(922);class o{constructor(e){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=e}async parseBook(){return new Promise(((e,t)=>{this.parseContentJSONFile().then((t=>{this.contentJSON=t,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={bookName:"",pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),e(n)})).catch((e=>{t(e)}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?i.z.CuriousReader:void 0!==this.contentJSON.chapters?i.z.GDL:i.z.Unknown}parsePages(e){let t=[];if(e.bookType===i.z.CuriousReader){let e=this.contentJSON.presentation.slides,n=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<e.length;i++){let o=e[i],r={visualElements:[],backgroundColor:n};r.visualElements=this.parsePageCR(o),t.push(r)}}else if(e.bookType===i.z.GDL){let e=this.contentJSON.chapters,n="#FCFCF2";for(let i=0;i<e.length;i++){let o=e[i],r={visualElements:[],backgroundColor:n};r.visualElements=this.parsePageGDL(o),t.push(r)}}else console.log("Unknown book type!");return t}parsePageCR(e){let t=[],n=e.elements;for(let e=0;e<n.length;e++){let i=n[e].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[e]);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[e]);t.push(i)}else if(i.includes("Audio")){let i=this.parseAudioElementCR(n[e]);t.push(i)}}return t}parsePageGDL(e){let t=[],n=e.params.content;for(let e=0;e<n.length;e++){let i=n[e].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[e].content.params);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[e].content.params);t.push(i)}}return t}parseTextElementCR(e){return{type:"text",positionX:e.x,positionY:e.y,width:e.width,height:e.height,textContentAsHTML:e.action.params.text}}parseTextElementGDL(e){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:e.text}}parseImageElementCR(e){let t="";return t=void 0===e.action.params.file?this.emptyGlowImageTag:e.action.params.file.path,{domID:t===this.emptyGlowImageTag?e.id:e.action.subContentId,type:"image",positionX:e.x,positionY:e.y,width:e.width,height:e.height,imageSource:t}}parseImageElementGDL(e){return{domID:"",type:"image",positionX:NaN,positionY:NaN,width:e.width,height:e.height,imageSource:e.file.path}}parseAudioElementCR(e){let t={timestamps:[]},n=e.action.params.timeStampForEachText;for(let i=0;i<n.length;i++){let o=i,r=n[i],a={domID:e.action.subContentId+"_"+o.toString(),word:r.text,startTimestamp:r.startDuration,endTimestamp:r.endDuration,audioSrc:r.wordfile[0].path};t.timestamps.push(a)}return{domID:e.action.subContentId,type:"audio",positionX:e.x,positionY:e.y,width:e.width,height:e.height,glowColor:e.action.params.glowColor,audioSrc:e.action.params.files[0].path,audioTimestamps:t,styles:""}}async parseContentJSONFile(){return new Promise(((e,t)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let t=n.response;delete t.l10n,delete t.override,e(t)}else t(n.response)},n.send()}))}}},487:(e,t,n)=>{n.d(t,{o:()=>Rt});var i=n(922);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r="(prefers-reduced-motion: reduce)";function a(e){e.length=0}function s(e,t,n){return Array.prototype.slice.call(e,t,n)}function c(e){return e.bind.apply(e,[null].concat(s(arguments,1)))}var l=setTimeout,u=function(){};function d(e){return requestAnimationFrame(e)}function f(e,t){return typeof t===e}function p(e){return!y(e)&&f("object",e)}var h=Array.isArray,m=c(f,"function"),g=c(f,"string"),v=c(f,"undefined");function y(e){return null===e}function w(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function b(e){return h(e)?e:[e]}function E(e,t){b(e).forEach(t)}function k(e,t){return e.indexOf(t)>-1}function S(e,t){return e.push.apply(e,b(t)),e}function x(e,t,n){e&&E(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function C(e,t){x(e,g(t)?t.split(" "):t,!0)}function P(e,t){E(t,e.appendChild.bind(e))}function L(e,t){E(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function _(e,t){return w(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function T(e,t){var n=e?s(e.children):[];return t?n.filter((function(e){return _(e,t)})):n}function I(e,t){return t?T(e,t)[0]:e.firstElementChild}var A=Object.keys;function D(e,t,n){return e&&(n?A(e).reverse():A(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function F(e){return s(arguments,1).forEach((function(t){D(t,(function(n,i){e[i]=t[i]}))})),e}function R(e){return s(arguments,1).forEach((function(t){D(t,(function(t,n){h(t)?e[n]=t.slice():p(t)?e[n]=R({},p(e[n])?e[n]:{},t):e[n]=t}))})),e}function z(e,t){E(t||A(e),(function(t){delete e[t]}))}function N(e,t){E(e,(function(e){E(t,(function(t){e&&e.removeAttribute(t)}))}))}function M(e,t,n){p(t)?D(t,(function(t,n){M(e,n,t)})):E(e,(function(e){y(n)||""===n?N(e,t):e.setAttribute(t,String(n))}))}function O(e,t,n){var i=document.createElement(e);return t&&(g(t)?C(i,t):M(i,t)),n&&P(n,i),i}function W(e,t,n){if(v(n))return getComputedStyle(e)[t];y(n)||(e.style[t]=""+n)}function B(e,t){W(e,"display",t)}function j(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function G(e,t){return e.getAttribute(t)}function H(e,t){return e&&e.classList.contains(t)}function X(e){return e.getBoundingClientRect()}function U(e){E(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function Y(e){return I((new DOMParser).parseFromString(e,"text/html").body)}function J(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function q(e,t){return e&&e.querySelector(t)}function K(e,t){return t?s(e.querySelectorAll(t)):[]}function Q(e,t){x(e,t,!1)}function V(e){return e.timeStamp}function Z(e){return g(e)?e:e?e+"px":""}var $="splide";function ee(e,t){if(!e)throw new Error("[splide] "+(t||""))}var te=Math.min,ne=Math.max,ie=Math.floor,oe=Math.ceil,re=Math.abs;function ae(e,t,n){return re(e-t)<n}function se(e,t,n,i){var o=te(t,n),r=ne(t,n);return i?o<e&&e<r:o<=e&&e<=r}function ce(e,t,n){var i=te(t,n),o=ne(t,n);return te(ne(i,e),o)}function le(e){return+(e>0)-+(e<0)}function ue(e,t){return E(t,(function(t){e=e.replace("%s",""+t)})),e}function de(e){return e<10?"0"+e:""+e}var fe={};function pe(){var e=[];function t(e,t,n){E(e,(function(e){e&&E(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");n(e,i[0],i[1])}))}))}))}return{bind:function(n,i,o,r){t(n,i,(function(t,n,i){var a="addEventListener"in t,s=a?t.removeEventListener.bind(t,n,o,r):t.removeListener.bind(t,o);a?t.addEventListener(n,o,r):t.addListener(o),e.push([t,n,i,o,s])}))},unbind:function(n,i,o){t(n,i,(function(t,n,i){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==i||o&&e[3]!==o)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,n),e.dispatchEvent(i),i},destroy:function(){e.forEach((function(e){e[4]()})),a(e)}}}var he="mounted",me="ready",ge="move",ve="moved",ye="click",we="refresh",be="updated",Ee="resize",ke="resized",Se="scroll",xe="scrolled",Ce="destroy",Pe="navigation:mounted",Le="autoplay:play",_e="autoplay:pause",Te="lazyload:loaded",Ie="ei";function Ae(e){var t=e?e.event.bus:document.createDocumentFragment(),n=pe();return e&&e.event.on(Ce,n.destroy),F(n,{bus:t,on:function(e,i){n.bind(t,b(e).join(" "),(function(e){i.apply(i,h(e.detail)?e.detail:[])}))},off:c(n.unbind,t),emit:function(e){n.dispatch(t,e,s(arguments,1))}})}function De(e,t,n,i){var o,r,a=Date.now,s=0,c=!0,l=0;function u(){if(!c){if(s=e?te((a()-o)/e,1):1,n&&n(s),s>=1&&(t(),o=a(),i&&++l>=i))return f();r=d(u)}}function f(){c=!0}function p(){r&&cancelAnimationFrame(r),s=0,r=0,c=!0}return{start:function(t){t||p(),o=a()-(t?s*e:0),c=!1,r=d(u)},rewind:function(){o=a(),s=0,n&&n(s)},pause:f,cancel:p,set:function(t){e=t},isPaused:function(){return c}}}var Fe="ArrowLeft",Re="ArrowRight",ze="ArrowUp",Ne="ArrowDown",Me="ttb",Oe={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[ze,Re],ArrowRight:[Ne,Fe]};var We="role",Be="tabindex",je="aria-controls",Ge="aria-current",He="aria-selected",Xe="aria-label",Ue="aria-labelledby",Ye="aria-hidden",Je="aria-orientation",qe="aria-roledescription",Ke="aria-live",Qe="aria-busy",Ve="aria-atomic",Ze=[We,Be,"disabled",je,Ge,Xe,Ue,Ye,Je,qe],$e=$,et="splide__track",tt="splide__slide",nt=tt+"--clone",it="splide__arrows",ot="splide__arrow",rt=ot+"--prev",at=ot+"--next",st="splide__pagination",ct="is-active",lt="is-prev",ut="is-next",dt="is-visible",ft="is-loading",pt="is-focus-in",ht="is-overflow",mt=[ct,dt,lt,ut,ft,pt,ht],gt={slide:tt,clone:nt,arrows:it,arrow:ot,prev:rt,next:at,pagination:st,page:"splide__pagination__page",spinner:"splide__spinner"},vt="touchmove mousemove",yt="touchend touchcancel mouseup click",wt="slide",bt="loop",Et="fade";var kt={passive:!1,capture:!0},St={Spacebar:" ",Right:Re,Left:Fe,Up:ze,Down:Ne};function xt(e){return e=g(e)?e:e.key,St[e]||e}var Ct="keydown",Pt="data-splide-lazy",Lt="data-splide-lazy-srcset",_t=[" ","Enter"],Tt=Object.freeze({__proto__:null,Media:function(e,t,n){var i=e.state,o=n.breakpoints||{},a=n.reducedMotion||{},s=pe(),c=[];function l(e){e&&s.destroy()}function u(e,t){var n=matchMedia(t);s.bind(n,"change",d),c.push([e,n])}function d(){var t=i.is(7),o=n.direction,r=c.reduce((function(e,t){return R(e,t[1].matches?t[0]:{})}),{});z(n),f(r),n.destroy?e.destroy("completely"===n.destroy):t?(l(!0),e.mount()):o!==n.direction&&e.refresh()}function f(t,o,r){R(n,t),o&&R(Object.getPrototypeOf(n),t),!r&&i.is(1)||e.emit(be,n)}return{setup:function(){var e="min"===n.mediaQuery;A(o).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){u(o[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),u(a,r),d()},destroy:l,reduce:function(e){matchMedia(r).matches&&(e?R(n,a):z(n,A(a)))},set:f}},Direction:function(e,t,n){return{resolve:function(e,t,i){var o="rtl"!==(i=i||n.direction)||t?i===Me?0:-1:1;return Oe[e]&&Oe[e][o]||e.replace(/width|left|right/i,(function(e,t){var n=Oe[e.toLowerCase()][o]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*("rtl"===n.direction?1:-1)}}},Elements:function(e,t,n){var i,o,r,s=Ae(e),c=s.on,l=s.bind,u=e.root,d=n.i18n,f={},p=[],h=[],g=[];function v(){var e,t,r;i=b("."+et),o=I(i,".splide__list"),ee(i&&o,"A track/list element is missing."),S(p,T(o,".splide__slide:not(."+nt+")")),D({arrows:it,pagination:st,prev:rt,next:at,bar:"splide__progress__bar",toggle:"splide__toggle"},(function(e,t){f[t]=b("."+e)})),F(f,{root:u,track:i,list:o,slides:p}),t=u.id||""+(e=$)+de(fe[e]=(fe[e]||0)+1),r=n.role,u.id=t,i.id=i.id||t+"-track",o.id=o.id||t+"-list",!G(u,We)&&"SECTION"!==u.tagName&&r&&M(u,We,r),M(u,qe,d.carousel),M(o,We,"presentation"),w()}function y(e){var t=Ze.concat("style");a(p),Q(u,h),Q(i,g),N([i,o],t),N(u,e?t:["style",qe])}function w(){Q(u,h),Q(i,g),h=E($e),g=E(et),C(u,h),C(i,g),M(u,Xe,n.label),M(u,Ue,n.labelledby)}function b(e){var t=q(u,e);return t&&function(e,t){if(m(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!_(n,t);)n=n.parentElement;return n}(t,".splide")===u?t:void 0}function E(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===$e&&ct]}return F(f,{setup:v,mount:function(){c(we,y),c(we,v),c(be,w),l(document,"touchstart mousedown keydown",(function(e){r="keydown"===e.type}),{capture:!0}),l(u,"focusin",(function(){x(u,pt,!!r)}))},destroy:y})},Slides:function(e,t,n){var i=Ae(e),o=i.on,r=i.emit,s=i.bind,l=t.Elements,u=l.slides,d=l.list,f=[];function p(){u.forEach((function(e,t){v(e,t,-1)}))}function h(){S((function(e){e.destroy()})),a(f)}function v(t,n,i){var o=function(e,t,n,i){var o,r=Ae(e),a=r.on,s=r.emit,l=r.bind,u=e.Components,d=e.root,f=e.options,p=f.isNavigation,h=f.updateOnMove,m=f.i18n,g=f.pagination,v=f.slideFocus,y=u.Direction.resolve,w=G(i,"style"),b=G(i,Xe),E=n>-1,k=I(i,".splide__slide__container");function S(){var o=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");M(i,Xe,ue(m.slideX,(E?n:t)+1)),M(i,je,o),M(i,We,v?"button":""),v&&N(i,qe)}function C(){o||P()}function P(){if(!o){var n=e.index;(r=L())!==H(i,ct)&&(x(i,ct,r),M(i,Ge,p&&r||""),s(r?"active":"inactive",_)),function(){var t=function(){if(e.is(Et))return L();var t=X(u.Elements.track),n=X(i),o=y("left",!0),r=y("right",!0);return ie(t[o])<=oe(n[o])&&ie(n[r])<=oe(t[r])}(),n=!t&&(!L()||E);if(e.state.is([4,5])||M(i,Ye,n||""),M(K(i,f.focusableNodes||""),Be,n?-1:""),v&&M(i,Be,n?-1:0),t!==H(i,dt)&&(x(i,dt,t),s(t?"visible":"hidden",_)),!t&&document.activeElement===i){var o=u.Slides.getAt(e.index);o&&j(o.slide)}}(),x(i,lt,t===n-1),x(i,ut,t===n+1)}var r}function L(){var i=e.index;return i===t||f.cloneStatus&&i===n}var _={index:t,slideIndex:n,slide:i,container:k,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+de(t+1),M(i,We,g?"tabpanel":"group"),M(i,qe,m.slide),M(i,Xe,b||ue(m.slideLabel,[t+1,e.length]))),l(i,"click",c(s,ye,_)),l(i,"keydown",c(s,"sk",_)),a([ve,"sh",xe],P),a(Pe,S),h&&a(ge,C)},destroy:function(){o=!0,r.destroy(),Q(i,mt),N(i,Ze),M(i,"style",w),M(i,Xe,b||"")},update:P,style:function(e,t,n){W(n&&k||i,e,t)},isWithin:function(n,i){var o=re(n-t);return E||!f.rewind&&!e.is(bt)||(o=te(o,e.length-o)),o<=i}};return _}(e,n,i,t);o.mount(),f.push(o),f.sort((function(e,t){return e.index-t.index}))}function y(e){return e?T((function(e){return!e.isClone})):f}function S(e,t){y(t).forEach(e)}function T(e){return f.filter(m(e)?e:function(t){return g(e)?_(t.slide,e):k(b(e),t.index)})}return{mount:function(){p(),o(we,h),o(we,p)},destroy:h,update:function(){S((function(e){e.update()}))},register:v,get:y,getIn:function(e){var i=t.Controller,o=i.toIndex(e),r=i.hasFocus()?1:n.perPage;return T((function(e){return se(e.index,o,o+r-1)}))},getAt:function(e){return T(e)[0]},add:function(e,t){E(e,(function(e){if(g(e)&&(e=Y(e)),w(e)){var i=u[t];i?L(e,i):P(d,e),C(e,n.classes.slide),o=e,a=c(r,Ee),l=K(o,"img"),(f=l.length)?l.forEach((function(e){s(e,"load error",(function(){--f||a()}))})):a()}var o,a,l,f})),r(we)},remove:function(e){U(T(e).map((function(e){return e.slide}))),r(we)},forEach:S,filter:T,style:function(e,t,n){S((function(i){i.style(e,t,n)}))},getLength:function(e){return e?u.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(e,t,n){var i,o,r,a=Ae(e),s=a.on,l=a.bind,u=a.emit,d=t.Slides,f=t.Direction.resolve,h=t.Elements,m=h.root,g=h.track,v=h.list,y=d.getAt,w=d.style;function b(){i=n.direction===Me,W(m,"maxWidth",Z(n.width)),W(g,f("paddingLeft"),k(!1)),W(g,f("paddingRight"),k(!0)),E(!0)}function E(e){var t,a=X(m);(e||o.width!==a.width||o.height!==a.height)&&(W(g,"height",(t="",i&&(ee(t=S(),"height or heightRatio is missing."),t="calc("+t+" - "+k(!1)+" - "+k(!0)+")"),t)),w(f("marginRight"),Z(n.gap)),w("width",n.autoWidth?null:Z(n.fixedWidth)||(i?"":C())),w("height",Z(n.fixedHeight)||(i?n.autoHeight?null:C():S()),!0),o=a,u(ke),r!==(r=A())&&(x(m,ht,r),u("overflow",r)))}function k(e){var t=n.padding,i=f(e?"right":"left");return t&&Z(t[i]||(p(t)?0:t))||"0px"}function S(){return Z(n.height||X(v).width*n.heightRatio)}function C(){var e=Z(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function P(){return X(v)[f("width")]}function L(e,t){var n=y(e||0);return n?X(n.slide)[f("width")]+(t?0:I()):0}function _(e,t){var n=y(e);if(n){var i=X(n.slide)[f("right")],o=X(v)[f("left")];return re(i-o)+(t?0:I())}return 0}function T(t){return _(e.length-1)-_(0)+L(0,t)}function I(){var e=y(0);return e&&parseFloat(W(e.slide,f("marginRight")))||0}function A(){return e.is(Et)||T(!0)>P()}return{mount:function(){var e,t;b(),l(window,"resize load",(e=c(u,Ee),t=De(0,e,null,1),function(){t.isPaused()&&t.start()})),s([be,we],b),s(Ee,E)},resize:E,listSize:P,slideSize:L,sliderSize:T,totalSize:_,getPadding:function(e){return parseFloat(W(g,f("padding"+(e?"Right":"Left"))))||0},isOverflow:A}},Clones:function(e,t,n){var i,o=Ae(e),r=o.on,s=t.Elements,c=t.Slides,l=t.Direction.resolve,u=[];function d(){r(we,f),r([be,Ee],h),(i=m())&&(function(t){var i=c.get().slice(),o=i.length;if(o){for(;i.length<t;)S(i,i);S(i.slice(-t),i.slice(0,t)).forEach((function(r,a){var l=a<t,d=function(t,i){var o=t.cloneNode(!0);return C(o,n.classes.clone),o.id=e.root.id+"-clone"+de(i+1),o}(r.slide,a);l?L(d,i[0].slide):P(s.list,d),S(u,d),c.register(d,a-t+(l?0:o),r.index)}))}}(i),t.Layout.resize(!0))}function f(){p(),d()}function p(){U(u),a(u),o.destroy()}function h(){var e=m();i!==e&&(i<e||!e)&&o.emit(we)}function m(){var i=n.clones;if(e.is(bt)){if(v(i)){var o=n[l("fixedWidth")]&&t.Layout.slideSize(0);i=o&&oe(X(s.track)[l("width")]/o)||n[l("autoWidth")]&&e.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:p}},Move:function(e,t,n){var i,o=Ae(e),r=o.on,a=o.emit,s=e.state.set,c=t.Layout,l=c.slideSize,u=c.getPadding,d=c.totalSize,f=c.listSize,p=c.sliderSize,h=t.Direction,m=h.resolve,g=h.orient,y=t.Elements,w=y.list,b=y.track;function E(){t.Controller.isBusy()||(t.Scroll.cancel(),k(e.index),t.Slides.update())}function k(e){S(L(e,!0))}function S(n,i){if(!e.is(Et)){var o=i?n:function(n){if(e.is(bt)){var i=P(n),o=i>t.Controller.getEnd();(i<0||o)&&(n=x(n,o))}return n}(n);W(w,"transform","translate"+m("X")+"("+o+"px)"),n!==o&&a("sh")}}function x(e,t){var n=e-T(t),i=p();return e-g(i*(oe(re(n)/i)||1))*(t?1:-1)}function C(){S(_(),!0),i.cancel()}function P(e){for(var n=t.Slides.get(),i=0,o=1/0,r=0;r<n.length;r++){var a=n[r].index,s=re(L(a,!0)-e);if(!(s<=o))break;o=s,i=a}return i}function L(t,i){var o=g(d(t-1)-function(e){var t=n.focus;return"center"===t?(f()-l(e,!0))/2:+t*l(e)||0}(t));return i?function(t){return n.trimSpace&&e.is(wt)&&(t=ce(t,0,g(p(!0)-f()))),t}(o):o}function _(){var e=m("left");return X(w)[e]-X(b)[e]+g(u(!1))}function T(e){return L(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=t.Transition,r([he,ke,be,we],E)},move:function(e,t,n,o){var r,c;e!==t&&(r=e>n,c=g(x(_(),r)),r?c>=0:c<=w[m("scrollWidth")]-X(b)[m("width")])&&(C(),S(x(_(),e>n),!0)),s(4),a(ge,t,n,e),i.start(t,(function(){s(3),a(ve,t,n,e),o&&o()}))},jump:k,translate:S,shift:x,cancel:C,toIndex:P,toPosition:L,getPosition:_,getLimit:T,exceededLimit:function(e,t){t=v(t)?_():t;var n=!0!==e&&g(t)<g(T(!1)),i=!1!==e&&g(t)>g(T(!0));return n||i},reposition:E}},Controller:function(e,t,n){var i,o,r,a,s=Ae(e),l=s.on,u=s.emit,d=t.Move,f=d.getPosition,p=d.getLimit,h=d.toPosition,m=t.Slides,y=m.isEnough,w=m.getLength,b=n.omitEnd,E=e.is(bt),k=e.is(wt),S=c(T,!1),x=c(T,!0),C=n.start||0,P=C;function L(){o=w(!0),r=n.perMove,a=n.perPage,i=D();var e=ce(C,0,b?i:o-1);e!==C&&(C=e,d.reposition())}function _(){i!==D()&&u(Ie)}function T(e,t){var n=r||(N()?1:a),o=I(C+n*(e?-1:1),C,!(r||N()));return-1===o&&k&&!ae(f(),p(!e),1)?e?0:i:t?o:A(o)}function I(t,s,c){if(y()||N()){var l=function(t){if(k&&"move"===n.trimSpace&&t!==C)for(var i=f();i===h(t,!0)&&se(t,0,e.length-1,!n.rewind);)t<C?--t:++t;return t}(t);l!==t&&(s=t,t=l,c=!1),t<0||t>i?t=r||!se(0,t,s,!0)&&!se(i,s,t,!0)?E?c?t<0?-(o%a||a):o:t:n.rewind?t<0?i:0:-1:F(R(t)):c&&t!==s&&(t=F(R(s)+(t<s?-1:1)))}else t=-1;return t}function A(e){return E?(e+o)%o||0:e}function D(){for(var e=o-(N()||E&&r?1:a);b&&e-- >0;)if(h(o-1,!0)!==h(e,!0)){e++;break}return ce(e,0,o-1)}function F(e){return ce(N()?e:a*e,0,i)}function R(e){return N()?te(e,i):ie((e>=i?o-1:e)/a)}function z(e){e!==C&&(P=C,C=e)}function N(){return!v(n.focus)||n.isNavigation}function M(){return e.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){L(),l([be,we,Ie],L),l(ke,_)},go:function(e,t,n){if(!M()){var o=function(e){var t=C;if(g(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],o=n[1],r=n[2];"+"===o||"-"===o?t=I(C+ +(""+o+(+r||1)),C):">"===o?t=r?F(+r):S(!0):"<"===o&&(t=x(!0))}else t=E?e:ce(e,0,i);return t}(e),r=A(o);r>-1&&(t||r!==C)&&(z(r),d.move(o,r,P,n))}},scroll:function(e,n,o,r){t.Scroll.scroll(e,n,o,(function(){var e=A(d.toIndex(f()));z(b?te(e,i):e),r&&r()}))},getNext:S,getPrev:x,getAdjacent:T,getEnd:D,setIndex:z,getIndex:function(e){return e?P:C},toIndex:F,toPage:R,toDest:function(e){var t=d.toIndex(e);return k?ce(t,0,i):t},hasFocus:N,isBusy:M}},Arrows:function(e,t,n){var i,o,r=Ae(e),a=r.on,s=r.bind,l=r.emit,u=n.classes,d=n.i18n,f=t.Elements,p=t.Controller,h=f.arrows,m=f.track,g=h,v=f.prev,y=f.next,w={};function b(){var e;!(e=n.arrows)||v&&y||(g=h||O("div",u.arrows),v=x(!0),y=x(!1),i=!0,P(g,[v,y]),!h&&L(g,m)),v&&y&&(F(w,{prev:v,next:y}),B(g,e?"":"none"),C(g,o=it+"--"+n.direction),e&&(a([he,ve,we,xe,Ie],_),s(y,"click",c(S,">")),s(v,"click",c(S,"<")),_(),M([v,y],je,m.id),l("arrows:mounted",v,y))),a(be,E)}function E(){k(),b()}function k(){r.destroy(),Q(g,o),i?(U(h?[v,y]:g),v=y=null):N([v,y],Ze)}function S(e){p.go(e,!0)}function x(e){return Y('<button class="'+u.arrow+" "+(e?u.prev:u.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function _(){if(v&&y){var t=e.index,n=p.getPrev(),i=p.getNext(),o=n>-1&&t<n?d.last:d.prev,r=i>-1&&t>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,M(v,Xe,o),M(y,Xe,r),l("arrows:updated",v,y,n,i)}}return{arrows:w,mount:b,destroy:k,update:_}},Autoplay:function(e,t,n){var i,o,r=Ae(e),a=r.on,s=r.bind,c=r.emit,l=De(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&W(t,"width",100*e+"%"),c("autoplay:playing",e)})),u=l.isPaused,d=t.Elements,f=t.Elements,p=f.root,h=f.toggle,m=n.autoplay,g="pause"===m;function v(){u()&&t.Slides.isEnough()&&(l.start(!n.resetProgress),o=i=g=!1,b(),c(Le))}function y(e){void 0===e&&(e=!0),g=!!e,b(),u()||(l.pause(),c(_e))}function w(){g||(i||o?y(!1):v())}function b(){h&&(x(h,ct,!g),M(h,Xe,n.i18n[g?"play":"pause"]))}function E(e){var i=t.Slides.getAt(e);l.set(i&&+G(i.slide,"data-splide-interval")||n.interval)}return{mount:function(){m&&(n.pauseOnHover&&s(p,"mouseenter mouseleave",(function(e){i="mouseenter"===e.type,w()})),n.pauseOnFocus&&s(p,"focusin focusout",(function(e){o="focusin"===e.type,w()})),h&&s(h,"click",(function(){g?v():y(!0)})),a([ge,Se,we],l.rewind),a(ge,E),h&&M(h,je,d.track.id),g||v(),b())},destroy:l.cancel,play:v,pause:y,isPaused:u}},Cover:function(e,t,n){var i=Ae(e).on;function o(e){t.Slides.forEach((function(t){var n=I(t.container||t.slide,"img");n&&n.src&&r(e,n,t)}))}function r(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),B(t,e?"none":"")}return{mount:function(){n.cover&&(i(Te,c(r,!0)),i([he,be,we],c(o,!0)))},destroy:c(o,!1)}},Scroll:function(e,t,n){var i,o,r=Ae(e),a=r.on,s=r.emit,l=e.state.set,u=t.Move,d=u.getPosition,f=u.getLimit,p=u.exceededLimit,h=u.translate,m=e.is(wt),g=1;function v(e,n,r,a,f){var h=d();if(b(),r&&(!m||!p())){var v=t.Layout.sliderSize(),E=le(e)*v*ie(re(e)/v)||0;e=u.toPosition(t.Controller.toDest(e%v))+E}var k=ae(h,e,1);g=1,n=k?0:n||ne(re(e-h)/1.5,800),o=a,i=De(n,y,c(w,h,e,f),1),l(5),s(Se),i.start()}function y(){l(3),o&&o(),s(xe)}function w(e,t,i,r){var a,s,c=d(),l=(e+(t-e)*(a=r,(s=n.easingFunc)?s(a):1-Math.pow(1-a,4))-c)*g;h(c+l),m&&!i&&p()&&(g*=.6,re(l)<10&&v(f(p(!0)),600,!1,o,!0))}function b(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){a(ge,b),a([be,we],E)},destroy:b,scroll:v,cancel:E}},Drag:function(e,t,n){var i,o,r,a,s,c,l,d,f=Ae(e),h=f.on,m=f.emit,g=f.bind,v=f.unbind,y=e.state,w=t.Move,b=t.Scroll,E=t.Controller,k=t.Elements.track,S=t.Media.reduce,x=t.Direction,C=x.resolve,P=x.orient,L=w.getPosition,T=w.exceededLimit,I=!1;function A(){var e=n.drag;G(!e),a="free"===e}function D(e){if(c=!1,!l){var t=j(e);i=e.target,o=n.noDrag,_(i,".splide__pagination__page, ."+ot)||o&&_(i,o)||!t&&e.button||(E.isBusy()?J(e,!0):(d=t?k:window,s=y.is([4,5]),r=null,g(d,vt,F,kt),g(d,yt,R,kt),w.cancel(),b.cancel(),N(e)))}var i,o}function F(t){if(y.is(6)||(y.set(6),m("drag")),t.cancelable)if(s){w.translate(i+M(t)/(I&&e.is(wt)?5:1));var o=O(t)>200,r=I!==(I=T());(o||r)&&N(t),c=!0,m("dragging"),J(t)}else(function(e){return re(M(e))>re(M(e,!0))})(t)&&(s=function(e){var t=n.dragMinThreshold,i=p(t),o=i&&t.mouse||0,r=(i?t.touch:+t)||10;return re(M(e))>(j(e)?r:o)}(t),J(t))}function R(i){y.is(6)&&(y.set(3),m("dragged")),s&&(function(i){var o=function(t){if(e.is(bt)||!I){var n=O(t);if(n&&n<200)return M(t)/n}return 0}(i),r=function(e){return L()+le(e)*te(re(e)*(n.flickPower||600),a?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(o),s=n.rewind&&n.rewindByDrag;S(!1),a?E.scroll(r,0,n.snap):e.is(Et)?E.go(P(le(o))<0?s?"<":"-":s?">":"+"):e.is(wt)&&I&&s?E.go(T(!0)?">":"<"):E.go(E.toDest(r),!0),S(!0)}(i),J(i)),v(d,vt,F),v(d,yt,R),s=!1}function z(e){!l&&c&&J(e,!0)}function N(e){r=o,o=e,i=L()}function M(e,t){return B(e,t)-B(W(e),t)}function O(e){return V(e)-V(W(e))}function W(e){return o===e&&r||o}function B(e,t){return(j(e)?e.changedTouches[0]:e)["page"+C(t?"Y":"X")]}function j(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function G(e){l=e}return{mount:function(){g(k,vt,u,kt),g(k,yt,u,kt),g(k,"touchstart mousedown",D,kt),g(k,"click",z,{capture:!0}),g(k,"dragstart",J),h([he,be],A)},disable:G,isDragging:function(){return s}}},Keyboard:function(e,t,n){var i,o,r=Ae(e),a=r.on,s=r.bind,c=r.unbind,u=e.root,d=t.Direction.resolve;function f(){var e=n.keyboard;e&&(i="global"===e?window:u,s(i,Ct,m))}function p(){c(i,Ct)}function h(){var e=o;o=!0,l((function(){o=e}))}function m(t){if(!o){var n=xt(t);n===d(Fe)?e.go("<"):n===d(Re)&&e.go(">")}}return{mount:function(){f(),a(be,p),a(be,f),a(ge,h)},destroy:p,disable:function(e){o=e}}},LazyLoad:function(e,t,n){var i=Ae(e),o=i.on,r=i.off,s=i.bind,l=i.emit,u="sequential"===n.lazyLoad,d=[ve,xe],f=[];function p(){a(f),t.Slides.forEach((function(e){K(e.slide,"[data-splide-lazy], [data-splide-lazy-srcset]").forEach((function(t){var i=G(t,Pt),o=G(t,Lt);if(i!==t.src||o!==t.srcset){var r=n.classes.spinner,a=t.parentElement,s=I(a,"."+r)||O("span",r,a);f.push([t,e,s]),t.src||B(t,"none")}}))})),u?v():(r(d),o(d,h),h())}function h(){(f=f.filter((function(t){var i=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,i)||m(t)}))).length||r(d)}function m(e){var t=e[0];C(e[1].slide,ft),s(t,"load error",c(g,e)),M(t,"src",G(t,Pt)),M(t,"srcset",G(t,Lt)),N(t,Pt),N(t,Lt)}function g(e,t){var n=e[0],i=e[1];Q(i.slide,ft),"error"!==t.type&&(U(e[2]),B(n,""),l(Te,n,i),l(Ee)),u&&v()}function v(){f.length&&m(f.shift())}return{mount:function(){n.lazyLoad&&(p(),o(we,p))},destroy:c(a,f),check:h}},Pagination:function(e,t,n){var i,o,r=Ae(e),l=r.on,u=r.emit,d=r.bind,f=t.Slides,p=t.Elements,h=t.Controller,m=h.hasFocus,g=h.getIndex,v=h.go,y=t.Direction.resolve,w=p.pagination,b=[];function E(){i&&(U(w?s(i.children):i),Q(i,o),a(b),i=null),r.destroy()}function k(e){v(">"+e,!0)}function S(e,t){var n=b.length,i=xt(t),o=x(),r=-1;i===y(Re,!1,o)?r=++e%n:i===y(Fe,!1,o)?r=(--e+n)%n:"Home"===i?r=0:"End"===i&&(r=n-1);var a=b[r];a&&(j(a.button),v(">"+r),J(t,!0))}function x(){return n.paginationDirection||n.direction}function P(e){return b[h.toPage(e)]}function L(){var e=P(g(!0)),t=P(g());if(e){var n=e.button;Q(n,ct),N(n,He),M(n,Be,-1)}if(t){var o=t.button;C(o,ct),M(o,He,!0),M(o,Be,"")}u("pagination:updated",{list:i,items:b},e,t)}return{items:b,mount:function t(){E(),l([be,we,Ie],t);var r=n.pagination;w&&B(w,r?"":"none"),r&&(l([ge,Se,xe],L),function(){var t=e.length,r=n.classes,a=n.i18n,s=n.perPage,l=m()?h.getEnd()+1:oe(t/s);C(i=w||O("ul",r.pagination,p.track.parentElement),o=st+"--"+x()),M(i,We,"tablist"),M(i,Xe,a.select),M(i,Je,x()===Me?"vertical":"");for(var u=0;u<l;u++){var g=O("li",null,i),v=O("button",{class:r.page,type:"button"},g),y=f.getIn(u).map((function(e){return e.slide.id})),E=!m()&&s>1?a.pageX:a.slideX;d(v,"click",c(k,u)),n.paginationKeyboard&&d(v,"keydown",c(S,u)),M(g,We,"presentation"),M(v,We,"tab"),M(v,je,y.join(" ")),M(v,Xe,ue(E,u+1)),M(v,Be,-1),b.push({li:g,button:v,page:u})}}(),L(),u("pagination:mounted",{list:i,items:b},P(e.index)))},destroy:E,getAt:P,update:L}},Sync:function(e,t,n){var i=n.isNavigation,o=n.slideFocus,r=[];function s(){var t,n;e.splides.forEach((function(t){t.isParent||(u(e,t.splide),u(t.splide,e))})),i&&((n=(t=Ae(e)).on)(ye,f),n("sk",p),n([he,be],d),r.push(t),t.emit(Pe,e.splides))}function l(){r.forEach((function(e){e.destroy()})),a(r)}function u(e,t){var n=Ae(e);n.on(ge,(function(e,n,i){t.go(t.is(bt)?i:e)})),r.push(n)}function d(){M(t.Elements.list,Je,n.direction===Me?"vertical":"")}function f(t){e.go(t.index)}function p(e,t){k(_t,xt(t))&&(f(e),J(t))}return{setup:c(t.Media.set,{slideFocus:v(o)?i:o},!0),mount:s,destroy:l,remount:function(){l(),s()}}},Wheel:function(e,t,n){var i=Ae(e).bind,o=0;function r(i){if(i.cancelable){var r=i.deltaY,a=r<0,s=V(i),c=n.wheelMinThreshold||0,l=n.wheelSleep||0;re(r)>c&&s-o>l&&(e.go(a?"<":">"),o=s),function(i){return!n.releaseWheel||e.state.is(4)||-1!==t.Controller.getAdjacent(i)}(a)&&J(i)}}return{mount:function(){n.wheel&&i(t.Elements.track,"wheel",r,kt)}}},Live:function(e,t,n){var i=Ae(e).on,o=t.Elements.track,r=n.live&&!n.isNavigation,a=O("span","splide__sr"),s=De(90,c(l,!1));function l(e){M(o,Qe,e),e?(P(o,a),s.start()):(U(a),s.cancel())}function u(e){r&&M(o,Ke,e?"off":"polite")}return{mount:function(){r&&(u(!t.Autoplay.isPaused()),M(o,Ve,!0),a.textContent="…",i(Le,c(u,!0)),i(_e,c(u,!1)),i([ve,xe],c(l,!0)))},disable:u,destroy:function(){N(o,[Ke,Ve,Qe]),U(a)}}}}),It={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:gt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function At(e,t,n){var i=t.Slides;function o(){i.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){Ae(e).on([he,we],o)},start:function(e,t){i.style("transition","opacity "+n.speed+"ms "+n.easing),l(t)},cancel:u}}function Dt(e,t,n){var i,o=t.Move,r=t.Controller,a=t.Scroll,s=t.Elements.list,l=c(W,s,"transition");function u(){l(""),a.cancel()}return{mount:function(){Ae(e).bind(s,"transitionend",(function(e){e.target===s&&i&&(u(),i())}))},start:function(t,s){var c=o.toPosition(t,!0),u=o.getPosition(),d=function(t){var i=n.rewindSpeed;if(e.is(wt)&&i){var o=r.getIndex(!0),a=r.getEnd();if(0===o&&t>=a||o>=a&&0===t)return i}return n.speed}(t);re(c-u)>=1&&d>=1?n.useScroll?a.scroll(c,d,!1,s):(l("transform "+d+"ms "+n.easing),o.translate(c,!0),i=s):(o.jump(t),s())},cancel:u}}var Ft=function(){function e(t,n){var i;this.event=Ae(),this.Components={},this.state=(i=1,{set:function(e){i=e},is:function(e){return k(b(e),i)}}),this.splides=[],this._o={},this._E={};var o=g(t)?q(document,t):t;ee(o,o+" is invalid."),this.root=o,n=R({label:G(o,Xe)||"",labelledby:G(o,Ue)||""},It,e.defaults,n||{});try{R(n,JSON.parse(G(o,"data-splide")))}catch(e){ee(!1,"Invalid JSON")}this._o=Object.create(R({},n))}var t,n,i=e.prototype;return i.mount=function(e,t){var n=this,i=this.state,o=this.Components;return ee(i.is([1,7]),"Already mounted!"),i.set(1),this._C=o,this._T=t||this._T||(this.is(Et)?At:Dt),this._E=e||this._E,D(F({},Tt,this._E,{Transition:this._T}),(function(e,t){var i=e(n,o,n._o);o[t]=i,i.setup&&i.setup()})),D(o,(function(e){e.mount&&e.mount()})),this.emit(he),C(this.root,"is-initialized"),i.set(3),this.emit(me),this},i.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},i.go=function(e){return this._C.Controller.go(e),this},i.on=function(e,t){return this.event.on(e,t),this},i.off=function(e){return this.event.off(e),this},i.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(s(arguments,1))),this},i.add=function(e,t){return this._C.Slides.add(e,t),this},i.remove=function(e){return this._C.Slides.remove(e),this},i.is=function(e){return this._o.type===e},i.refresh=function(){return this.emit(we),this},i.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?Ae(this).on(me,this.destroy.bind(this,e)):(D(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Ce),t.destroy(),e&&a(this.splides),n.set(7)),this},t=e,(n=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();Ft.defaults={},Ft.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};class Rt{constructor(e,t){this.emptyGlowImageTag="empty_glow_image",this.imagesPath=e,this.audioPath=t,this.currentPage=0,this.splideHandle=new Ft(".splide",{fixedHeight:window.innerHeight-20}).mount(),this.splideHandle.on("move",((e,t,n)=>{this.transitioningToPage=!0,this.stopPageAudio(this.book.pages[t])})),this.splideHandle.on("moved",((e,t,n)=>{this.currentPage=e,this.transitioningToPage=!1,this.playPageAudio(this.book.pages[e])})),this.addPageResizeListener()}stopPageAudio(e){for(let t=0;t<e.visualElements.length;t++){let n=e.visualElements[t];if("audio"===n.type){let e=n,t=document.getElementById(e.domID);t.pause(),t.currentTime=0,clearInterval(this.currentPageAutoPlayerInterval);for(let t=0;t<e.audioTimestamps.timestamps.length;t++)document.getElementById(e.domID+"_word_"+t).classList.remove("cr-clickable-word-active")}}}playPageAudio(e){for(let t=0;t<e.visualElements.length;t++){let n=e.visualElements[t];if("audio"===n.type){let e=n,t=document.getElementById(e.domID);t.play();let i=0,o=0;this.currentPageAutoPlayerInterval=setInterval((()=>{if(void 0!==e.audioTimestamps){let n=t.currentTime;for(let t=0;t<e.audioTimestamps.timestamps.length;t++){if(n>=e.audioTimestamps.timestamps[t].startTimestamp&&n<=e.audioTimestamps.timestamps[t].endTimestamp){o=t;let n=document.getElementById(e.domID+"_word_"+o);n.classList.add("cr-clickable-word-active"),n.style.color=e.glowColor}if(i<o){let t=document.getElementById(e.domID+"_word_"+i);t.classList.remove("cr-clickable-word-active"),t.style.color="white",i=o}}if(n>=e.audioTimestamps.timestamps[e.audioTimestamps.timestamps.length-1].endTimestamp-.1){let t=document.getElementById(e.domID+"_word_"+o);t.classList.remove("cr-clickable-word-active"),t.style.color="white",clearInterval(this.currentPageAutoPlayerInterval)}}}),60)}}}addPageResizeListener(){window.addEventListener("resize",(()=>{this.splideHandle.options.fixedHeight=window.innerHeight-20,this.splideHandle.refresh()}))}initializeBook(e){this.book=e,this.currentBookType=e.bookType,this.numberOfPages=e.pages.length,this.currentBookType===i.z.CuriousReader?this.initializeCuriousReaderBook(e):this.currentBookType===i.z.GDL&&this.initializeGDLBook(e)}initializeCuriousReaderBook(e){this.numberOfPages=e.pages.length;for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");let i=!1;for(let o=0;o<e.pages[t].visualElements.length;o++){let r=e.pages[t].visualElements[o];if("image"==r.type){let e=r,i=t;n.appendChild(this.createImageContainer(i,e))}else if("audio"==r.type){i=!0;let o=r,a=null;for(let n=0;n<e.pages[t].visualElements.length;n++){let i=e.pages[t].visualElements[n];if("text"==i.type){a=i;break}}if(a){let e=this.createAudioAndTextContainers(t,o,a);n.appendChild(e[0]),n.appendChild(e[1])}else n.appendChild(this.createAudioContainer(o))}this.splideHandle.add(n)}if(!i)for(let i=0;i<e.pages[t].visualElements.length;i++){let o=e.pages[t].visualElements[i];if("text"==o.type){let e=o;n.appendChild(this.createTextContainer(e))}}}}createTextContainer(e){let t=document.createElement("div");return t.id="cr-text",t.classList.add("cr-text"),t.style.position="absolute",t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.style.top=e.positionY+"%",t.style.left=e.positionX+"%",t.style.width=e.width+"%",t.style.height=e.height+"%",t.innerHTML=e.textContentAsHTML,t}createImageContainer(e,t){let n=document.createElement("div");if(n.style.position="absolute",n.style.top=t.positionY+"%",n.style.left=t.positionX+"%",n.style.width=t.width+"%",n.style.height=t.height+"%",t.imageSource===this.emptyGlowImageTag)n.classList.add("cr-image-empty-glow"),n.classList.add(t.domID),n.addEventListener("click",(()=>{this.handleGlowImageClick(e,t.domID.split("_")[1])}));else{n.id=t.domID,n.classList.add("cr-image");let e=document.createElement("img");e.src=this.imagesPath+t.imageSource.replace("images/",""),e.style.width="100%",e.style.height="100%",n.appendChild(e)}return n}createAudioContainer(e){let t=document.createElement("div");t.classList.add("cr-audio"),t.style.position="absolute";let n=document.createElement("audio");if(n.id=e.domID,n.src=this.audioPath+e.audioSrc.replace("audios/",""),n.controls=!1,t.appendChild(n),void 0!==e.audioTimestamps)for(let n=0;n<e.audioTimestamps.timestamps.length;n++){let i=e.audioTimestamps.timestamps[n],o=document.createElement("audio");o.id=i.domID,o.src=this.audioPath+i.audioSrc.replace("audios/",""),o.controls=!1,t.appendChild(o)}return t}createAudioAndTextContainers(e,t,n){let i=Array(),o=document.createElement("div");o.classList.add("cr-audio"),o.style.position="absolute";let r=document.createElement("audio");r.id=t.domID,r.src=this.audioPath+t.audioSrc.replace("audios/",""),r.controls=!1,o.appendChild(r);let a=Array();if(void 0!==t.audioTimestamps)for(let e=0;e<t.audioTimestamps.timestamps.length;e++){let n=t.audioTimestamps.timestamps[e],i=document.createElement("audio");i.id=n.domID,i.src=this.audioPath+n.audioSrc.replace("audios/",""),i.controls=!1,a.push(n.word.trim()),o.appendChild(i)}i.push(o);let s=t.domID,c=document.createElement("div");c.id="cr-text",c.classList.add("cr-text"),c.style.position="absolute",c.style.webkitTextStroke="1px #303030",c.style.color="#FFFFFF",c.style.textShadow="0.1rem 0.15rem 0.1rem #303030",c.style.fontFamily="Quicksand",c.style.fontWeight="800",c.style.fontSize="1.7em",c.style.top=n.positionY+"%",c.style.left=n.positionX+"%",c.style.width=n.width+"%",c.style.height=n.height+"%";let l=document.createElement("p");l.style.textAlign="center",l.style.fontSize="1.75em";for(let t=0;t<a.length;t++){let n=document.createElement("div");n.id=s+"_word_"+t,n.classList.add("cr-clickable-word"),n.style.margin="10px",n.innerText=a[t],n.addEventListener("click",(n=>{this.handleInteractiveWordClick(e,t)})),l.appendChild(n)}return c.appendChild(l),i.push(c),i}handleGlowImageClick(e,t){let n=parseInt(t);this.handleInteractiveWordClick(e,n)}handleInteractiveWordClick(e,t){let n=this.book.pages[e];for(let e=0;e<n.visualElements.length;e++){let i=n.visualElements[e];if("audio"===i.type){let e=i,n=document.getElementById(e.audioTimestamps.timestamps[t].domID),o=document.getElementById(e.domID+"_word_"+t);o.classList.add("cr-clickable-word-active"),o.style.color=e.glowColor;let r="img"+e.domID+"_"+t,a=document.getElementsByClassName(r);for(let t=0;t<a.length;t++)a[t].style.boxShadow=e.glowColor+" 0px 0px 20px 20px";setTimeout((()=>{o.classList.remove("cr-clickable-word-active"),o.style.color="white";for(let e=0;e<a.length;e++)a[e].style.boxShadow="transparent 0px 0px 20px 20px"}),600),n.play()}}}initializeGDLBook(e){for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<e.pages[t].visualElements.length;n++){let o=e.pages[t].visualElements[n];if("text"==o.type){let e=o,t=document.createElement("div");t.style.width="60%",t.classList.add("gdl-text"),t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.innerHTML=e.textContentAsHTML,i.appendChild(t)}else if("image"==o.type){let e=o,t=document.createElement("div");t.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+e.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",t.appendChild(n),i.appendChild(t)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(e){this.transitioningToPage=!0}}},131:(e,t,n)=>{n.d(t,{ZW:()=>p});try{self["workbox:window:6.5.3"]&&_()}catch(i){}function i(e,t){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(e){n(e.data)},e.postMessage(t,[i.port2])}))}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function r(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:6.5.3"]&&_()}catch(i){}var a=function(){var e=this;this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))};function s(e,t){var n=location.href;return new URL(e,n).href===new URL(t,n).href}var c=function(e,t){this.type=e,Object.assign(this,t)};function l(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function u(){}var d={type:"SKIP_WAITING"};function f(e,t){if(!t)return e&&e.then?e.then(u):Promise.resolve()}var p=function(e){var t,n;function o(t,n){var i,o;return void 0===n&&(n={}),(i=e.call(this)||this).nn={},i.tn=0,i.rn=new a,i.en=new a,i.on=new a,i.un=0,i.an=new Set,i.cn=function(){var e=i.fn,t=e.installing;i.tn>0||!s(t.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=t,e.removeEventListener("updatefound",i.cn)):(i.hn=t,i.an.add(t),i.rn.resolve(t)),++i.tn,t.addEventListener("statechange",i.ln)},i.ln=function(e){var t=i.fn,n=e.target,o=n.state,r=n===i.vn,a={sw:n,isExternal:r,originalEvent:e};!r&&i.mn&&(a.isUpdate=!0),i.dispatchEvent(new c(o,a)),"installed"===o?i.wn=self.setTimeout((function(){"installed"===o&&t.waiting===n&&i.dispatchEvent(new c("waiting",a))}),200):"activating"===o&&(clearTimeout(i.wn),r||i.en.resolve(n))},i.dn=function(e){var t=i.hn,n=t!==navigator.serviceWorker.controller;i.dispatchEvent(new c("controlling",{isExternal:n,originalEvent:e,sw:t,isUpdate:i.mn})),n||i.on.resolve(t)},i.gn=(o=function(e){var t=e.data,n=e.ports,o=e.source;return l(i.getSW(),(function(){i.an.has(o)&&i.dispatchEvent(new c("message",{data:t,originalEvent:e,ports:n,sw:o}))}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(o.apply(this,e))}catch(e){return Promise.reject(e)}}),i.sn=t,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=e,(t=o).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var r,u=o.prototype;return u.register=function(e){var t=(void 0===e?{}:e).immediate,n=void 0!==t&&t;try{var i=this;return function(e,t){var n=e();return n&&n.then?n.then(t):t()}((function(){if(!n&&"complete"!==document.readyState)return f(new Promise((function(e){return window.addEventListener("load",e)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),l(i.bn(),(function(e){i.fn=e,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var t=i.fn.waiting;return t&&s(t.scriptURL,i.sn.toString())&&(i.hn=t,Promise.resolve().then((function(){i.dispatchEvent(new c("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(e){return Promise.reject(e)}},u.update=function(){try{return this.fn?f(this.fn.update()):void 0}catch(e){return Promise.reject(e)}},u.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},u.messageSW=function(e){try{return l(this.getSW(),(function(t){return i(t,e)}))}catch(e){return Promise.reject(e)}},u.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&i(this.fn.waiting,d)},u.pn=function(){var e=navigator.serviceWorker.controller;return e&&s(e.scriptURL,this.sn.toString())?e:void 0},u.bn=function(){try{var e=this;return function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return l(navigator.serviceWorker.register(e.sn,e.nn),(function(t){return e.un=performance.now(),t}))}),(function(e){throw e}))}catch(e){return Promise.reject(e)}},(r=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(o.prototype,r),o}(function(){function e(){this.Pn=new Map}var t=e.prototype;return t.addEventListener=function(e,t){this.Sn(e).add(t)},t.removeEventListener=function(e,t){this.Sn(e).delete(t)},t.dispatchEvent=function(e){e.target=this;for(var t,n=r(this.Sn(e.type));!(t=n()).done;)(0,t.value)(e)},t.Sn=function(e){return this.Pn.has(e)||this.Pn.set(e,new Set),this.Pn.get(e)},e}())}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var n=r[e]={exports:{}};return o[e](n,n.exports,a),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",i=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},a.a=(o,r,a)=>{var s;a&&((s=[]).d=1);var c,l,u,d=new Set,f=o.exports,p=new Promise(((e,t)=>{u=t,l=e}));p[t]=f,p[e]=e=>(s&&e(s),d.forEach(e),p.catch((e=>{}))),o.exports=p,r((o=>{var r;c=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[e])return o;if(o.then){var r=[];r.d=0,o.then((e=>{a[t]=e,i(r)}),(e=>{a[n]=e,i(r)}));var a={};return a[e]=e=>e(r),a}}var s={};return s[e]=e=>{},s[t]=o,s})))(o);var a=()=>c.map((e=>{if(e[n])throw e[n];return e[t]})),l=new Promise((t=>{(r=()=>t(a)).r=0;var n=e=>e!==s&&!d.has(e)&&(d.add(e),e&&!e.d&&(r.r++,e.push(r)));c.map((t=>t[e](n)))}));return r.r?l:a()}),(e=>(e?u(p[n]=e):l(f),i(s)))),s&&(s.d=0)},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a(886)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,