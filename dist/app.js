/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var e={913:()=>{try{self["workbox:core:6.5.3"]&&_()}catch(e){}},550:()=>{try{self["workbox:expiration:6.5.3"]&&_()}catch(e){}},80:()=>{try{self["workbox:routing:6.5.3"]&&_()}catch(e){}},873:()=>{try{self["workbox:strategies:6.5.3"]&&_()}catch(e){}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i](o,o.exports,n),o.exports}(()=>{var e;!function(e){e.CuriousReader="CuriousReader",e.GDL="GDL",e.Unknown="Unknown"}(e||(e={}));var t=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};class i{constructor(e){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=e}parseBook(){return t(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{this.parseContentJSONFile().then((t=>{this.contentJSON=t,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),e(n)})).catch((e=>{t(e)}))}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?e.CuriousReader:void 0!==this.contentJSON.chapters?e.GDL:e.Unknown}parsePages(t){let n=[];if(t.bookType===e.CuriousReader){let e=this.contentJSON.presentation.slides,t=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<e.length;i++){let r=e[i],o={visualElements:[],backgroundColor:t};o.visualElements=this.parsePageCR(r),n.push(o)}}else if(t.bookType===e.GDL){let e=this.contentJSON.chapters,t="#FCFCF2";for(let i=0;i<e.length;i++){let r=e[i],o={visualElements:[],backgroundColor:t};o.visualElements=this.parsePageGDL(r),n.push(o)}}else console.log("Unknown book type!");return n}parsePageCR(e){let t=[],n=e.elements;for(let e=0;e<n.length;e++){let i=n[e].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[e]);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[e]);t.push(i)}}return t}parsePageGDL(e){let t=[],n=e.params.content;for(let e=0;e<n.length;e++){let i=n[e].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[e].content.params);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[e].content.params);t.push(i)}}return t}parseTextElementCR(e){return{type:"text",positionX:e.x,positionY:e.y,width:e.width,height:e.height,textContentAsHTML:e.action.params.text}}parseTextElementGDL(e){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:e.text}}parseImageElementCR(e){let t="";return t=void 0===e.action.params.file?this.emptyGlowImageTag:e.action.params.file.path,{type:"image",positionX:e.x,positionY:e.y,width:e.width,height:e.height,imageSource:t}}parseImageElementGDL(e){return{type:"image",positionX:NaN,positionY:NaN,width:e.width,height:e.height,imageSource:e.file.path}}parseAudioElementCR(e){return{type:"audio",positionX:e.position.x,positionY:e.position.y,width:e.size.width,height:e.size.height,audioSrc:e.action.audioSrc,styles:e.styles}}parseContentJSONFile(){return t(this,void 0,void 0,(function*(){return new Promise(((e,t)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let t=n.response;delete t.l10n,delete t.override,e(t)}else t(n.response)},n.send()}))}))}}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o="(prefers-reduced-motion: reduce)";function s(e){e.length=0}function a(e,t,n){return Array.prototype.slice.call(e,t,n)}function c(e){return e.bind.apply(e,[null].concat(a(arguments,1)))}var u=setTimeout,l=function(){};function d(e){return requestAnimationFrame(e)}function h(e,t){return typeof t===e}function f(e){return!y(e)&&h("object",e)}var p=Array.isArray,g=c(h,"function"),m=c(h,"string"),v=c(h,"undefined");function y(e){return null===e}function w(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function b(e){return p(e)?e:[e]}function _(e,t){b(e).forEach(t)}function x(e,t){return e.indexOf(t)>-1}function E(e,t){return e.push.apply(e,b(t)),e}function C(e,t,n){e&&_(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function S(e,t){C(e,m(t)?t.split(" "):t,!0)}function k(e,t){_(t,e.appendChild.bind(e))}function L(e,t){_(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function P(e,t){return w(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function D(e,t){var n=e?a(e.children):[];return t?n.filter((function(e){return P(e,t)})):n}function N(e,t){return t?D(e,t)[0]:e.firstElementChild}var T=Object.keys;function R(e,t,n){return e&&(n?T(e).reverse():T(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function A(e){return a(arguments,1).forEach((function(t){R(t,(function(n,i){e[i]=t[i]}))})),e}function M(e){return a(arguments,1).forEach((function(t){R(t,(function(t,n){p(t)?e[n]=t.slice():f(t)?e[n]=M({},f(e[n])?e[n]:{},t):e[n]=t}))})),e}function O(e,t){_(t||T(e),(function(t){delete e[t]}))}function I(e,t){_(e,(function(e){_(t,(function(t){e&&e.removeAttribute(t)}))}))}function F(e,t,n){f(t)?R(t,(function(t,n){F(e,n,t)})):_(e,(function(e){y(n)||""===n?I(e,t):e.setAttribute(t,String(n))}))}function q(e,t,n){var i=document.createElement(e);return t&&(m(t)?S(i,t):F(i,t)),n&&k(n,i),i}function B(e,t,n){if(v(n))return getComputedStyle(e)[t];y(n)||(e.style[t]=""+n)}function W(e,t){B(e,"display",t)}function z(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function j(e,t){return e.getAttribute(t)}function H(e,t){return e&&e.classList.contains(t)}function U(e){return e.getBoundingClientRect()}function G(e){_(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function X(e){return N((new DOMParser).parseFromString(e,"text/html").body)}function J(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function K(e,t){return e&&e.querySelector(t)}function $(e,t){return t?a(e.querySelectorAll(t)):[]}function Y(e,t){C(e,t,!1)}function V(e){return e.timeStamp}function Q(e){return m(e)?e:e?e+"px":""}var Z="splide";function ee(e,t){if(!e)throw new Error("[splide] "+(t||""))}var te=Math.min,ne=Math.max,ie=Math.floor,re=Math.ceil,oe=Math.abs;function se(e,t,n){return oe(e-t)<n}function ae(e,t,n,i){var r=te(t,n),o=ne(t,n);return i?r<e&&e<o:r<=e&&e<=o}function ce(e,t,n){var i=te(t,n),r=ne(t,n);return te(ne(i,e),r)}function ue(e){return+(e>0)-+(e<0)}function le(e,t){return _(t,(function(t){e=e.replace("%s",""+t)})),e}function de(e){return e<10?"0"+e:""+e}var he={};function fe(){var e=[];function t(e,t,n){_(e,(function(e){e&&_(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");n(e,i[0],i[1])}))}))}))}return{bind:function(n,i,r,o){t(n,i,(function(t,n,i){var s="addEventListener"in t,a=s?t.removeEventListener.bind(t,n,r,o):t.removeListener.bind(t,r);s?t.addEventListener(n,r,o):t.addListener(r),e.push([t,n,i,r,a])}))},unbind:function(n,i,r){t(n,i,(function(t,n,i){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==i||r&&e[3]!==r)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,n),e.dispatchEvent(i),i},destroy:function(){e.forEach((function(e){e[4]()})),s(e)}}}var pe="mounted",ge="ready",me="move",ve="moved",ye="click",we="refresh",be="updated",_e="resize",xe="resized",Ee="scroll",Ce="scrolled",Se="destroy",ke="navigation:mounted",Le="autoplay:play",Pe="autoplay:pause",De="lazyload:loaded",Ne="ei";function Te(e){var t=e?e.event.bus:document.createDocumentFragment(),n=fe();return e&&e.event.on(Se,n.destroy),A(n,{bus:t,on:function(e,i){n.bind(t,b(e).join(" "),(function(e){i.apply(i,p(e.detail)?e.detail:[])}))},off:c(n.unbind,t),emit:function(e){n.dispatch(t,e,a(arguments,1))}})}function Re(e,t,n,i){var r,o,s=Date.now,a=0,c=!0,u=0;function l(){if(!c){if(a=e?te((s()-r)/e,1):1,n&&n(a),a>=1&&(t(),r=s(),i&&++u>=i))return h();o=d(l)}}function h(){c=!0}function f(){o&&cancelAnimationFrame(o),a=0,o=0,c=!0}return{start:function(t){t||f(),r=s()-(t?a*e:0),c=!1,o=d(l)},rewind:function(){r=s(),a=0,n&&n(a)},pause:h,cancel:f,set:function(t){e=t},isPaused:function(){return c}}}var Ae="ArrowLeft",Me="ArrowRight",Oe="ArrowUp",Ie="ArrowDown",Fe="ttb",qe={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Oe,Me],ArrowRight:[Ie,Ae]};var Be="role",We="tabindex",ze="aria-controls",je="aria-current",He="aria-selected",Ue="aria-label",Ge="aria-labelledby",Xe="aria-hidden",Je="aria-orientation",Ke="aria-roledescription",$e="aria-live",Ye="aria-busy",Ve="aria-atomic",Qe=[Be,We,"disabled",ze,je,Ue,Ge,Xe,Je,Ke],Ze=Z,et="splide__track",tt="splide__slide",nt=tt+"--clone",it="splide__arrows",rt="splide__arrow",ot=rt+"--prev",st=rt+"--next",at="splide__pagination",ct="is-active",ut="is-prev",lt="is-next",dt="is-visible",ht="is-loading",ft="is-focus-in",pt="is-overflow",gt=[ct,dt,ut,lt,ht,ft,pt],mt={slide:tt,clone:nt,arrows:it,arrow:rt,prev:ot,next:st,pagination:at,page:"splide__pagination__page",spinner:"splide__spinner"},vt="touchmove mousemove",yt="touchend touchcancel mouseup click",wt="slide",bt="loop",_t="fade";var xt={passive:!1,capture:!0},Et={Spacebar:" ",Right:Me,Left:Ae,Up:Oe,Down:Ie};function Ct(e){return e=m(e)?e:e.key,Et[e]||e}var St="keydown",kt="data-splide-lazy",Lt="data-splide-lazy-srcset",Pt=[" ","Enter"],Dt=Object.freeze({__proto__:null,Media:function(e,t,n){var i=e.state,r=n.breakpoints||{},s=n.reducedMotion||{},a=fe(),c=[];function u(e){e&&a.destroy()}function l(e,t){var n=matchMedia(t);a.bind(n,"change",d),c.push([e,n])}function d(){var t=i.is(7),r=n.direction,o=c.reduce((function(e,t){return M(e,t[1].matches?t[0]:{})}),{});O(n),h(o),n.destroy?e.destroy("completely"===n.destroy):t?(u(!0),e.mount()):r!==n.direction&&e.refresh()}function h(t,r,o){M(n,t),r&&M(Object.getPrototypeOf(n),t),!o&&i.is(1)||e.emit(be,n)}return{setup:function(){var e="min"===n.mediaQuery;T(r).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){l(r[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),l(s,o),d()},destroy:u,reduce:function(e){matchMedia(o).matches&&(e?M(n,s):O(n,T(s)))},set:h}},Direction:function(e,t,n){return{resolve:function(e,t,i){var r="rtl"!==(i=i||n.direction)||t?i===Fe?0:-1:1;return qe[e]&&qe[e][r]||e.replace(/width|left|right/i,(function(e,t){var n=qe[e.toLowerCase()][r]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*("rtl"===n.direction?1:-1)}}},Elements:function(e,t,n){var i,r,o,a=Te(e),c=a.on,u=a.bind,l=e.root,d=n.i18n,h={},f=[],p=[],m=[];function v(){var e,t,o;i=b("."+et),r=N(i,".splide__list"),ee(i&&r,"A track/list element is missing."),E(f,D(r,".splide__slide:not(."+nt+")")),R({arrows:it,pagination:at,prev:ot,next:st,bar:"splide__progress__bar",toggle:"splide__toggle"},(function(e,t){h[t]=b("."+e)})),A(h,{root:l,track:i,list:r,slides:f}),t=l.id||""+(e=Z)+de(he[e]=(he[e]||0)+1),o=n.role,l.id=t,i.id=i.id||t+"-track",r.id=r.id||t+"-list",!j(l,Be)&&"SECTION"!==l.tagName&&o&&F(l,Be,o),F(l,Ke,d.carousel),F(r,Be,"presentation"),w()}function y(e){var t=Qe.concat("style");s(f),Y(l,p),Y(i,m),I([i,r],t),I(l,e?t:["style",Ke])}function w(){Y(l,p),Y(i,m),p=_(Ze),m=_(et),S(l,p),S(i,m),F(l,Ue,n.label),F(l,Ge,n.labelledby)}function b(e){var t=K(l,e);return t&&function(e,t){if(g(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!P(n,t);)n=n.parentElement;return n}(t,".splide")===l?t:void 0}function _(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===Ze&&ct]}return A(h,{setup:v,mount:function(){c(we,y),c(we,v),c(be,w),u(document,"touchstart mousedown keydown",(function(e){o="keydown"===e.type}),{capture:!0}),u(l,"focusin",(function(){C(l,ft,!!o)}))},destroy:y})},Slides:function(e,t,n){var i=Te(e),r=i.on,o=i.emit,a=i.bind,u=t.Elements,l=u.slides,d=u.list,h=[];function f(){l.forEach((function(e,t){v(e,t,-1)}))}function p(){E((function(e){e.destroy()})),s(h)}function v(t,n,i){var r=function(e,t,n,i){var r,o=Te(e),s=o.on,a=o.emit,u=o.bind,l=e.Components,d=e.root,h=e.options,f=h.isNavigation,p=h.updateOnMove,g=h.i18n,m=h.pagination,v=h.slideFocus,y=l.Direction.resolve,w=j(i,"style"),b=j(i,Ue),_=n>-1,x=N(i,".splide__slide__container");function E(){var r=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");F(i,Ue,le(g.slideX,(_?n:t)+1)),F(i,ze,r),F(i,Be,v?"button":""),v&&I(i,Ke)}function S(){r||k()}function k(){if(!r){var n=e.index;(o=L())!==H(i,ct)&&(C(i,ct,o),F(i,je,f&&o||""),a(o?"active":"inactive",P)),function(){var t=function(){if(e.is(_t))return L();var t=U(l.Elements.track),n=U(i),r=y("left",!0),o=y("right",!0);return ie(t[r])<=re(n[r])&&ie(n[o])<=re(t[o])}(),n=!t&&(!L()||_);if(e.state.is([4,5])||F(i,Xe,n||""),F($(i,h.focusableNodes||""),We,n?-1:""),v&&F(i,We,n?-1:0),t!==H(i,dt)&&(C(i,dt,t),a(t?"visible":"hidden",P)),!t&&document.activeElement===i){var r=l.Slides.getAt(e.index);r&&z(r.slide)}}(),C(i,ut,t===n-1),C(i,lt,t===n+1)}var o}function L(){var i=e.index;return i===t||h.cloneStatus&&i===n}var P={index:t,slideIndex:n,slide:i,container:x,isClone:_,mount:function(){_||(i.id=d.id+"-slide"+de(t+1),F(i,Be,m?"tabpanel":"group"),F(i,Ke,g.slide),F(i,Ue,b||le(g.slideLabel,[t+1,e.length]))),u(i,"click",c(a,ye,P)),u(i,"keydown",c(a,"sk",P)),s([ve,"sh",Ce],k),s(ke,E),p&&s(me,S)},destroy:function(){r=!0,o.destroy(),Y(i,gt),I(i,Qe),F(i,"style",w),F(i,Ue,b||"")},update:k,style:function(e,t,n){B(n&&x||i,e,t)},isWithin:function(n,i){var r=oe(n-t);return _||!h.rewind&&!e.is(bt)||(r=te(r,e.length-r)),r<=i}};return P}(e,n,i,t);r.mount(),h.push(r),h.sort((function(e,t){return e.index-t.index}))}function y(e){return e?D((function(e){return!e.isClone})):h}function E(e,t){y(t).forEach(e)}function D(e){return h.filter(g(e)?e:function(t){return m(e)?P(t.slide,e):x(b(e),t.index)})}return{mount:function(){f(),r(we,p),r(we,f)},destroy:p,update:function(){E((function(e){e.update()}))},register:v,get:y,getIn:function(e){var i=t.Controller,r=i.toIndex(e),o=i.hasFocus()?1:n.perPage;return D((function(e){return ae(e.index,r,r+o-1)}))},getAt:function(e){return D(e)[0]},add:function(e,t){_(e,(function(e){if(m(e)&&(e=X(e)),w(e)){var i=l[t];i?L(e,i):k(d,e),S(e,n.classes.slide),r=e,s=c(o,_e),u=$(r,"img"),(h=u.length)?u.forEach((function(e){a(e,"load error",(function(){--h||s()}))})):s()}var r,s,u,h})),o(we)},remove:function(e){G(D(e).map((function(e){return e.slide}))),o(we)},forEach:E,filter:D,style:function(e,t,n){E((function(i){i.style(e,t,n)}))},getLength:function(e){return e?l.length:h.length},isEnough:function(){return h.length>n.perPage}}},Layout:function(e,t,n){var i,r,o,s=Te(e),a=s.on,u=s.bind,l=s.emit,d=t.Slides,h=t.Direction.resolve,p=t.Elements,g=p.root,m=p.track,v=p.list,y=d.getAt,w=d.style;function b(){i=n.direction===Fe,B(g,"maxWidth",Q(n.width)),B(m,h("paddingLeft"),x(!1)),B(m,h("paddingRight"),x(!0)),_(!0)}function _(e){var t,s=U(g);(e||r.width!==s.width||r.height!==s.height)&&(B(m,"height",(t="",i&&(ee(t=E(),"height or heightRatio is missing."),t="calc("+t+" - "+x(!1)+" - "+x(!0)+")"),t)),w(h("marginRight"),Q(n.gap)),w("width",n.autoWidth?null:Q(n.fixedWidth)||(i?"":S())),w("height",Q(n.fixedHeight)||(i?n.autoHeight?null:S():E()),!0),r=s,l(xe),o!==(o=T())&&(C(g,pt,o),l("overflow",o)))}function x(e){var t=n.padding,i=h(e?"right":"left");return t&&Q(t[i]||(f(t)?0:t))||"0px"}function E(){return Q(n.height||U(v).width*n.heightRatio)}function S(){var e=Q(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function k(){return U(v)[h("width")]}function L(e,t){var n=y(e||0);return n?U(n.slide)[h("width")]+(t?0:N()):0}function P(e,t){var n=y(e);if(n){var i=U(n.slide)[h("right")],r=U(v)[h("left")];return oe(i-r)+(t?0:N())}return 0}function D(t){return P(e.length-1)-P(0)+L(0,t)}function N(){var e=y(0);return e&&parseFloat(B(e.slide,h("marginRight")))||0}function T(){return e.is(_t)||D(!0)>k()}return{mount:function(){var e,t;b(),u(window,"resize load",(e=c(l,_e),t=Re(0,e,null,1),function(){t.isPaused()&&t.start()})),a([be,we],b),a(_e,_)},resize:_,listSize:k,slideSize:L,sliderSize:D,totalSize:P,getPadding:function(e){return parseFloat(B(m,h("padding"+(e?"Right":"Left"))))||0},isOverflow:T}},Clones:function(e,t,n){var i,r=Te(e),o=r.on,a=t.Elements,c=t.Slides,u=t.Direction.resolve,l=[];function d(){o(we,h),o([be,_e],p),(i=g())&&(function(t){var i=c.get().slice(),r=i.length;if(r){for(;i.length<t;)E(i,i);E(i.slice(-t),i.slice(0,t)).forEach((function(o,s){var u=s<t,d=function(t,i){var r=t.cloneNode(!0);return S(r,n.classes.clone),r.id=e.root.id+"-clone"+de(i+1),r}(o.slide,s);u?L(d,i[0].slide):k(a.list,d),E(l,d),c.register(d,s-t+(u?0:r),o.index)}))}}(i),t.Layout.resize(!0))}function h(){f(),d()}function f(){G(l),s(l),r.destroy()}function p(){var e=g();i!==e&&(i<e||!e)&&r.emit(we)}function g(){var i=n.clones;if(e.is(bt)){if(v(i)){var r=n[u("fixedWidth")]&&t.Layout.slideSize(0);i=r&&re(U(a.track)[u("width")]/r)||n[u("autoWidth")]&&e.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:f}},Move:function(e,t,n){var i,r=Te(e),o=r.on,s=r.emit,a=e.state.set,c=t.Layout,u=c.slideSize,l=c.getPadding,d=c.totalSize,h=c.listSize,f=c.sliderSize,p=t.Direction,g=p.resolve,m=p.orient,y=t.Elements,w=y.list,b=y.track;function _(){t.Controller.isBusy()||(t.Scroll.cancel(),x(e.index),t.Slides.update())}function x(e){E(L(e,!0))}function E(n,i){if(!e.is(_t)){var r=i?n:function(n){if(e.is(bt)){var i=k(n),r=i>t.Controller.getEnd();(i<0||r)&&(n=C(n,r))}return n}(n);B(w,"transform","translate"+g("X")+"("+r+"px)"),n!==r&&s("sh")}}function C(e,t){var n=e-D(t),i=f();return e-m(i*(re(oe(n)/i)||1))*(t?1:-1)}function S(){E(P(),!0),i.cancel()}function k(e){for(var n=t.Slides.get(),i=0,r=1/0,o=0;o<n.length;o++){var s=n[o].index,a=oe(L(s,!0)-e);if(!(a<=r))break;r=a,i=s}return i}function L(t,i){var r=m(d(t-1)-function(e){var t=n.focus;return"center"===t?(h()-u(e,!0))/2:+t*u(e)||0}(t));return i?function(t){return n.trimSpace&&e.is(wt)&&(t=ce(t,0,m(f(!0)-h()))),t}(r):r}function P(){var e=g("left");return U(w)[e]-U(b)[e]+m(l(!1))}function D(e){return L(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=t.Transition,o([pe,xe,be,we],_)},move:function(e,t,n,r){var o,c;e!==t&&(o=e>n,c=m(C(P(),o)),o?c>=0:c<=w[g("scrollWidth")]-U(b)[g("width")])&&(S(),E(C(P(),e>n),!0)),a(4),s(me,t,n,e),i.start(t,(function(){a(3),s(ve,t,n,e),r&&r()}))},jump:x,translate:E,shift:C,cancel:S,toIndex:k,toPosition:L,getPosition:P,getLimit:D,exceededLimit:function(e,t){t=v(t)?P():t;var n=!0!==e&&m(t)<m(D(!1)),i=!1!==e&&m(t)>m(D(!0));return n||i},reposition:_}},Controller:function(e,t,n){var i,r,o,s,a=Te(e),u=a.on,l=a.emit,d=t.Move,h=d.getPosition,f=d.getLimit,p=d.toPosition,g=t.Slides,y=g.isEnough,w=g.getLength,b=n.omitEnd,_=e.is(bt),x=e.is(wt),E=c(D,!1),C=c(D,!0),S=n.start||0,k=S;function L(){r=w(!0),o=n.perMove,s=n.perPage,i=R();var e=ce(S,0,b?i:r-1);e!==S&&(S=e,d.reposition())}function P(){i!==R()&&l(Ne)}function D(e,t){var n=o||(I()?1:s),r=N(S+n*(e?-1:1),S,!(o||I()));return-1===r&&x&&!se(h(),f(!e),1)?e?0:i:t?r:T(r)}function N(t,a,c){if(y()||I()){var u=function(t){if(x&&"move"===n.trimSpace&&t!==S)for(var i=h();i===p(t,!0)&&ae(t,0,e.length-1,!n.rewind);)t<S?--t:++t;return t}(t);u!==t&&(a=t,t=u,c=!1),t<0||t>i?t=o||!ae(0,t,a,!0)&&!ae(i,a,t,!0)?_?c?t<0?-(r%s||s):r:t:n.rewind?t<0?i:0:-1:A(M(t)):c&&t!==a&&(t=A(M(a)+(t<a?-1:1)))}else t=-1;return t}function T(e){return _?(e+r)%r||0:e}function R(){for(var e=r-(I()||_&&o?1:s);b&&e-- >0;)if(p(r-1,!0)!==p(e,!0)){e++;break}return ce(e,0,r-1)}function A(e){return ce(I()?e:s*e,0,i)}function M(e){return I()?te(e,i):ie((e>=i?r-1:e)/s)}function O(e){e!==S&&(k=S,S=e)}function I(){return!v(n.focus)||n.isNavigation}function F(){return e.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){L(),u([be,we,Ne],L),u(xe,P)},go:function(e,t,n){if(!F()){var r=function(e){var t=S;if(m(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],r=n[1],o=n[2];"+"===r||"-"===r?t=N(S+ +(""+r+(+o||1)),S):">"===r?t=o?A(+o):E(!0):"<"===r&&(t=C(!0))}else t=_?e:ce(e,0,i);return t}(e),o=T(r);o>-1&&(t||o!==S)&&(O(o),d.move(r,o,k,n))}},scroll:function(e,n,r,o){t.Scroll.scroll(e,n,r,(function(){var e=T(d.toIndex(h()));O(b?te(e,i):e),o&&o()}))},getNext:E,getPrev:C,getAdjacent:D,getEnd:R,setIndex:O,getIndex:function(e){return e?k:S},toIndex:A,toPage:M,toDest:function(e){var t=d.toIndex(e);return x?ce(t,0,i):t},hasFocus:I,isBusy:F}},Arrows:function(e,t,n){var i,r,o=Te(e),s=o.on,a=o.bind,u=o.emit,l=n.classes,d=n.i18n,h=t.Elements,f=t.Controller,p=h.arrows,g=h.track,m=p,v=h.prev,y=h.next,w={};function b(){var e;!(e=n.arrows)||v&&y||(m=p||q("div",l.arrows),v=C(!0),y=C(!1),i=!0,k(m,[v,y]),!p&&L(m,g)),v&&y&&(A(w,{prev:v,next:y}),W(m,e?"":"none"),S(m,r=it+"--"+n.direction),e&&(s([pe,ve,we,Ce,Ne],P),a(y,"click",c(E,">")),a(v,"click",c(E,"<")),P(),F([v,y],ze,g.id),u("arrows:mounted",v,y))),s(be,_)}function _(){x(),b()}function x(){o.destroy(),Y(m,r),i?(G(p?[v,y]:m),v=y=null):I([v,y],Qe)}function E(e){f.go(e,!0)}function C(e){return X('<button class="'+l.arrow+" "+(e?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function P(){if(v&&y){var t=e.index,n=f.getPrev(),i=f.getNext(),r=n>-1&&t<n?d.last:d.prev,o=i>-1&&t>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,F(v,Ue,r),F(y,Ue,o),u("arrows:updated",v,y,n,i)}}return{arrows:w,mount:b,destroy:x,update:P}},Autoplay:function(e,t,n){var i,r,o=Te(e),s=o.on,a=o.bind,c=o.emit,u=Re(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&B(t,"width",100*e+"%"),c("autoplay:playing",e)})),l=u.isPaused,d=t.Elements,h=t.Elements,f=h.root,p=h.toggle,g=n.autoplay,m="pause"===g;function v(){l()&&t.Slides.isEnough()&&(u.start(!n.resetProgress),r=i=m=!1,b(),c(Le))}function y(e){void 0===e&&(e=!0),m=!!e,b(),l()||(u.pause(),c(Pe))}function w(){m||(i||r?y(!1):v())}function b(){p&&(C(p,ct,!m),F(p,Ue,n.i18n[m?"play":"pause"]))}function _(e){var i=t.Slides.getAt(e);u.set(i&&+j(i.slide,"data-splide-interval")||n.interval)}return{mount:function(){g&&(n.pauseOnHover&&a(f,"mouseenter mouseleave",(function(e){i="mouseenter"===e.type,w()})),n.pauseOnFocus&&a(f,"focusin focusout",(function(e){r="focusin"===e.type,w()})),p&&a(p,"click",(function(){m?v():y(!0)})),s([me,Ee,we],u.rewind),s(me,_),p&&F(p,ze,d.track.id),m||v(),b())},destroy:u.cancel,play:v,pause:y,isPaused:l}},Cover:function(e,t,n){var i=Te(e).on;function r(e){t.Slides.forEach((function(t){var n=N(t.container||t.slide,"img");n&&n.src&&o(e,n,t)}))}function o(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),W(t,e?"none":"")}return{mount:function(){n.cover&&(i(De,c(o,!0)),i([pe,be,we],c(r,!0)))},destroy:c(r,!1)}},Scroll:function(e,t,n){var i,r,o=Te(e),s=o.on,a=o.emit,u=e.state.set,l=t.Move,d=l.getPosition,h=l.getLimit,f=l.exceededLimit,p=l.translate,g=e.is(wt),m=1;function v(e,n,o,s,h){var p=d();if(b(),o&&(!g||!f())){var v=t.Layout.sliderSize(),_=ue(e)*v*ie(oe(e)/v)||0;e=l.toPosition(t.Controller.toDest(e%v))+_}var x=se(p,e,1);m=1,n=x?0:n||ne(oe(e-p)/1.5,800),r=s,i=Re(n,y,c(w,p,e,h),1),u(5),a(Ee),i.start()}function y(){u(3),r&&r(),a(Ce)}function w(e,t,i,o){var s,a,c=d(),u=(e+(t-e)*(s=o,(a=n.easingFunc)?a(s):1-Math.pow(1-s,4))-c)*m;p(c+u),g&&!i&&f()&&(m*=.6,oe(u)<10&&v(h(f(!0)),600,!1,r,!0))}function b(){i&&i.cancel()}function _(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){s(me,b),s([be,we],_)},destroy:b,scroll:v,cancel:_}},Drag:function(e,t,n){var i,r,o,s,a,c,u,d,h=Te(e),p=h.on,g=h.emit,m=h.bind,v=h.unbind,y=e.state,w=t.Move,b=t.Scroll,_=t.Controller,x=t.Elements.track,E=t.Media.reduce,C=t.Direction,S=C.resolve,k=C.orient,L=w.getPosition,D=w.exceededLimit,N=!1;function T(){var e=n.drag;j(!e),s="free"===e}function R(e){if(c=!1,!u){var t=z(e);i=e.target,r=n.noDrag,P(i,".splide__pagination__page, ."+rt)||r&&P(i,r)||!t&&e.button||(_.isBusy()?J(e,!0):(d=t?x:window,a=y.is([4,5]),o=null,m(d,vt,A,xt),m(d,yt,M,xt),w.cancel(),b.cancel(),I(e)))}var i,r}function A(t){if(y.is(6)||(y.set(6),g("drag")),t.cancelable)if(a){w.translate(i+F(t)/(N&&e.is(wt)?5:1));var r=q(t)>200,o=N!==(N=D());(r||o)&&I(t),c=!0,g("dragging"),J(t)}else(function(e){return oe(F(e))>oe(F(e,!0))})(t)&&(a=function(e){var t=n.dragMinThreshold,i=f(t),r=i&&t.mouse||0,o=(i?t.touch:+t)||10;return oe(F(e))>(z(e)?o:r)}(t),J(t))}function M(i){y.is(6)&&(y.set(3),g("dragged")),a&&(function(i){var r=function(t){if(e.is(bt)||!N){var n=q(t);if(n&&n<200)return F(t)/n}return 0}(i),o=function(e){return L()+ue(e)*te(oe(e)*(n.flickPower||600),s?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(r),a=n.rewind&&n.rewindByDrag;E(!1),s?_.scroll(o,0,n.snap):e.is(_t)?_.go(k(ue(r))<0?a?"<":"-":a?">":"+"):e.is(wt)&&N&&a?_.go(D(!0)?">":"<"):_.go(_.toDest(o),!0),E(!0)}(i),J(i)),v(d,vt,A),v(d,yt,M),a=!1}function O(e){!u&&c&&J(e,!0)}function I(e){o=r,r=e,i=L()}function F(e,t){return W(e,t)-W(B(e),t)}function q(e){return V(e)-V(B(e))}function B(e){return r===e&&o||r}function W(e,t){return(z(e)?e.changedTouches[0]:e)["page"+S(t?"Y":"X")]}function z(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function j(e){u=e}return{mount:function(){m(x,vt,l,xt),m(x,yt,l,xt),m(x,"touchstart mousedown",R,xt),m(x,"click",O,{capture:!0}),m(x,"dragstart",J),p([pe,be],T)},disable:j,isDragging:function(){return a}}},Keyboard:function(e,t,n){var i,r,o=Te(e),s=o.on,a=o.bind,c=o.unbind,l=e.root,d=t.Direction.resolve;function h(){var e=n.keyboard;e&&(i="global"===e?window:l,a(i,St,g))}function f(){c(i,St)}function p(){var e=r;r=!0,u((function(){r=e}))}function g(t){if(!r){var n=Ct(t);n===d(Ae)?e.go("<"):n===d(Me)&&e.go(">")}}return{mount:function(){h(),s(be,f),s(be,h),s(me,p)},destroy:f,disable:function(e){r=e}}},LazyLoad:function(e,t,n){var i=Te(e),r=i.on,o=i.off,a=i.bind,u=i.emit,l="sequential"===n.lazyLoad,d=[ve,Ce],h=[];function f(){s(h),t.Slides.forEach((function(e){$(e.slide,"[data-splide-lazy], [data-splide-lazy-srcset]").forEach((function(t){var i=j(t,kt),r=j(t,Lt);if(i!==t.src||r!==t.srcset){var o=n.classes.spinner,s=t.parentElement,a=N(s,"."+o)||q("span",o,s);h.push([t,e,a]),t.src||W(t,"none")}}))})),l?v():(o(d),r(d,p),p())}function p(){(h=h.filter((function(t){var i=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,i)||g(t)}))).length||o(d)}function g(e){var t=e[0];S(e[1].slide,ht),a(t,"load error",c(m,e)),F(t,"src",j(t,kt)),F(t,"srcset",j(t,Lt)),I(t,kt),I(t,Lt)}function m(e,t){var n=e[0],i=e[1];Y(i.slide,ht),"error"!==t.type&&(G(e[2]),W(n,""),u(De,n,i),u(_e)),l&&v()}function v(){h.length&&g(h.shift())}return{mount:function(){n.lazyLoad&&(f(),r(we,f))},destroy:c(s,h),check:p}},Pagination:function(e,t,n){var i,r,o=Te(e),u=o.on,l=o.emit,d=o.bind,h=t.Slides,f=t.Elements,p=t.Controller,g=p.hasFocus,m=p.getIndex,v=p.go,y=t.Direction.resolve,w=f.pagination,b=[];function _(){i&&(G(w?a(i.children):i),Y(i,r),s(b),i=null),o.destroy()}function x(e){v(">"+e,!0)}function E(e,t){var n=b.length,i=Ct(t),r=C(),o=-1;i===y(Me,!1,r)?o=++e%n:i===y(Ae,!1,r)?o=(--e+n)%n:"Home"===i?o=0:"End"===i&&(o=n-1);var s=b[o];s&&(z(s.button),v(">"+o),J(t,!0))}function C(){return n.paginationDirection||n.direction}function k(e){return b[p.toPage(e)]}function L(){var e=k(m(!0)),t=k(m());if(e){var n=e.button;Y(n,ct),I(n,He),F(n,We,-1)}if(t){var r=t.button;S(r,ct),F(r,He,!0),F(r,We,"")}l("pagination:updated",{list:i,items:b},e,t)}return{items:b,mount:function t(){_(),u([be,we,Ne],t);var o=n.pagination;w&&W(w,o?"":"none"),o&&(u([me,Ee,Ce],L),function(){var t=e.length,o=n.classes,s=n.i18n,a=n.perPage,u=g()?p.getEnd()+1:re(t/a);S(i=w||q("ul",o.pagination,f.track.parentElement),r=at+"--"+C()),F(i,Be,"tablist"),F(i,Ue,s.select),F(i,Je,C()===Fe?"vertical":"");for(var l=0;l<u;l++){var m=q("li",null,i),v=q("button",{class:o.page,type:"button"},m),y=h.getIn(l).map((function(e){return e.slide.id})),_=!g()&&a>1?s.pageX:s.slideX;d(v,"click",c(x,l)),n.paginationKeyboard&&d(v,"keydown",c(E,l)),F(m,Be,"presentation"),F(v,Be,"tab"),F(v,ze,y.join(" ")),F(v,Ue,le(_,l+1)),F(v,We,-1),b.push({li:m,button:v,page:l})}}(),L(),l("pagination:mounted",{list:i,items:b},k(e.index)))},destroy:_,getAt:k,update:L}},Sync:function(e,t,n){var i=n.isNavigation,r=n.slideFocus,o=[];function a(){var t,n;e.splides.forEach((function(t){t.isParent||(l(e,t.splide),l(t.splide,e))})),i&&((n=(t=Te(e)).on)(ye,h),n("sk",f),n([pe,be],d),o.push(t),t.emit(ke,e.splides))}function u(){o.forEach((function(e){e.destroy()})),s(o)}function l(e,t){var n=Te(e);n.on(me,(function(e,n,i){t.go(t.is(bt)?i:e)})),o.push(n)}function d(){F(t.Elements.list,Je,n.direction===Fe?"vertical":"")}function h(t){e.go(t.index)}function f(e,t){x(Pt,Ct(t))&&(h(e),J(t))}return{setup:c(t.Media.set,{slideFocus:v(r)?i:r},!0),mount:a,destroy:u,remount:function(){u(),a()}}},Wheel:function(e,t,n){var i=Te(e).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,s=o<0,a=V(i),c=n.wheelMinThreshold||0,u=n.wheelSleep||0;oe(o)>c&&a-r>u&&(e.go(s?"<":">"),r=a),function(i){return!n.releaseWheel||e.state.is(4)||-1!==t.Controller.getAdjacent(i)}(s)&&J(i)}}return{mount:function(){n.wheel&&i(t.Elements.track,"wheel",o,xt)}}},Live:function(e,t,n){var i=Te(e).on,r=t.Elements.track,o=n.live&&!n.isNavigation,s=q("span","splide__sr"),a=Re(90,c(u,!1));function u(e){F(r,Ye,e),e?(k(r,s),a.start()):(G(s),a.cancel())}function l(e){o&&F(r,$e,e?"off":"polite")}return{mount:function(){o&&(l(!t.Autoplay.isPaused()),F(r,Ve,!0),s.textContent="…",i(Le,c(l,!0)),i(Pe,c(l,!1)),i([ve,Ce],c(u,!0)))},disable:l,destroy:function(){I(r,[$e,Ve,Ye]),G(s)}}}}),Nt={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:mt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Tt(e,t,n){var i=t.Slides;function r(){i.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){Te(e).on([pe,we],r)},start:function(e,t){i.style("transition","opacity "+n.speed+"ms "+n.easing),u(t)},cancel:l}}function Rt(e,t,n){var i,r=t.Move,o=t.Controller,s=t.Scroll,a=t.Elements.list,u=c(B,a,"transition");function l(){u(""),s.cancel()}return{mount:function(){Te(e).bind(a,"transitionend",(function(e){e.target===a&&i&&(l(),i())}))},start:function(t,a){var c=r.toPosition(t,!0),l=r.getPosition(),d=function(t){var i=n.rewindSpeed;if(e.is(wt)&&i){var r=o.getIndex(!0),s=o.getEnd();if(0===r&&t>=s||r>=s&&0===t)return i}return n.speed}(t);oe(c-l)>=1&&d>=1?n.useScroll?s.scroll(c,d,!1,a):(u("transform "+d+"ms "+n.easing),r.translate(c,!0),i=a):(r.jump(t),a())},cancel:l}}var At=function(){function e(t,n){var i;this.event=Te(),this.Components={},this.state=(i=1,{set:function(e){i=e},is:function(e){return x(b(e),i)}}),this.splides=[],this._o={},this._E={};var r=m(t)?K(document,t):t;ee(r,r+" is invalid."),this.root=r,n=M({label:j(r,Ue)||"",labelledby:j(r,Ge)||""},Nt,e.defaults,n||{});try{M(n,JSON.parse(j(r,"data-splide")))}catch(e){ee(!1,"Invalid JSON")}this._o=Object.create(M({},n))}var t,n,i=e.prototype;return i.mount=function(e,t){var n=this,i=this.state,r=this.Components;return ee(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=t||this._T||(this.is(_t)?Tt:Rt),this._E=e||this._E,R(A({},Dt,this._E,{Transition:this._T}),(function(e,t){var i=e(n,r,n._o);r[t]=i,i.setup&&i.setup()})),R(r,(function(e){e.mount&&e.mount()})),this.emit(pe),S(this.root,"is-initialized"),i.set(3),this.emit(ge),this},i.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},i.go=function(e){return this._C.Controller.go(e),this},i.on=function(e,t){return this.event.on(e,t),this},i.off=function(e){return this.event.off(e),this},i.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(a(arguments,1))),this},i.add=function(e,t){return this._C.Slides.add(e,t),this},i.remove=function(e){return this._C.Slides.remove(e),this},i.is=function(e){return this._o.type===e},i.refresh=function(){return this.emit(we),this},i.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?Te(this).on(ge,this.destroy.bind(this,e)):(R(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Se),t.destroy(),e&&s(this.splides),n.set(7)),this},t=e,(n=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();At.defaults={},At.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};class Mt{constructor(e,t){this.emptyGlowImageTag="empty_glow_image",this.imagesPath=e,this.audioPath=t,this.currentPage=0,this.splideHandle=new At(".splide",{fixedHeight:window.innerHeight-20}).mount()}initializeBook(t){this.currentBookType=t.bookType,this.numberOfPages=t.pages.length,this.currentBookType===e.CuriousReader?this.initializeCuriousReaderBook(t):this.currentBookType===e.GDL&&this.initializeGDLBook(t)}initializeCuriousReaderBook(e){for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");for(let i=0;i<e.pages[t].visualElements.length;i++){let r=e.pages[t].visualElements[i];if("text"==r.type){let e=r,t=document.createElement("div");t.classList.add("cr-text"),t.style.position="absolute",t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.style.top=e.positionY+"%",t.style.left=e.positionX+"%",t.style.width=e.width+"%",t.style.height=e.height+"%",t.innerHTML=e.textContentAsHTML,n.appendChild(t)}else if("image"==r.type){let e=r;if(e.imageSource===this.emptyGlowImageTag)continue;let t=document.createElement("div");t.classList.add("cr-image"),t.style.position="absolute",t.style.top=e.positionY+"%",t.style.left=e.positionX+"%",t.style.width=e.width+"%",t.style.height=e.height+"%";let i=document.createElement("img");i.src=this.imagesPath+e.imageSource.replace("images/",""),i.style.width="100%",i.style.height="100%",t.appendChild(i),n.appendChild(t)}this.splideHandle.add(n)}}}initializeGDLBook(e){for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<e.pages[t].visualElements.length;n++){let r=e.pages[t].visualElements[n];if("text"==r.type){let e=r,t=document.createElement("div");t.style.width="60%",t.classList.add("gdl-text"),t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.innerHTML=e.textContentAsHTML,i.appendChild(t)}else if("image"==r.type){let e=r,t=document.createElement("div");t.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+e.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",t.appendChild(n),i.appendChild(t)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(e){this.transitioningToPage=!0}}n(913);class Ot extends Error{constructor(e,t){super(((e,...t)=>{let n=e;return t.length>0&&(n+=` :: ${JSON.stringify(t)}`),n})(e,t)),this.name=e,this.details=t}}n(80);const It=e=>e&&"object"==typeof e?e:{handle:e};class Ft{constructor(e,t,n="GET"){this.handler=It(t),this.match=e,this.method=n}setCatchHandler(e){this.catchHandler=It(e)}}class qt extends Ft{constructor(e,t,n){super((({url:t})=>{const n=e.exec(t.href);if(n&&(t.origin===location.origin||0===n.index))return n.slice(1)}),t,n)}}class Bt{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,n=this.handleRequest({request:t,event:e});n&&e.respondWith(n)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data,n=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const n=new Request(...t);return this.handleRequest({request:n,event:e})})));e.waitUntil(n),e.ports&&e.ports[0]&&n.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){const n=new URL(e.url,location.href);if(!n.protocol.startsWith("http"))return;const i=n.origin===location.origin,{params:r,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:i,url:n});let s=o&&o.handler;const a=e.method;if(!s&&this._defaultHandlerMap.has(a)&&(s=this._defaultHandlerMap.get(a)),!s)return;let c;try{c=s.handle({url:n,request:e,event:t,params:r})}catch(e){c=Promise.reject(e)}const u=o&&o.catchHandler;return c instanceof Promise&&(this._catchHandler||u)&&(c=c.catch((async i=>{if(u)try{return await u.handle({url:n,request:e,event:t,params:r})}catch(e){e instanceof Error&&(i=e)}if(this._catchHandler)return this._catchHandler.handle({url:n,request:e,event:t});throw i}))),c}findMatchingRoute({url:e,sameOrigin:t,request:n,event:i}){const r=this._routes.get(n.method)||[];for(const o of r){let r;const s=o.match({url:e,sameOrigin:t,request:n,event:i});if(s)return r=s,(Array.isArray(r)&&0===r.length||s.constructor===Object&&0===Object.keys(s).length||"boolean"==typeof s)&&(r=void 0),{route:o,params:r}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,It(e))}setCatchHandler(e){this._catchHandler=It(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new Ot("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new Ot("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let Wt;const zt={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},jt=e=>{return e||(t=zt.runtime,[zt.prefix,t,zt.suffix].filter((e=>e&&e.length>0)).join("-"));var t};function Ht(e,t){const n=new URL(e);for(const e of t)n.searchParams.delete(e);return n.href}class Ut{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}const Gt=new Set;function Xt(e){return"string"==typeof e?new Request(e):e}n(873);class Jt{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new Ut,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let n=Xt(e);if("navigate"===n.mode&&t instanceof FetchEvent&&t.preloadResponse){const e=await t.preloadResponse;if(e)return e}const i=this.hasCallback("fetchDidFail")?n.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))n=await e({request:n.clone(),event:t})}catch(e){if(e instanceof Error)throw new Ot("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const r=n.clone();try{let e;e=await fetch(n,"navigate"===n.mode?void 0:this._strategy.fetchOptions);for(const n of this.iterateCallbacks("fetchDidSucceed"))e=await n({event:t,request:r,response:e});return e}catch(e){throw i&&await this.runCallbacks("fetchDidFail",{error:e,event:t,originalRequest:i.clone(),request:r.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),n=t.clone();return this.waitUntil(this.cachePut(e,n)),t}async cacheMatch(e){const t=Xt(e);let n;const{cacheName:i,matchOptions:r}=this._strategy,o=await this.getCacheKey(t,"read"),s=Object.assign(Object.assign({},r),{cacheName:i});n=await caches.match(o,s);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))n=await e({cacheName:i,matchOptions:r,cachedResponse:n,request:o,event:this.event})||void 0;return n}async cachePut(e,t){const n=Xt(e);await(0,new Promise((e=>setTimeout(e,0))));const i=await this.getCacheKey(n,"write");if(!t)throw new Ot("cache-put-with-no-response",{url:(r=i.url,new URL(String(r),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var r;const o=await this._ensureResponseSafeToCache(t);if(!o)return!1;const{cacheName:s,matchOptions:a}=this._strategy,c=await self.caches.open(s),u=this.hasCallback("cacheDidUpdate"),l=u?await async function(e,t,n,i){const r=Ht(t.url,n);if(t.url===r)return e.match(t,i);const o=Object.assign(Object.assign({},i),{ignoreSearch:!0}),s=await e.keys(t,o);for(const t of s)if(r===Ht(t.url,n))return e.match(t,i)}(c,i.clone(),["__WB_REVISION__"],a):null;try{await c.put(i,u?o.clone():o)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await async function(){for(const e of Gt)await e()}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:s,oldResponse:l,newResponse:o.clone(),request:i,event:this.event});return!0}async getCacheKey(e,t){const n=`${e.url} | ${t}`;if(!this._cacheKeys[n]){let i=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))i=Xt(await e({mode:t,request:i,event:this.event,params:this.params}));this._cacheKeys[n]=i}return this._cacheKeys[n]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const n of this.iterateCallbacks(e))await n(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const n=this._pluginStateMap.get(t),i=i=>{const r=Object.assign(Object.assign({},i),{state:n});return t[e](r)};yield i}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,n=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,n=!0,!t)break;return n||t&&200!==t.status&&(t=void 0),t}}class Kt extends class{constructor(e={}){this.cacheName=jt(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,n="string"==typeof e.request?new Request(e.request):e.request,i="params"in e?e.params:void 0,r=new Jt(this,{event:t,request:n,params:i}),o=this._getResponse(r,n,t);return[o,this._awaitComplete(o,r,n,t)]}async _getResponse(e,t,n){let i;await e.runCallbacks("handlerWillStart",{event:n,request:t});try{if(i=await this._handle(t,e),!i||"error"===i.type)throw new Ot("no-response",{url:t.url})}catch(r){if(r instanceof Error)for(const o of e.iterateCallbacks("handlerDidError"))if(i=await o({error:r,event:n,request:t}),i)break;if(!i)throw r}for(const r of e.iterateCallbacks("handlerWillRespond"))i=await r({event:n,request:t,response:i});return i}async _awaitComplete(e,t,n,i){let r,o;try{r=await e}catch(o){}try{await t.runCallbacks("handlerDidRespond",{event:i,request:n,response:r}),await t.doneWaiting()}catch(e){e instanceof Error&&(o=e)}if(await t.runCallbacks("handlerDidComplete",{event:i,request:n,response:r,error:o}),t.destroy(),o)throw o}}{async _handle(e,t){let n,i=await t.cacheMatch(e);if(i);else try{i=await t.fetchAndCachePut(e)}catch(e){e instanceof Error&&(n=e)}if(!i)throw new Ot("no-response",{url:e.url,error:n});return i}}function $t(e){e.then((()=>{}))}let Yt,Vt;const Qt=new WeakMap,Zt=new WeakMap,en=new WeakMap,tn=new WeakMap,nn=new WeakMap;let rn={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return Zt.get(e);if("objectStoreNames"===t)return e.objectStoreNames||en.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return sn(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function on(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(Vt||(Vt=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(an(this),e),sn(Qt.get(this))}:function(...e){return sn(t.apply(an(this),e))}:function(e,...n){const i=t.call(an(this),e,...n);return en.set(i,e.sort?e.sort():[e]),sn(i)}:(e instanceof IDBTransaction&&function(e){if(Zt.has(e))return;const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("complete",r),e.removeEventListener("error",o),e.removeEventListener("abort",o)},r=()=>{t(),i()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",r),e.addEventListener("error",o),e.addEventListener("abort",o)}));Zt.set(e,t)}(e),n=e,(Yt||(Yt=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,rn):e);var t,n}function sn(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const i=()=>{e.removeEventListener("success",r),e.removeEventListener("error",o)},r=()=>{t(sn(e.result)),i()},o=()=>{n(e.error),i()};e.addEventListener("success",r),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&Qt.set(t,e)})).catch((()=>{})),nn.set(t,e),t}(e);if(tn.has(e))return tn.get(e);const t=on(e);return t!==e&&(tn.set(e,t),nn.set(t,e)),t}const an=e=>nn.get(e),cn=["get","getKey","getAll","getAllKeys","count"],un=["put","add","delete","clear"],ln=new Map;function dn(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(ln.get(t))return ln.get(t);const n=t.replace(/FromIndex$/,""),i=t!==n,r=un.includes(n);if(!(n in(i?IDBIndex:IDBObjectStore).prototype)||!r&&!cn.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,r?"readwrite":"readonly");let s=o.store;return i&&(s=s.index(t.shift())),(await Promise.all([s[n](...t),r&&o.done]))[0]};return ln.set(t,o),o}var hn;hn=rn,rn={...hn,get:(e,t,n)=>dn(e,t)||hn.get(e,t,n),has:(e,t)=>!!dn(e,t)||hn.has(e,t)},n(550);const fn="cache-entries",pn=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class gn{constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore(fn,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&function(e,{blocked:t}={}){const n=indexedDB.deleteDatabase(e);t&&n.addEventListener("blocked",(e=>t(e.oldVersion,e))),sn(n).then((()=>{}))}(this._cacheName)}async setTimestamp(e,t){const n={url:e=pn(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)},i=(await this.getDb()).transaction(fn,"readwrite",{durability:"relaxed"});await i.store.put(n),await i.done}async getTimestamp(e){const t=await this.getDb(),n=await t.get(fn,this._getId(e));return null==n?void 0:n.timestamp}async expireEntries(e,t){const n=await this.getDb();let i=await n.transaction(fn).store.index("timestamp").openCursor(null,"prev");const r=[];let o=0;for(;i;){const n=i.value;n.cacheName===this._cacheName&&(e&&n.timestamp<e||t&&o>=t?r.push(i.value):o++),i=await i.continue()}const s=[];for(const e of r)await n.delete(fn,e.id),s.push(e.url);return s}_getId(e){return this._cacheName+"|"+pn(e)}async getDb(){return this._db||(this._db=await function(e,t,{blocked:n,upgrade:i,blocking:r,terminated:o}={}){const s=indexedDB.open(e,t),a=sn(s);return i&&s.addEventListener("upgradeneeded",(e=>{i(sn(s.result),e.oldVersion,e.newVersion,sn(s.transaction),e)})),n&&s.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),a.then((e=>{o&&e.addEventListener("close",(()=>o())),r&&e.addEventListener("versionchange",(e=>r(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),a}("workbox-expiration",1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class mn{constructor(e,t={}){this._isRunning=!1,this._rerunRequested=!1,this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._matchOptions=t.matchOptions,this._cacheName=e,this._timestampModel=new gn(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),n=await self.caches.open(this._cacheName);for(const e of t)await n.delete(e,this._matchOptions);this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,$t(this.expireEntries()))}async updateTimestamp(e){await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),n=Date.now()-1e3*this._maxAgeSeconds;return void 0===t||t<n}return!1}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}class vn{constructor(e={}){var t;this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:n,cachedResponse:i})=>{if(!i)return null;const r=this._isResponseDateFresh(i),o=this._getCacheExpiration(n);$t(o.expireEntries());const s=o.updateTimestamp(t.url);if(e)try{e.waitUntil(s)}catch(e){}return r?i:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{const n=this._getCacheExpiration(e);await n.updateTimestamp(t.url),await n.expireEntries()},this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(t=()=>this.deleteCacheAndMetadata(),Gt.add(t))}_getCacheExpiration(e){if(e===jt())throw new Ot("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new mn(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);return null===t||t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),n=new Date(t).getTime();return isNaN(n)?null:n}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}var yn=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};const{clients:wn,addEventListener:bn,skipWaiting:_n,registration:xn}=self;class En{constructor(){this.cacheNameTag="CRCache",this.version="v0.0.1",this.imagesCacheName=`${this.cacheNameTag}-${this.version}-images`,this.fontsCacheName=`${this.cacheNameTag}-${this.version}-fonts`,this.stylesScriptsCacheName=`${this.cacheNameTag}-${this.version}-stylesScripts`,this.documentCacheName=`${this.cacheNameTag}-${this.version}-document`,this.stylesScriptsExpirationPlugin=new vn({maxEntries:20,maxAgeSeconds:1296e3,purgeOnQuotaError:!0}),this.fontsExpirationPlugin=new vn({maxEntries:5,maxAgeSeconds:15552e3}),this.imagesExpirationPlugin=new vn({maxEntries:150,maxAgeSeconds:5184e3}),this.documentExpirationPlugin=new vn({maxEntries:50,maxAgeSeconds:5184e3})}InitializeAndRegister(){"serviceWorker"in navigator&&window.addEventListener("load",(()=>{navigator.serviceWorker.register("/sw.js").then((e=>{console.log("ServiceWorker registration successful with scope: ",e.scope)}),(e=>{console.log("ServiceWorker registration failed: ",e)})),this.registerCacheFirstRouteUsing("image",this.imagesCacheName,this.imagesExpirationPlugin),this.registerCacheFirstRouteUsing("font",this.fontsCacheName,this.fontsExpirationPlugin),this.registerCacheFirstRouteUsing("script",this.stylesScriptsCacheName,this.stylesScriptsExpirationPlugin),this.registerCacheFirstRouteUsing("style",this.stylesScriptsCacheName,this.stylesScriptsExpirationPlugin),this.registerCacheFirstRouteUsing("document",this.documentCacheName,this.documentExpirationPlugin),navigator.serviceWorker.addEventListener("install",(e=>yn(this,void 0,void 0,(function*(){console.log("ServiceWorker installed!"),e.waitUntil(Promise.all([caches.delete(this.imagesCacheName),caches.delete(this.fontsCacheName),caches.delete(this.stylesScriptsCacheName),caches.delete(this.documentCacheName)])),_n()})))),navigator.serviceWorker.addEventListener("activate",(e=>yn(this,void 0,void 0,(function*(){console.log("ServiceWorker activated!"),e.waitUntil(self.clients.claim())})))),navigator.serviceWorker.addEventListener("fetch",(e=>{console.log("ServiceWorker fetch: ",e),e.respondWith(caches.match(e.request).then((function(t){return t||fetch(e.request)})))})),self.clients.matchAll().then((e=>{e.forEach((e=>{e.postMessage({msg:"Loading",data:100})}))}))}))}handleServiceWorkerMessage(e){"Loading"==e.data.msg&&this.handleLoadingMessage(e.data)}handleLoadingMessage(e){}registerCacheFirstRouteUsing(e,t,n){!function(e,t,n){let i;i=e instanceof RegExp?new qt(e,t,n):new Ft(e,t,n),(Wt||(Wt=new Bt,Wt.addFetchListener(),Wt.addCacheListener()),Wt).registerRoute(i)}((({request:t})=>t.destination===e),new Kt({cacheName:t,plugins:[n]}))}}var Cn=function(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))};new class{constructor(e,t,n){if(this.cachedLanguages=new Map,this.lang="english",this.isCached="is_cached",this.contentFilePath=e,this.imagesPath=t,this.audioPath=n,this.contentParser=new i(e),this.playBackEngine=new Mt(t,n),this.serviceWorker=new En,this.serviceWorker.InitializeAndRegister(),null==localStorage.getItem(this.isCached))this.cachedLanguages=new Map;else{let e=localStorage.getItem(this.isCached);this.cachedLanguages=new Map(JSON.parse(e))}}initialize(){return Cn(this,void 0,void 0,(function*(){let e=yield this.contentParser.parseBook();console.log("Dev App initialized!"),console.log(e),this.enforceLandscapeMode(),window.addEventListener("load",(()=>Cn(this,void 0,void 0,(function*(){"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",(e=>{var t;"Loading"==e.data.msg&&100==e.data.data&&(null===(t=this.cachedLanguages)||void 0===t||t.set(this.lang,"true"),localStorage.setItem(this.isCached,JSON.stringify(this.cachedLanguages)),this.readLanguageDataFromCacheAndNotifyAndroidApp())}))})))),this.playBackEngine.initializeBook(e)}))}readLanguageDataFromCacheAndNotifyAndroidApp(){window.Android&&window.Android.receiveData(cachedLanguages.has(lang)?cachedLanguages.get(lang):null)}enforceLandscapeMode(){screen.orientation&&screen.orientation.lock?screen.orientation.lock("landscape").then((()=>{console.log("Screen orientation locked to landscape!")})).catch((e=>{console.error("Failed to lock screen orientation: ",e)})):console.warn("Screen orientation lock not supported! Interface may not work as expected on mobile devices!")}}("/BookContent/TalkingBagEn/content/content.json","/BookContent/TalkingBagEn/content/images/","/BookContent/TalkingBagEn/content/audio/").initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,