/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var t;!function(t){t.CuriousReader="CuriousReader",t.GDL="GDL",t.Unknown="Unknown"}(t||(t={}));var e=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function a(t){try{u(i.next(t))}catch(t){r(t)}}function s(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}))};class n{constructor(t){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=t}parseBook(){return e(this,void 0,void 0,(function*(){return new Promise(((t,e)=>{this.parseContentJSONFile().then((e=>{this.contentJSON=e,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),t(n)})).catch((t=>{e(t)}))}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?t.CuriousReader:void 0!==this.contentJSON.chapters?t.GDL:t.Unknown}parsePages(e){let n=[];if(e.bookType===t.CuriousReader){let t=this.contentJSON.presentation.slides,e=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<t.length;i++){let o=t[i],r={visualElements:[],backgroundColor:e};r.visualElements=this.parsePageCR(o),n.push(r)}}else if(e.bookType===t.GDL){let t=this.contentJSON.chapters,e="#FCFCF2";for(let i=0;i<t.length;i++){let o=t[i],r={visualElements:[],backgroundColor:e};r.visualElements=this.parsePageGDL(o),n.push(r)}}else console.log("Unknown book type!");return n}parsePageCR(t){let e=[],n=t.elements;for(let t=0;t<n.length;t++){let i=n[t].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[t]);e.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[t]);e.push(i)}else if(i.includes("Audio")){let i=this.parseAudioElementCR(n[t]);e.push(i)}}return e}parsePageGDL(t){let e=[],n=t.params.content;for(let t=0;t<n.length;t++){let i=n[t].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[t].content.params);e.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[t].content.params);e.push(i)}}return e}parseTextElementCR(t){return{type:"text",positionX:t.x,positionY:t.y,width:t.width,height:t.height,textContentAsHTML:t.action.params.text}}parseTextElementGDL(t){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:t.text}}parseImageElementCR(t){let e="";return e=void 0===t.action.params.file?this.emptyGlowImageTag:t.action.params.file.path,{type:"image",positionX:t.x,positionY:t.y,width:t.width,height:t.height,imageSource:e}}parseImageElementGDL(t){return{type:"image",positionX:NaN,positionY:NaN,width:t.width,height:t.height,imageSource:t.file.path}}parseAudioElementCR(t){let e={timestamps:[]},n=t.action.params.timeStampForEachText;for(let i=0;i<n.length;i++){let o=i,r=n[i],a={domID:t.action.subContentId+"_"+o.toString(),word:r.text,startTimestamp:r.startDuration,endTimestamp:r.endDuration,audioSrc:r.wordfile[0].path};e.timestamps.push(a)}return{domID:t.action.subContentId,type:"audio",positionX:t.x,positionY:t.y,width:t.width,height:t.height,audioSrc:t.action.params.files[0].path,audioTimestamps:e,styles:""}}parseContentJSONFile(){return e(this,void 0,void 0,(function*(){return new Promise(((t,e)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let e=n.response;delete e.l10n,delete e.override,t(e)}else e(n.response)},n.send()}))}))}}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var o="(prefers-reduced-motion: reduce)";function r(t){t.length=0}function a(t,e,n){return Array.prototype.slice.call(t,e,n)}function s(t){return t.bind.apply(t,[null].concat(a(arguments,1)))}var u=setTimeout,c=function(){};function l(t){return requestAnimationFrame(t)}function d(t,e){return typeof e===t}function f(t){return!v(t)&&d("object",t)}var h=Array.isArray,p=s(d,"function"),g=s(d,"string"),m=s(d,"undefined");function v(t){return null===t}function y(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function w(t){return h(t)?t:[t]}function b(t,e){w(t).forEach(e)}function E(t,e){return t.indexOf(e)>-1}function S(t,e){return t.push.apply(t,w(e)),t}function x(t,e,n){t&&b(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function P(t,e){x(t,g(e)?e.split(" "):e,!0)}function C(t,e){b(e,t.appendChild.bind(t))}function k(t,e){b(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function L(t,e){return y(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function T(t,e){var n=t?a(t.children):[];return e?n.filter((function(t){return L(t,e)})):n}function A(t,e){return e?T(t,e)[0]:t.firstElementChild}var I=Object.keys;function D(t,e,n){return t&&(n?I(t).reverse():I(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function F(t){return a(arguments,1).forEach((function(e){D(e,(function(n,i){t[i]=e[i]}))})),t}function N(t){return a(arguments,1).forEach((function(e){D(e,(function(e,n){h(e)?t[n]=e.slice():f(e)?t[n]=N({},f(t[n])?t[n]:{},e):t[n]=e}))})),t}function z(t,e){b(e||I(t),(function(e){delete t[e]}))}function M(t,e){b(t,(function(t){b(e,(function(e){t&&t.removeAttribute(e)}))}))}function O(t,e,n){f(e)?D(e,(function(e,n){O(t,n,e)})):b(t,(function(t){v(n)||""===n?M(t,e):t.setAttribute(e,String(n))}))}function R(t,e,n){var i=document.createElement(t);return e&&(g(e)?P(i,e):O(i,e)),n&&C(n,i),i}function B(t,e,n){if(m(n))return getComputedStyle(t)[e];v(n)||(t.style[e]=""+n)}function j(t,e){B(t,"display",e)}function W(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function G(t,e){return t.getAttribute(e)}function H(t,e){return t&&t.classList.contains(e)}function X(t){return t.getBoundingClientRect()}function U(t){b(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function Y(t){return A((new DOMParser).parseFromString(t,"text/html").body)}function J(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function q(t,e){return t&&t.querySelector(e)}function K(t,e){return e?a(t.querySelectorAll(e)):[]}function Q(t,e){x(t,e,!1)}function V(t){return t.timeStamp}function $(t){return g(t)?t:t?t+"px":""}var Z="splide";function tt(t,e){if(!t)throw new Error("[splide] "+(e||""))}var et=Math.min,nt=Math.max,it=Math.floor,ot=Math.ceil,rt=Math.abs;function at(t,e,n){return rt(t-e)<n}function st(t,e,n,i){var o=et(e,n),r=nt(e,n);return i?o<t&&t<r:o<=t&&t<=r}function ut(t,e,n){var i=et(e,n),o=nt(e,n);return et(nt(i,t),o)}function ct(t){return+(t>0)-+(t<0)}function lt(t,e){return b(e,(function(e){t=t.replace("%s",""+e)})),t}function dt(t){return t<10?"0"+t:""+t}var ft={};function ht(){var t=[];function e(t,e,n){b(t,(function(t){t&&b(e,(function(e){e.split(" ").forEach((function(e){var i=e.split(".");n(t,i[0],i[1])}))}))}))}return{bind:function(n,i,o,r){e(n,i,(function(e,n,i){var a="addEventListener"in e,s=a?e.removeEventListener.bind(e,n,o,r):e.removeListener.bind(e,o);a?e.addEventListener(n,o,r):e.addListener(o),t.push([e,n,i,o,s])}))},unbind:function(n,i,o){e(n,i,(function(e,n,i){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==i||o&&t[3]!==o)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(e,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(i),i},destroy:function(){t.forEach((function(t){t[4]()})),r(t)}}}var pt="mounted",gt="ready",mt="move",vt="moved",yt="click",wt="refresh",bt="updated",Et="resize",St="resized",xt="scroll",Pt="scrolled",Ct="destroy",kt="navigation:mounted",Lt="autoplay:play",Tt="autoplay:pause",_t="lazyload:loaded",At="ei";function It(t){var e=t?t.event.bus:document.createDocumentFragment(),n=ht();return t&&t.event.on(Ct,n.destroy),F(n,{bus:e,on:function(t,i){n.bind(e,w(t).join(" "),(function(t){i.apply(i,h(t.detail)?t.detail:[])}))},off:s(n.unbind,e),emit:function(t){n.dispatch(e,t,a(arguments,1))}})}function Dt(t,e,n,i){var o,r,a=Date.now,s=0,u=!0,c=0;function d(){if(!u){if(s=t?et((a()-o)/t,1):1,n&&n(s),s>=1&&(e(),o=a(),i&&++c>=i))return f();r=l(d)}}function f(){u=!0}function h(){r&&cancelAnimationFrame(r),s=0,r=0,u=!0}return{start:function(e){e||h(),o=a()-(e?s*t:0),u=!1,r=l(d)},rewind:function(){o=a(),s=0,n&&n(s)},pause:f,cancel:h,set:function(e){t=e},isPaused:function(){return u}}}var Ft="ArrowLeft",Nt="ArrowRight",zt="ArrowUp",Mt="ArrowDown",Ot="ttb",Rt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[zt,Nt],ArrowRight:[Mt,Ft]};var Bt="role",jt="tabindex",Wt="aria-controls",Gt="aria-current",Ht="aria-selected",Xt="aria-label",Ut="aria-labelledby",Yt="aria-hidden",Jt="aria-orientation",qt="aria-roledescription",Kt="aria-live",Qt="aria-busy",Vt="aria-atomic",$t=[Bt,jt,"disabled",Wt,Gt,Xt,Ut,Yt,Jt,qt],Zt=Z,te="splide__track",ee="splide__slide",ne=ee+"--clone",ie="splide__arrows",oe="splide__arrow",re=oe+"--prev",ae=oe+"--next",se="splide__pagination",ue="is-active",ce="is-prev",le="is-next",de="is-visible",fe="is-loading",he="is-focus-in",pe="is-overflow",ge=[ue,de,ce,le,fe,he,pe],me={slide:ee,clone:ne,arrows:ie,arrow:oe,prev:re,next:ae,pagination:se,page:"splide__pagination__page",spinner:"splide__spinner"},ve="touchmove mousemove",ye="touchend touchcancel mouseup click",we="slide",be="loop",Ee="fade";var Se={passive:!1,capture:!0},xe={Spacebar:" ",Right:Nt,Left:Ft,Up:zt,Down:Mt};function Pe(t){return t=g(t)?t:t.key,xe[t]||t}var Ce="keydown",ke="data-splide-lazy",Le="data-splide-lazy-srcset",Te=[" ","Enter"],_e=Object.freeze({__proto__:null,Media:function(t,e,n){var i=t.state,r=n.breakpoints||{},a=n.reducedMotion||{},s=ht(),u=[];function c(t){t&&s.destroy()}function l(t,e){var n=matchMedia(e);s.bind(n,"change",d),u.push([t,n])}function d(){var e=i.is(7),o=n.direction,r=u.reduce((function(t,e){return N(t,e[1].matches?e[0]:{})}),{});z(n),f(r),n.destroy?t.destroy("completely"===n.destroy):e?(c(!0),t.mount()):o!==n.direction&&t.refresh()}function f(e,o,r){N(n,e),o&&N(Object.getPrototypeOf(n),e),!r&&i.is(1)||t.emit(bt,n)}return{setup:function(){var t="min"===n.mediaQuery;I(r).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){l(r[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),l(a,o),d()},destroy:c,reduce:function(t){matchMedia(o).matches&&(t?N(n,a):z(n,I(a)))},set:f}},Direction:function(t,e,n){return{resolve:function(t,e,i){var o="rtl"!==(i=i||n.direction)||e?i===Ot?0:-1:1;return Rt[t]&&Rt[t][o]||t.replace(/width|left|right/i,(function(t,e){var n=Rt[t.toLowerCase()][o]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var i,o,a,s=It(t),u=s.on,c=s.bind,l=t.root,d=n.i18n,f={},h=[],g=[],m=[];function v(){var t,e,r;i=b("."+te),o=A(i,".splide__list"),tt(i&&o,"A track/list element is missing."),S(h,T(o,".splide__slide:not(."+ne+")")),D({arrows:ie,pagination:se,prev:re,next:ae,bar:"splide__progress__bar",toggle:"splide__toggle"},(function(t,e){f[e]=b("."+t)})),F(f,{root:l,track:i,list:o,slides:h}),e=l.id||""+(t=Z)+dt(ft[t]=(ft[t]||0)+1),r=n.role,l.id=e,i.id=i.id||e+"-track",o.id=o.id||e+"-list",!G(l,Bt)&&"SECTION"!==l.tagName&&r&&O(l,Bt,r),O(l,qt,d.carousel),O(o,Bt,"presentation"),w()}function y(t){var e=$t.concat("style");r(h),Q(l,g),Q(i,m),M([i,o],e),M(l,t?e:["style",qt])}function w(){Q(l,g),Q(i,m),g=E(Zt),m=E(te),P(l,g),P(i,m),O(l,Xt,n.label),O(l,Ut,n.labelledby)}function b(t){var e=q(l,t);return e&&function(t,e){if(p(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!L(n,e);)n=n.parentElement;return n}(e,".splide")===l?e:void 0}function E(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===Zt&&ue]}return F(f,{setup:v,mount:function(){u(wt,y),u(wt,v),u(bt,w),c(document,"touchstart mousedown keydown",(function(t){a="keydown"===t.type}),{capture:!0}),c(l,"focusin",(function(){x(l,he,!!a)}))},destroy:y})},Slides:function(t,e,n){var i=It(t),o=i.on,a=i.emit,u=i.bind,c=e.Elements,l=c.slides,d=c.list,f=[];function h(){l.forEach((function(t,e){v(t,e,-1)}))}function m(){T((function(t){t.destroy()})),r(f)}function v(e,n,i){var o=function(t,e,n,i){var o,r=It(t),a=r.on,u=r.emit,c=r.bind,l=t.Components,d=t.root,f=t.options,h=f.isNavigation,p=f.updateOnMove,g=f.i18n,m=f.pagination,v=f.slideFocus,y=l.Direction.resolve,w=G(i,"style"),b=G(i,Xt),E=n>-1,S=A(i,".splide__slide__container");function P(){var o=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");O(i,Xt,lt(g.slideX,(E?n:e)+1)),O(i,Wt,o),O(i,Bt,v?"button":""),v&&M(i,qt)}function C(){o||k()}function k(){if(!o){var n=t.index;(r=L())!==H(i,ue)&&(x(i,ue,r),O(i,Gt,h&&r||""),u(r?"active":"inactive",T)),function(){var e=function(){if(t.is(Ee))return L();var e=X(l.Elements.track),n=X(i),o=y("left",!0),r=y("right",!0);return it(e[o])<=ot(n[o])&&it(n[r])<=ot(e[r])}(),n=!e&&(!L()||E);if(t.state.is([4,5])||O(i,Yt,n||""),O(K(i,f.focusableNodes||""),jt,n?-1:""),v&&O(i,jt,n?-1:0),e!==H(i,de)&&(x(i,de,e),u(e?"visible":"hidden",T)),!e&&document.activeElement===i){var o=l.Slides.getAt(t.index);o&&W(o.slide)}}(),x(i,ce,e===n-1),x(i,le,e===n+1)}var r}function L(){var i=t.index;return i===e||f.cloneStatus&&i===n}var T={index:e,slideIndex:n,slide:i,container:S,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+dt(e+1),O(i,Bt,m?"tabpanel":"group"),O(i,qt,g.slide),O(i,Xt,b||lt(g.slideLabel,[e+1,t.length]))),c(i,"click",s(u,yt,T)),c(i,"keydown",s(u,"sk",T)),a([vt,"sh",Pt],k),a(kt,P),p&&a(mt,C)},destroy:function(){o=!0,r.destroy(),Q(i,ge),M(i,$t),O(i,"style",w),O(i,Xt,b||"")},update:k,style:function(t,e,n){B(n&&S||i,t,e)},isWithin:function(n,i){var o=rt(n-e);return E||!f.rewind&&!t.is(be)||(o=et(o,t.length-o)),o<=i}};return T}(t,n,i,e);o.mount(),f.push(o),f.sort((function(t,e){return t.index-e.index}))}function S(t){return t?_((function(t){return!t.isClone})):f}function T(t,e){S(e).forEach(t)}function _(t){return f.filter(p(t)?t:function(e){return g(t)?L(e.slide,t):E(w(t),e.index)})}return{mount:function(){h(),o(wt,m),o(wt,h)},destroy:m,update:function(){T((function(t){t.update()}))},register:v,get:S,getIn:function(t){var i=e.Controller,o=i.toIndex(t),r=i.hasFocus()?1:n.perPage;return _((function(t){return st(t.index,o,o+r-1)}))},getAt:function(t){return _(t)[0]},add:function(t,e){b(t,(function(t){if(g(t)&&(t=Y(t)),y(t)){var i=l[e];i?k(t,i):C(d,t),P(t,n.classes.slide),o=t,r=s(a,Et),c=K(o,"img"),(f=c.length)?c.forEach((function(t){u(t,"load error",(function(){--f||r()}))})):r()}var o,r,c,f})),a(wt)},remove:function(t){U(_(t).map((function(t){return t.slide}))),a(wt)},forEach:T,filter:_,style:function(t,e,n){T((function(i){i.style(t,e,n)}))},getLength:function(t){return t?l.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(t,e,n){var i,o,r,a=It(t),u=a.on,c=a.bind,l=a.emit,d=e.Slides,h=e.Direction.resolve,p=e.Elements,g=p.root,m=p.track,v=p.list,y=d.getAt,w=d.style;function b(){i=n.direction===Ot,B(g,"maxWidth",$(n.width)),B(m,h("paddingLeft"),S(!1)),B(m,h("paddingRight"),S(!0)),E(!0)}function E(t){var e,a=X(g);(t||o.width!==a.width||o.height!==a.height)&&(B(m,"height",(e="",i&&(tt(e=P(),"height or heightRatio is missing."),e="calc("+e+" - "+S(!1)+" - "+S(!0)+")"),e)),w(h("marginRight"),$(n.gap)),w("width",n.autoWidth?null:$(n.fixedWidth)||(i?"":C())),w("height",$(n.fixedHeight)||(i?n.autoHeight?null:C():P()),!0),o=a,l(St),r!==(r=I())&&(x(g,pe,r),l("overflow",r)))}function S(t){var e=n.padding,i=h(t?"right":"left");return e&&$(e[i]||(f(e)?0:e))||"0px"}function P(){return $(n.height||X(v).width*n.heightRatio)}function C(){var t=$(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function k(){return X(v)[h("width")]}function L(t,e){var n=y(t||0);return n?X(n.slide)[h("width")]+(e?0:A()):0}function T(t,e){var n=y(t);if(n){var i=X(n.slide)[h("right")],o=X(v)[h("left")];return rt(i-o)+(e?0:A())}return 0}function _(e){return T(t.length-1)-T(0)+L(0,e)}function A(){var t=y(0);return t&&parseFloat(B(t.slide,h("marginRight")))||0}function I(){return t.is(Ee)||_(!0)>k()}return{mount:function(){var t,e;b(),c(window,"resize load",(t=s(l,Et),e=Dt(0,t,null,1),function(){e.isPaused()&&e.start()})),u([bt,wt],b),u(Et,E)},resize:E,listSize:k,slideSize:L,sliderSize:_,totalSize:T,getPadding:function(t){return parseFloat(B(m,h("padding"+(t?"Right":"Left"))))||0},isOverflow:I}},Clones:function(t,e,n){var i,o=It(t),a=o.on,s=e.Elements,u=e.Slides,c=e.Direction.resolve,l=[];function d(){a(wt,f),a([bt,Et],p),(i=g())&&(function(e){var i=u.get().slice(),o=i.length;if(o){for(;i.length<e;)S(i,i);S(i.slice(-e),i.slice(0,e)).forEach((function(r,a){var c=a<e,d=function(e,i){var o=e.cloneNode(!0);return P(o,n.classes.clone),o.id=t.root.id+"-clone"+dt(i+1),o}(r.slide,a);c?k(d,i[0].slide):C(s.list,d),S(l,d),u.register(d,a-e+(c?0:o),r.index)}))}}(i),e.Layout.resize(!0))}function f(){h(),d()}function h(){U(l),r(l),o.destroy()}function p(){var t=g();i!==t&&(i<t||!t)&&o.emit(wt)}function g(){var i=n.clones;if(t.is(be)){if(m(i)){var o=n[c("fixedWidth")]&&e.Layout.slideSize(0);i=o&&ot(X(s.track)[c("width")]/o)||n[c("autoWidth")]&&t.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:h}},Move:function(t,e,n){var i,o=It(t),r=o.on,a=o.emit,s=t.state.set,u=e.Layout,c=u.slideSize,l=u.getPadding,d=u.totalSize,f=u.listSize,h=u.sliderSize,p=e.Direction,g=p.resolve,v=p.orient,y=e.Elements,w=y.list,b=y.track;function E(){e.Controller.isBusy()||(e.Scroll.cancel(),S(t.index),e.Slides.update())}function S(t){x(L(t,!0))}function x(n,i){if(!t.is(Ee)){var o=i?n:function(n){if(t.is(be)){var i=k(n),o=i>e.Controller.getEnd();(i<0||o)&&(n=P(n,o))}return n}(n);B(w,"transform","translate"+g("X")+"("+o+"px)"),n!==o&&a("sh")}}function P(t,e){var n=t-_(e),i=h();return t-v(i*(ot(rt(n)/i)||1))*(e?1:-1)}function C(){x(T(),!0),i.cancel()}function k(t){for(var n=e.Slides.get(),i=0,o=1/0,r=0;r<n.length;r++){var a=n[r].index,s=rt(L(a,!0)-t);if(!(s<=o))break;o=s,i=a}return i}function L(e,i){var o=v(d(e-1)-function(t){var e=n.focus;return"center"===e?(f()-c(t,!0))/2:+e*c(t)||0}(e));return i?function(e){return n.trimSpace&&t.is(we)&&(e=ut(e,0,v(h(!0)-f()))),e}(o):o}function T(){var t=g("left");return X(w)[t]-X(b)[t]+v(l(!1))}function _(t){return L(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=e.Transition,r([pt,St,bt,wt],E)},move:function(t,e,n,o){var r,u;t!==e&&(r=t>n,u=v(P(T(),r)),r?u>=0:u<=w[g("scrollWidth")]-X(b)[g("width")])&&(C(),x(P(T(),t>n),!0)),s(4),a(mt,e,n,t),i.start(e,(function(){s(3),a(vt,e,n,t),o&&o()}))},jump:S,translate:x,shift:P,cancel:C,toIndex:k,toPosition:L,getPosition:T,getLimit:_,exceededLimit:function(t,e){e=m(e)?T():e;var n=!0!==t&&v(e)<v(_(!1)),i=!1!==t&&v(e)>v(_(!0));return n||i},reposition:E}},Controller:function(t,e,n){var i,o,r,a,u=It(t),c=u.on,l=u.emit,d=e.Move,f=d.getPosition,h=d.getLimit,p=d.toPosition,v=e.Slides,y=v.isEnough,w=v.getLength,b=n.omitEnd,E=t.is(be),S=t.is(we),x=s(_,!1),P=s(_,!0),C=n.start||0,k=C;function L(){o=w(!0),r=n.perMove,a=n.perPage,i=D();var t=ut(C,0,b?i:o-1);t!==C&&(C=t,d.reposition())}function T(){i!==D()&&l(At)}function _(t,e){var n=r||(M()?1:a),o=A(C+n*(t?-1:1),C,!(r||M()));return-1===o&&S&&!at(f(),h(!t),1)?t?0:i:e?o:I(o)}function A(e,s,u){if(y()||M()){var c=function(e){if(S&&"move"===n.trimSpace&&e!==C)for(var i=f();i===p(e,!0)&&st(e,0,t.length-1,!n.rewind);)e<C?--e:++e;return e}(e);c!==e&&(s=e,e=c,u=!1),e<0||e>i?e=r||!st(0,e,s,!0)&&!st(i,s,e,!0)?E?u?e<0?-(o%a||a):o:e:n.rewind?e<0?i:0:-1:F(N(e)):u&&e!==s&&(e=F(N(s)+(e<s?-1:1)))}else e=-1;return e}function I(t){return E?(t+o)%o||0:t}function D(){for(var t=o-(M()||E&&r?1:a);b&&t-- >0;)if(p(o-1,!0)!==p(t,!0)){t++;break}return ut(t,0,o-1)}function F(t){return ut(M()?t:a*t,0,i)}function N(t){return M()?et(t,i):it((t>=i?o-1:t)/a)}function z(t){t!==C&&(k=C,C=t)}function M(){return!m(n.focus)||n.isNavigation}function O(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){L(),c([bt,wt,At],L),c(St,T)},go:function(t,e,n){if(!O()){var o=function(t){var e=C;if(g(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],o=n[1],r=n[2];"+"===o||"-"===o?e=A(C+ +(""+o+(+r||1)),C):">"===o?e=r?F(+r):x(!0):"<"===o&&(e=P(!0))}else e=E?t:ut(t,0,i);return e}(t),r=I(o);r>-1&&(e||r!==C)&&(z(r),d.move(o,r,k,n))}},scroll:function(t,n,o,r){e.Scroll.scroll(t,n,o,(function(){var t=I(d.toIndex(f()));z(b?et(t,i):t),r&&r()}))},getNext:x,getPrev:P,getAdjacent:_,getEnd:D,setIndex:z,getIndex:function(t){return t?k:C},toIndex:F,toPage:N,toDest:function(t){var e=d.toIndex(t);return S?ut(e,0,i):e},hasFocus:M,isBusy:O}},Arrows:function(t,e,n){var i,o,r=It(t),a=r.on,u=r.bind,c=r.emit,l=n.classes,d=n.i18n,f=e.Elements,h=e.Controller,p=f.arrows,g=f.track,m=p,v=f.prev,y=f.next,w={};function b(){var t;!(t=n.arrows)||v&&y||(m=p||R("div",l.arrows),v=L(!0),y=L(!1),i=!0,C(m,[v,y]),!p&&k(m,g)),v&&y&&(F(w,{prev:v,next:y}),j(m,t?"":"none"),P(m,o=ie+"--"+n.direction),t&&(a([pt,vt,wt,Pt,At],T),u(y,"click",s(x,">")),u(v,"click",s(x,"<")),T(),O([v,y],Wt,g.id),c("arrows:mounted",v,y))),a(bt,E)}function E(){S(),b()}function S(){r.destroy(),Q(m,o),i?(U(p?[v,y]:m),v=y=null):M([v,y],$t)}function x(t){h.go(t,!0)}function L(t){return Y('<button class="'+l.arrow+" "+(t?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function T(){if(v&&y){var e=t.index,n=h.getPrev(),i=h.getNext(),o=n>-1&&e<n?d.last:d.prev,r=i>-1&&e>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,O(v,Xt,o),O(y,Xt,r),c("arrows:updated",v,y,n,i)}}return{arrows:w,mount:b,destroy:S,update:T}},Autoplay:function(t,e,n){var i,o,r=It(t),a=r.on,s=r.bind,u=r.emit,c=Dt(n.interval,t.go.bind(t,">"),(function(t){var e=d.bar;e&&B(e,"width",100*t+"%"),u("autoplay:playing",t)})),l=c.isPaused,d=e.Elements,f=e.Elements,h=f.root,p=f.toggle,g=n.autoplay,m="pause"===g;function v(){l()&&e.Slides.isEnough()&&(c.start(!n.resetProgress),o=i=m=!1,b(),u(Lt))}function y(t){void 0===t&&(t=!0),m=!!t,b(),l()||(c.pause(),u(Tt))}function w(){m||(i||o?y(!1):v())}function b(){p&&(x(p,ue,!m),O(p,Xt,n.i18n[m?"play":"pause"]))}function E(t){var i=e.Slides.getAt(t);c.set(i&&+G(i.slide,"data-splide-interval")||n.interval)}return{mount:function(){g&&(n.pauseOnHover&&s(h,"mouseenter mouseleave",(function(t){i="mouseenter"===t.type,w()})),n.pauseOnFocus&&s(h,"focusin focusout",(function(t){o="focusin"===t.type,w()})),p&&s(p,"click",(function(){m?v():y(!0)})),a([mt,xt,wt],c.rewind),a(mt,E),p&&O(p,Wt,d.track.id),m||v(),b())},destroy:c.cancel,play:v,pause:y,isPaused:l}},Cover:function(t,e,n){var i=It(t).on;function o(t){e.Slides.forEach((function(e){var n=A(e.container||e.slide,"img");n&&n.src&&r(t,n,e)}))}function r(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),j(e,t?"none":"")}return{mount:function(){n.cover&&(i(_t,s(r,!0)),i([pt,bt,wt],s(o,!0)))},destroy:s(o,!1)}},Scroll:function(t,e,n){var i,o,r=It(t),a=r.on,u=r.emit,c=t.state.set,l=e.Move,d=l.getPosition,f=l.getLimit,h=l.exceededLimit,p=l.translate,g=t.is(we),m=1;function v(t,n,r,a,f){var p=d();if(b(),r&&(!g||!h())){var v=e.Layout.sliderSize(),E=ct(t)*v*it(rt(t)/v)||0;t=l.toPosition(e.Controller.toDest(t%v))+E}var S=at(p,t,1);m=1,n=S?0:n||nt(rt(t-p)/1.5,800),o=a,i=Dt(n,y,s(w,p,t,f),1),c(5),u(xt),i.start()}function y(){c(3),o&&o(),u(Pt)}function w(t,e,i,r){var a=d(),s=t+(e-t)*function(t){var e=n.easingFunc;return e?e(t):1-Math.pow(1-t,4)}(r),u=(s-a)*m;p(a+u),g&&!i&&h()&&(m*=.6,rt(u)<10&&v(f(h(!0)),600,!1,o,!0))}function b(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){a(mt,b),a([bt,wt],E)},destroy:b,scroll:v,cancel:E}},Drag:function(t,e,n){var i,o,r,a,s,u,l,d,h=It(t),p=h.on,g=h.emit,m=h.bind,v=h.unbind,y=t.state,w=e.Move,b=e.Scroll,E=e.Controller,S=e.Elements.track,x=e.Media.reduce,P=e.Direction,C=P.resolve,k=P.orient,T=w.getPosition,_=w.exceededLimit,A=!1;function I(){var t=n.drag;G(!t),a="free"===t}function D(t){if(u=!1,!l){var e=W(t);i=t.target,o=n.noDrag,L(i,".splide__pagination__page, ."+oe)||o&&L(i,o)||!e&&t.button||(E.isBusy()?J(t,!0):(d=e?S:window,s=y.is([4,5]),r=null,m(d,ve,F,Se),m(d,ye,N,Se),w.cancel(),b.cancel(),M(t)))}var i,o}function F(e){if(y.is(6)||(y.set(6),g("drag")),e.cancelable)if(s){w.translate(i+O(e)/(A&&t.is(we)?5:1));var o=R(e)>200,r=A!==(A=_());(o||r)&&M(e),u=!0,g("dragging"),J(e)}else(function(t){return rt(O(t))>rt(O(t,!0))})(e)&&(s=function(t){var e=n.dragMinThreshold,i=f(e),o=i&&e.mouse||0,r=(i?e.touch:+e)||10;return rt(O(t))>(W(t)?r:o)}(e),J(e))}function N(i){y.is(6)&&(y.set(3),g("dragged")),s&&(function(i){var o=function(e){if(t.is(be)||!A){var n=R(e);if(n&&n<200)return O(e)/n}return 0}(i),r=function(t){return T()+ct(t)*et(rt(t)*(n.flickPower||600),a?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(o),s=n.rewind&&n.rewindByDrag;x(!1),a?E.scroll(r,0,n.snap):t.is(Ee)?E.go(k(ct(o))<0?s?"<":"-":s?">":"+"):t.is(we)&&A&&s?E.go(_(!0)?">":"<"):E.go(E.toDest(r),!0),x(!0)}(i),J(i)),v(d,ve,F),v(d,ye,N),s=!1}function z(t){!l&&u&&J(t,!0)}function M(t){r=o,o=t,i=T()}function O(t,e){return j(t,e)-j(B(t),e)}function R(t){return V(t)-V(B(t))}function B(t){return o===t&&r||o}function j(t,e){return(W(t)?t.changedTouches[0]:t)["page"+C(e?"Y":"X")]}function W(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function G(t){l=t}return{mount:function(){m(S,ve,c,Se),m(S,ye,c,Se),m(S,"touchstart mousedown",D,Se),m(S,"click",z,{capture:!0}),m(S,"dragstart",J),p([pt,bt],I)},disable:G,isDragging:function(){return s}}},Keyboard:function(t,e,n){var i,o,r=It(t),a=r.on,s=r.bind,c=r.unbind,l=t.root,d=e.Direction.resolve;function f(){var t=n.keyboard;t&&(i="global"===t?window:l,s(i,Ce,g))}function h(){c(i,Ce)}function p(){var t=o;o=!0,u((function(){o=t}))}function g(e){if(!o){var n=Pe(e);n===d(Ft)?t.go("<"):n===d(Nt)&&t.go(">")}}return{mount:function(){f(),a(bt,h),a(bt,f),a(mt,p)},destroy:h,disable:function(t){o=t}}},LazyLoad:function(t,e,n){var i=It(t),o=i.on,a=i.off,u=i.bind,c=i.emit,l="sequential"===n.lazyLoad,d=[vt,Pt],f=[];function h(){r(f),e.Slides.forEach((function(t){K(t.slide,"[data-splide-lazy], [data-splide-lazy-srcset]").forEach((function(e){var i=G(e,ke),o=G(e,Le);if(i!==e.src||o!==e.srcset){var r=n.classes.spinner,a=e.parentElement,s=A(a,"."+r)||R("span",r,a);f.push([e,t,s]),e.src||j(e,"none")}}))})),l?v():(a(d),o(d,p),p())}function p(){(f=f.filter((function(e){var i=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,i)||g(e)}))).length||a(d)}function g(t){var e=t[0];P(t[1].slide,fe),u(e,"load error",s(m,t)),O(e,"src",G(e,ke)),O(e,"srcset",G(e,Le)),M(e,ke),M(e,Le)}function m(t,e){var n=t[0],i=t[1];Q(i.slide,fe),"error"!==e.type&&(U(t[2]),j(n,""),c(_t,n,i),c(Et)),l&&v()}function v(){f.length&&g(f.shift())}return{mount:function(){n.lazyLoad&&(h(),o(wt,h))},destroy:s(r,f),check:p}},Pagination:function(t,e,n){var i,o,u=It(t),c=u.on,l=u.emit,d=u.bind,f=e.Slides,h=e.Elements,p=e.Controller,g=p.hasFocus,m=p.getIndex,v=p.go,y=e.Direction.resolve,w=h.pagination,b=[];function E(){i&&(U(w?a(i.children):i),Q(i,o),r(b),i=null),u.destroy()}function S(t){v(">"+t,!0)}function x(t,e){var n=b.length,i=Pe(e),o=C(),r=-1;i===y(Nt,!1,o)?r=++t%n:i===y(Ft,!1,o)?r=(--t+n)%n:"Home"===i?r=0:"End"===i&&(r=n-1);var a=b[r];a&&(W(a.button),v(">"+r),J(e,!0))}function C(){return n.paginationDirection||n.direction}function k(t){return b[p.toPage(t)]}function L(){var t=k(m(!0)),e=k(m());if(t){var n=t.button;Q(n,ue),M(n,Ht),O(n,jt,-1)}if(e){var o=e.button;P(o,ue),O(o,Ht,!0),O(o,jt,"")}l("pagination:updated",{list:i,items:b},t,e)}return{items:b,mount:function e(){E(),c([bt,wt,At],e);var r=n.pagination;w&&j(w,r?"":"none"),r&&(c([mt,xt,Pt],L),function(){var e=t.length,r=n.classes,a=n.i18n,u=n.perPage,c=g()?p.getEnd()+1:ot(e/u);P(i=w||R("ul",r.pagination,h.track.parentElement),o=se+"--"+C()),O(i,Bt,"tablist"),O(i,Xt,a.select),O(i,Jt,C()===Ot?"vertical":"");for(var l=0;l<c;l++){var m=R("li",null,i),v=R("button",{class:r.page,type:"button"},m),y=f.getIn(l).map((function(t){return t.slide.id})),E=!g()&&u>1?a.pageX:a.slideX;d(v,"click",s(S,l)),n.paginationKeyboard&&d(v,"keydown",s(x,l)),O(m,Bt,"presentation"),O(v,Bt,"tab"),O(v,Wt,y.join(" ")),O(v,Xt,lt(E,l+1)),O(v,jt,-1),b.push({li:m,button:v,page:l})}}(),L(),l("pagination:mounted",{list:i,items:b},k(t.index)))},destroy:E,getAt:k,update:L}},Sync:function(t,e,n){var i=n.isNavigation,o=n.slideFocus,a=[];function u(){var e,n;t.splides.forEach((function(e){e.isParent||(l(t,e.splide),l(e.splide,t))})),i&&((n=(e=It(t)).on)(yt,f),n("sk",h),n([pt,bt],d),a.push(e),e.emit(kt,t.splides))}function c(){a.forEach((function(t){t.destroy()})),r(a)}function l(t,e){var n=It(t);n.on(mt,(function(t,n,i){e.go(e.is(be)?i:t)})),a.push(n)}function d(){O(e.Elements.list,Jt,n.direction===Ot?"vertical":"")}function f(e){t.go(e.index)}function h(t,e){E(Te,Pe(e))&&(f(t),J(e))}return{setup:s(e.Media.set,{slideFocus:m(o)?i:o},!0),mount:u,destroy:c,remount:function(){c(),u()}}},Wheel:function(t,e,n){var i=It(t).bind,o=0;function r(i){if(i.cancelable){var r=i.deltaY,a=r<0,s=V(i),u=n.wheelMinThreshold||0,c=n.wheelSleep||0;rt(r)>u&&s-o>c&&(t.go(a?"<":">"),o=s),function(i){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(i)}(a)&&J(i)}}return{mount:function(){n.wheel&&i(e.Elements.track,"wheel",r,Se)}}},Live:function(t,e,n){var i=It(t).on,o=e.Elements.track,r=n.live&&!n.isNavigation,a=R("span","splide__sr"),u=Dt(90,s(c,!1));function c(t){O(o,Qt,t),t?(C(o,a),u.start()):(U(a),u.cancel())}function l(t){r&&O(o,Kt,t?"off":"polite")}return{mount:function(){r&&(l(!e.Autoplay.isPaused()),O(o,Vt,!0),a.textContent="…",i(Lt,s(l,!0)),i(Tt,s(l,!1)),i([vt,Pt],s(c,!0)))},disable:l,destroy:function(){M(o,[Kt,Vt,Qt]),U(a)}}}}),Ae={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:me,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Ie(t,e,n){var i=e.Slides;function o(){i.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){It(t).on([pt,wt],o)},start:function(t,e){i.style("transition","opacity "+n.speed+"ms "+n.easing),u(e)},cancel:c}}function De(t,e,n){var i,o=e.Move,r=e.Controller,a=e.Scroll,u=e.Elements.list,c=s(B,u,"transition");function l(){c(""),a.cancel()}return{mount:function(){It(t).bind(u,"transitionend",(function(t){t.target===u&&i&&(l(),i())}))},start:function(e,s){var u=o.toPosition(e,!0),l=o.getPosition(),d=function(e){var i=n.rewindSpeed;if(t.is(we)&&i){var o=r.getIndex(!0),a=r.getEnd();if(0===o&&e>=a||o>=a&&0===e)return i}return n.speed}(e);rt(u-l)>=1&&d>=1?n.useScroll?a.scroll(u,d,!1,s):(c("transform "+d+"ms "+n.easing),o.translate(u,!0),i=s):(o.jump(e),s())},cancel:l}}var Fe=function(){function t(e,n){var i;this.event=It(),this.Components={},this.state=(i=1,{set:function(t){i=t},is:function(t){return E(w(t),i)}}),this.splides=[],this._o={},this._E={};var o=g(e)?q(document,e):e;tt(o,o+" is invalid."),this.root=o,n=N({label:G(o,Xt)||"",labelledby:G(o,Ut)||""},Ae,t.defaults,n||{});try{N(n,JSON.parse(G(o,"data-splide")))}catch(t){tt(!1,"Invalid JSON")}this._o=Object.create(N({},n))}var e,n,o=t.prototype;return o.mount=function(t,e){var n=this,i=this.state,o=this.Components;return tt(i.is([1,7]),"Already mounted!"),i.set(1),this._C=o,this._T=e||this._T||(this.is(Ee)?Ie:De),this._E=t||this._E,D(F({},_e,this._E,{Transition:this._T}),(function(t,e){var i=t(n,o,n._o);o[e]=i,i.setup&&i.setup()})),D(o,(function(t){t.mount&&t.mount()})),this.emit(pt),P(this.root,"is-initialized"),i.set(3),this.emit(gt),this},o.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},o.go=function(t){return this._C.Controller.go(t),this},o.on=function(t,e){return this.event.on(t,e),this},o.off=function(t){return this.event.off(t),this},o.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(a(arguments,1))),this},o.add=function(t,e){return this._C.Slides.add(t,e),this},o.remove=function(t){return this._C.Slides.remove(t),this},o.is=function(t){return this._o.type===t},o.refresh=function(){return this.emit(wt),this},o.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?It(this).on(gt,this.destroy.bind(this,t)):(D(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(Ct),e.destroy(),t&&r(this.splides),n.set(7)),this},e=t,(n=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();Fe.defaults={},Fe.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};class Ne{constructor(t,e){this.emptyGlowImageTag="empty_glow_image",this.imagesPath=t,this.audioPath=e,this.currentPage=0,this.splideHandle=new Fe(".splide",{fixedHeight:window.innerHeight-20}).mount(),this.splideHandle.on("move",((t,e,n)=>{this.transitioningToPage=!0,this.stopPageAudio(this.book.pages[e])})),this.splideHandle.on("moved",((t,e,n)=>{this.currentPage=t,this.transitioningToPage=!1,this.playPageAudio(this.book.pages[t])})),this.addPageResizeListener()}stopPageAudio(t){for(let e=0;e<t.visualElements.length;e++){let n=t.visualElements[e];if("audio"===n.type){let t=n,e=document.getElementById(t.domID);e.pause(),e.currentTime=0,clearInterval(this.currentPageAutoPlayerInterval)}}}playPageAudio(t){for(let e=0;e<t.visualElements.length;e++){let n=t.visualElements[e];if("audio"===n.type){let t=n,e=document.getElementById(t.domID);e.play(),this.currentPageAutoPlayerInterval=setInterval((()=>{if(void 0!==t.audioTimestamps){let n=e.currentTime;for(let e=0;e<t.audioTimestamps.timestamps.length;e++)n>=t.audioTimestamps.timestamps[e].startTimestamp&&n<=t.audioTimestamps.timestamps[e].endTimestamp&&(document.getElementById(t.domID+"_word_"+e).style.color="#FFFF00")}}),60)}}}addPageResizeListener(){window.addEventListener("resize",(()=>{this.splideHandle.options.fixedHeight=window.innerHeight-20,this.splideHandle.refresh()}))}initializeBook(e){this.book=e,this.currentBookType=e.bookType,this.numberOfPages=e.pages.length,this.currentBookType===t.CuriousReader?this.initializeCuriousReaderBook(e):this.currentBookType===t.GDL&&this.initializeGDLBook(e)}initializeCuriousReaderBook(t){this.numberOfPages=t.pages.length;for(let e=0;e<t.pages.length;e++){const n=document.createElement("li");n.classList.add("splide__slide");let i=!1;for(let o=0;o<t.pages[e].visualElements.length;o++){let r=t.pages[e].visualElements[o];if("image"==r.type){let t=r;if(t.imageSource===this.emptyGlowImageTag)continue;n.appendChild(this.createImageContainer(t))}else if("audio"==r.type){i=!0;let o=r,a=null;for(let n=0;n<t.pages[e].visualElements.length;n++){let i=t.pages[e].visualElements[n];if("text"==i.type){a=i;break}}if(a){let t=this.createAudioAndTextContainers(e,o,a);n.appendChild(t[0]),n.appendChild(t[1])}else n.appendChild(this.createAudioContainer(o))}this.splideHandle.add(n)}if(!i)for(let i=0;i<t.pages[e].visualElements.length;i++){let o=t.pages[e].visualElements[i];if("text"==o.type){let t=o;n.appendChild(this.createTextContainer(t))}}}}createTextContainer(t){let e=document.createElement("div");return e.id="cr-text",e.classList.add("cr-text"),e.style.position="absolute",e.style.webkitTextStroke="1px #303030",e.style.color="#FFFFFF",e.style.textShadow="0.1rem 0.15rem 0.1rem #303030",e.style.fontFamily="Quicksand",e.style.fontWeight="800",e.style.fontSize="1.7em",e.style.top=t.positionY+"%",e.style.left=t.positionX+"%",e.style.width=t.width+"%",e.style.height=t.height+"%",e.innerHTML=t.textContentAsHTML,e}createImageContainer(t){let e=document.createElement("div");e.classList.add("cr-image"),e.style.position="absolute",e.style.top=t.positionY+"%",e.style.left=t.positionX+"%",e.style.width=t.width+"%",e.style.height=t.height+"%";let n=document.createElement("img");return n.src=this.imagesPath+t.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",e.appendChild(n),e}createAudioContainer(t){let e=document.createElement("div");e.classList.add("cr-audio"),e.style.position="absolute";let n=document.createElement("audio");if(n.id=t.domID,n.src=this.audioPath+t.audioSrc.replace("audios/",""),n.controls=!1,e.appendChild(n),void 0!==t.audioTimestamps)for(let n=0;n<t.audioTimestamps.timestamps.length;n++){let i=t.audioTimestamps.timestamps[n],o=document.createElement("audio");o.id=i.domID,o.src=this.audioPath+i.audioSrc.replace("audios/",""),o.controls=!1,e.appendChild(o)}return e}createAudioAndTextContainers(t,e,n){let i=Array(),o=document.createElement("div");o.classList.add("cr-audio"),o.style.position="absolute";let r=document.createElement("audio");r.id=e.domID,r.src=this.audioPath+e.audioSrc.replace("audios/",""),r.controls=!1,o.appendChild(r);let a=Array();if(void 0!==e.audioTimestamps)for(let t=0;t<e.audioTimestamps.timestamps.length;t++){let n=e.audioTimestamps.timestamps[t],i=document.createElement("audio");i.id=n.domID,i.src=this.audioPath+n.audioSrc.replace("audios/",""),i.controls=!1,a.push(n.word.trim()),o.appendChild(i)}i.push(o);let s=e.domID,u=document.createElement("div");u.id="cr-text",u.classList.add("cr-text"),u.style.position="absolute",u.style.webkitTextStroke="1px #303030",u.style.color="#FFFFFF",u.style.textShadow="0.1rem 0.15rem 0.1rem #303030",u.style.fontFamily="Quicksand",u.style.fontWeight="800",u.style.fontSize="1.7em",u.style.top=n.positionY+"%",u.style.left=n.positionX+"%",u.style.width=n.width+"%",u.style.height=n.height+"%";let c=document.createElement("p");c.style.textAlign="center",c.style.fontSize="1.75em";for(let e=0;e<a.length;e++){let n=document.createElement("span");n.id=s+"_word_"+e,n.style.margin="10px",n.innerText=a[e],n.addEventListener("click",(n=>{this.handleInteractiveWordClick(t,e)})),c.appendChild(n)}return u.appendChild(c),i.push(u),i}handleInteractiveWordClick(t,e){let n=this.book.pages[t];for(let t=0;t<n.visualElements.length;t++){let i=n.visualElements[t];if("audio"===i.type){let t=i;document.getElementById(t.audioTimestamps.timestamps[e].domID).play()}}}initializeGDLBook(t){for(let e=0;e<t.pages.length;e++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<t.pages[e].visualElements.length;n++){let o=t.pages[e].visualElements[n];if("text"==o.type){let t=o,e=document.createElement("div");e.style.width="60%",e.classList.add("gdl-text"),e.style.webkitTextStroke="1px #303030",e.style.color="#FFFFFF",e.style.textShadow="0.1rem 0.15rem 0.1rem #303030",e.style.fontFamily="Quicksand",e.style.fontWeight="800",e.style.fontSize="1.7em",e.innerHTML=t.textContentAsHTML,i.appendChild(e)}else if("image"==o.type){let t=o,e=document.createElement("div");e.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+t.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",e.appendChild(n),i.appendChild(e)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(t){this.transitioningToPage=!0}}try{self["workbox:window:6.5.3"]&&_()}catch(ze){}function ze(t,e){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(t){n(t.data)},t.postMessage(e,[i.port2])}))}function Me(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function Oe(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return Me(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Me(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:6.5.3"]&&_()}catch(ze){}var Re=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))};function Be(t,e){var n=location.href;return new URL(t,n).href===new URL(e,n).href}var je=function(t,e){this.type=t,Object.assign(this,e)};function We(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function Ge(){}var He={type:"SKIP_WAITING"};function Xe(t,e){if(!e)return t&&t.then?t.then(Ge):Promise.resolve()}var Ue=function(t){var e,n;function i(e,n){var i,o;return void 0===n&&(n={}),(i=t.call(this)||this).nn={},i.tn=0,i.rn=new Re,i.en=new Re,i.on=new Re,i.un=0,i.an=new Set,i.cn=function(){var t=i.fn,e=t.installing;i.tn>0||!Be(e.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=e,t.removeEventListener("updatefound",i.cn)):(i.hn=e,i.an.add(e),i.rn.resolve(e)),++i.tn,e.addEventListener("statechange",i.ln)},i.ln=function(t){var e=i.fn,n=t.target,o=n.state,r=n===i.vn,a={sw:n,isExternal:r,originalEvent:t};!r&&i.mn&&(a.isUpdate=!0),i.dispatchEvent(new je(o,a)),"installed"===o?i.wn=self.setTimeout((function(){"installed"===o&&e.waiting===n&&i.dispatchEvent(new je("waiting",a))}),200):"activating"===o&&(clearTimeout(i.wn),r||i.en.resolve(n))},i.dn=function(t){var e=i.hn,n=e!==navigator.serviceWorker.controller;i.dispatchEvent(new je("controlling",{isExternal:n,originalEvent:t,sw:e,isUpdate:i.mn})),n||i.on.resolve(e)},i.gn=(o=function(t){var e=t.data,n=t.ports,o=t.source;return We(i.getSW(),(function(){i.an.has(o)&&i.dispatchEvent(new je("message",{data:e,originalEvent:t,ports:n,sw:o}))}))},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];try{return Promise.resolve(o.apply(this,t))}catch(t){return Promise.reject(t)}}),i.sn=e,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var o,r=i.prototype;return r.register=function(t){var e=(void 0===t?{}:t).immediate,n=void 0!==e&&e;try{var i=this;return function(t,e){var n=t();return n&&n.then?n.then(e):e()}((function(){if(!n&&"complete"!==document.readyState)return Xe(new Promise((function(t){return window.addEventListener("load",t)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),We(i.bn(),(function(t){i.fn=t,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var e=i.fn.waiting;return e&&Be(e.scriptURL,i.sn.toString())&&(i.hn=e,Promise.resolve().then((function(){i.dispatchEvent(new je("waiting",{sw:e,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(t){return Promise.reject(t)}},r.update=function(){try{return this.fn?Xe(this.fn.update()):void 0}catch(t){return Promise.reject(t)}},r.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},r.messageSW=function(t){try{return We(this.getSW(),(function(e){return ze(e,t)}))}catch(t){return Promise.reject(t)}},r.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&ze(this.fn.waiting,He)},r.pn=function(){var t=navigator.serviceWorker.controller;return t&&Be(t.scriptURL,this.sn.toString())?t:void 0},r.bn=function(){try{var t=this;return function(t,e){try{var n=t()}catch(t){return e(t)}return n&&n.then?n.then(void 0,e):n}((function(){return We(navigator.serviceWorker.register(t.sn,t.nn),(function(e){return t.un=performance.now(),e}))}),(function(t){throw t}))}catch(t){return Promise.reject(t)}},(o=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}(i.prototype,o),i}(function(){function t(){this.Pn=new Map}var e=t.prototype;return e.addEventListener=function(t,e){this.Sn(t).add(e)},e.removeEventListener=function(t,e){this.Sn(t).delete(e)},e.dispatchEvent=function(t){t.target=this;for(var e,n=Oe(this.Sn(t.type));!(e=n()).done;)(0,e.value)(t)},e.Sn=function(t){return this.Pn.has(t)||this.Pn.set(t,new Set),this.Pn.get(t)},t}()),Ye=function(t,e,n,i){return new(n||(n=Promise))((function(o,r){function a(t){try{u(i.next(t))}catch(t){r(t)}}function s(t){try{u(i.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}))};new class{constructor(t,e,i){this.cachedLanguages=new Map,this.lang="english",this.isCached="is_cached",this.contentFilePath=t,this.imagesPath=e,this.audioPath=i,this.contentParser=new n(t),this.playBackEngine=new Ne(e,i),this.broadcastChannel=new BroadcastChannel("my-channel"),null==localStorage.getItem(this.isCached)||localStorage.getItem(this.isCached)}initialize(){return Ye(this,void 0,void 0,(function*(){let t=yield this.contentParser.parseBook();console.log("Dev App initialized!"),console.log(t),this.enforceLandscapeMode(),window.addEventListener("load",(()=>Ye(this,void 0,void 0,(function*(){if("serviceWorker"in navigator){let t=new Ue("./sw.js",{});t.register().then((t=>{t.installing,this.readLanguageDataFromCacheAndNotifyAndroidApp()})),t.addEventListener("activated",(t=>{console.log("Service Worker installed, requesting a cache!"),window.location.reload()}))}})))),this.playBackEngine.initializeBook(t)}))}readLanguageDataFromCacheAndNotifyAndroidApp(){window.Android&&window.Android.cachedStatus(!0)}enforceLandscapeMode(){try{screen.orientation&&screen.orientation.lock&&screen.orientation.lock("landscape").then((()=>{console.log("Screen orientation locked to landscape!")})).catch((t=>{console.log("Screen orientation lock failed! Interface may not work as expected on mobile devices!")}))}catch(t){console.warn("Screen orientation lock not supported! Interface may not work as expected on mobile devices!")}}}("/BookContent/LetsFlyLevel2En/content/content.json","/BookContent/LetsFlyLevel2En/content/images/","/BookContent/LetsFlyLevel2En/content/audios/").initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,