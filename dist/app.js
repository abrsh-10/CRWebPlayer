/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var e;!function(e){e.CuriousReader="CuriousReader",e.GDL="GDL",e.Unknown="Unknown"}(e||(e={}));class t{constructor(e){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=e}async parseBook(){return new Promise(((e,t)=>{this.parseContentJSONFile().then((t=>{this.contentJSON=t,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={bookName:"",pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),e(n)})).catch((e=>{t(e)}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?e.CuriousReader:void 0!==this.contentJSON.chapters?e.GDL:e.Unknown}parsePages(t){let n=[];if(t.bookType===e.CuriousReader){let e=this.contentJSON.presentation.slides,t=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<e.length;i++){let o=e[i],r={visualElements:[],backgroundColor:t};r.visualElements=this.parsePageCR(o),n.push(r)}}else if(t.bookType===e.GDL){let e=this.contentJSON.chapters,t="#FCFCF2";for(let i=0;i<e.length;i++){let o=e[i],r={visualElements:[],backgroundColor:t};r.visualElements=this.parsePageGDL(o),n.push(r)}}else console.log("Unknown book type!");return n}parsePageCR(e){let t=[],n=e.elements;for(let e=0;e<n.length;e++){let i=n[e].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[e]);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[e]);t.push(i)}else if(i.includes("Audio")){let i=this.parseAudioElementCR(n[e]);t.push(i)}}return t}parsePageGDL(e){let t=[],n=e.params.content;for(let e=0;e<n.length;e++){let i=n[e].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[e].content.params);t.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[e].content.params);t.push(i)}}return t}parseTextElementCR(e){return{type:"text",positionX:e.x,positionY:e.y,width:e.width,height:e.height,textContentAsHTML:e.action.params.text}}parseTextElementGDL(e){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:e.text}}parseImageElementCR(e){let t="";return t=void 0===e.action.params.file?this.emptyGlowImageTag:e.action.params.file.path,{domID:t===this.emptyGlowImageTag?e.id:e.action.subContentId,type:"image",positionX:e.x,positionY:e.y,width:e.width,height:e.height,imageSource:t}}parseImageElementGDL(e){return{domID:"",type:"image",positionX:NaN,positionY:NaN,width:e.width,height:e.height,imageSource:e.file.path}}parseAudioElementCR(e){let t={timestamps:[]},n=e.action.params.timeStampForEachText;for(let i=0;i<n.length;i++){let o=i,r=n[i],a={domID:e.action.subContentId+"_"+o.toString(),word:r.text,startTimestamp:r.startDuration,endTimestamp:r.endDuration,audioSrc:r.wordfile[0].path};t.timestamps.push(a)}return{domID:e.action.subContentId,type:"audio",positionX:e.x,positionY:e.y,width:e.width,height:e.height,glowColor:e.action.params.glowColor,audioSrc:e.action.params.files[0].path,audioTimestamps:t,styles:""}}async parseContentJSONFile(){return new Promise(((e,t)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let t=n.response;delete t.l10n,delete t.override,e(t)}else t(n.response)},n.send()}))}}function n(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var i="(prefers-reduced-motion: reduce)";function o(e){e.length=0}function r(e,t,n){return Array.prototype.slice.call(e,t,n)}function a(e){return e.bind.apply(e,[null].concat(r(arguments,1)))}var s=setTimeout,c=function(){};function l(e){return requestAnimationFrame(e)}function u(e,t){return typeof t===e}function d(e){return!m(e)&&u("object",e)}var f=Array.isArray,h=a(u,"function"),p=a(u,"string"),g=a(u,"undefined");function m(e){return null===e}function v(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function y(e){return f(e)?e:[e]}function w(e,t){y(e).forEach(t)}function b(e,t){return e.indexOf(t)>-1}function E(e,t){return e.push.apply(e,y(t)),e}function k(e,t,n){e&&w(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function S(e,t){k(e,p(t)?t.split(" "):t,!0)}function C(e,t){w(t,e.appendChild.bind(e))}function x(e,t){w(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function P(e,t){return v(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function L(e,t){var n=e?r(e.children):[];return t?n.filter((function(e){return P(e,t)})):n}function T(e,t){return t?L(e,t)[0]:e.firstElementChild}var I=Object.keys;function A(e,t,n){return e&&(n?I(e).reverse():I(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function D(e){return r(arguments,1).forEach((function(t){A(t,(function(n,i){e[i]=t[i]}))})),e}function F(e){return r(arguments,1).forEach((function(t){A(t,(function(t,n){f(t)?e[n]=t.slice():d(t)?e[n]=F({},d(e[n])?e[n]:{},t):e[n]=t}))})),e}function R(e,t){w(t||I(e),(function(t){delete e[t]}))}function N(e,t){w(e,(function(e){w(t,(function(t){e&&e.removeAttribute(t)}))}))}function M(e,t,n){d(t)?A(t,(function(t,n){M(e,n,t)})):w(e,(function(e){m(n)||""===n?N(e,t):e.setAttribute(t,String(n))}))}function z(e,t,n){var i=document.createElement(e);return t&&(p(t)?S(i,t):M(i,t)),n&&C(n,i),i}function W(e,t,n){if(g(n))return getComputedStyle(e)[t];m(n)||(e.style[t]=""+n)}function O(e,t){W(e,"display",t)}function B(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function G(e,t){return e.getAttribute(t)}function j(e,t){return e&&e.classList.contains(t)}function H(e){return e.getBoundingClientRect()}function X(e){w(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function U(e){return T((new DOMParser).parseFromString(e,"text/html").body)}function Y(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function J(e,t){return e&&e.querySelector(t)}function q(e,t){return t?r(e.querySelectorAll(t)):[]}function K(e,t){k(e,t,!1)}function Q(e){return e.timeStamp}function V(e){return p(e)?e:e?e+"px":""}var $="splide";function Z(e,t){if(!e)throw new Error("[splide] "+(t||""))}var ee=Math.min,te=Math.max,ne=Math.floor,ie=Math.ceil,oe=Math.abs;function re(e,t,n){return oe(e-t)<n}function ae(e,t,n,i){var o=ee(t,n),r=te(t,n);return i?o<e&&e<r:o<=e&&e<=r}function se(e,t,n){var i=ee(t,n),o=te(t,n);return ee(te(i,e),o)}function ce(e){return+(e>0)-+(e<0)}function le(e,t){return w(t,(function(t){e=e.replace("%s",""+t)})),e}function ue(e){return e<10?"0"+e:""+e}var de={};function fe(){var e=[];function t(e,t,n){w(e,(function(e){e&&w(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");n(e,i[0],i[1])}))}))}))}return{bind:function(n,i,o,r){t(n,i,(function(t,n,i){var a="addEventListener"in t,s=a?t.removeEventListener.bind(t,n,o,r):t.removeListener.bind(t,o);a?t.addEventListener(n,o,r):t.addListener(o),e.push([t,n,i,o,s])}))},unbind:function(n,i,o){t(n,i,(function(t,n,i){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==i||o&&e[3]!==o)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,n),e.dispatchEvent(i),i},destroy:function(){e.forEach((function(e){e[4]()})),o(e)}}}var he="mounted",pe="ready",ge="move",me="moved",ve="click",ye="refresh",we="updated",be="resize",Ee="resized",ke="scroll",Se="scrolled",Ce="destroy",xe="navigation:mounted",Pe="autoplay:play",Le="autoplay:pause",_e="lazyload:loaded",Te="ei";function Ie(e){var t=e?e.event.bus:document.createDocumentFragment(),n=fe();return e&&e.event.on(Ce,n.destroy),D(n,{bus:t,on:function(e,i){n.bind(t,y(e).join(" "),(function(e){i.apply(i,f(e.detail)?e.detail:[])}))},off:a(n.unbind,t),emit:function(e){n.dispatch(t,e,r(arguments,1))}})}function Ae(e,t,n,i){var o,r,a=Date.now,s=0,c=!0,u=0;function d(){if(!c){if(s=e?ee((a()-o)/e,1):1,n&&n(s),s>=1&&(t(),o=a(),i&&++u>=i))return f();r=l(d)}}function f(){c=!0}function h(){r&&cancelAnimationFrame(r),s=0,r=0,c=!0}return{start:function(t){t||h(),o=a()-(t?s*e:0),c=!1,r=l(d)},rewind:function(){o=a(),s=0,n&&n(s)},pause:f,cancel:h,set:function(t){e=t},isPaused:function(){return c}}}var De="ArrowLeft",Fe="ArrowRight",Re="ArrowUp",Ne="ArrowDown",Me="ttb",ze={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Re,Fe],ArrowRight:[Ne,De]};var We="role",Oe="tabindex",Be="aria-controls",Ge="aria-current",je="aria-selected",He="aria-label",Xe="aria-labelledby",Ue="aria-hidden",Ye="aria-orientation",Je="aria-roledescription",qe="aria-live",Ke="aria-busy",Qe="aria-atomic",Ve=[We,Oe,"disabled",Be,Ge,He,Xe,Ue,Ye,Je],$e=$,Ze="splide__track",et="splide__slide",tt=et+"--clone",nt="splide__arrows",it="splide__arrow",ot=it+"--prev",rt=it+"--next",at="splide__pagination",st="is-active",ct="is-prev",lt="is-next",ut="is-visible",dt="is-loading",ft="is-focus-in",ht="is-overflow",pt=[st,ut,ct,lt,dt,ft,ht],gt={slide:et,clone:tt,arrows:nt,arrow:it,prev:ot,next:rt,pagination:at,page:"splide__pagination__page",spinner:"splide__spinner"},mt="touchmove mousemove",vt="touchend touchcancel mouseup click",yt="slide",wt="loop",bt="fade";var Et={passive:!1,capture:!0},kt={Spacebar:" ",Right:Fe,Left:De,Up:Re,Down:Ne};function St(e){return e=p(e)?e:e.key,kt[e]||e}var Ct="keydown",xt="data-splide-lazy",Pt="data-splide-lazy-srcset",Lt=[" ","Enter"],_t=Object.freeze({__proto__:null,Media:function(e,t,n){var o=e.state,r=n.breakpoints||{},a=n.reducedMotion||{},s=fe(),c=[];function l(e){e&&s.destroy()}function u(e,t){var n=matchMedia(t);s.bind(n,"change",d),c.push([e,n])}function d(){var t=o.is(7),i=n.direction,r=c.reduce((function(e,t){return F(e,t[1].matches?t[0]:{})}),{});R(n),f(r),n.destroy?e.destroy("completely"===n.destroy):t?(l(!0),e.mount()):i!==n.direction&&e.refresh()}function f(t,i,r){F(n,t),i&&F(Object.getPrototypeOf(n),t),!r&&o.is(1)||e.emit(we,n)}return{setup:function(){var e="min"===n.mediaQuery;I(r).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){u(r[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),u(a,i),d()},destroy:l,reduce:function(e){matchMedia(i).matches&&(e?F(n,a):R(n,I(a)))},set:f}},Direction:function(e,t,n){return{resolve:function(e,t,i){var o="rtl"!==(i=i||n.direction)||t?i===Me?0:-1:1;return ze[e]&&ze[e][o]||e.replace(/width|left|right/i,(function(e,t){var n=ze[e.toLowerCase()][o]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*("rtl"===n.direction?1:-1)}}},Elements:function(e,t,n){var i,r,a,s=Ie(e),c=s.on,l=s.bind,u=e.root,d=n.i18n,f={},p=[],g=[],m=[];function v(){var e,t,o;i=b("."+Ze),r=T(i,".splide__list"),Z(i&&r,"A track/list element is missing."),E(p,L(r,".splide__slide:not(."+tt+")")),A({arrows:nt,pagination:at,prev:ot,next:rt,bar:"splide__progress__bar",toggle:"splide__toggle"},(function(e,t){f[t]=b("."+e)})),D(f,{root:u,track:i,list:r,slides:p}),t=u.id||""+(e=$)+ue(de[e]=(de[e]||0)+1),o=n.role,u.id=t,i.id=i.id||t+"-track",r.id=r.id||t+"-list",!G(u,We)&&"SECTION"!==u.tagName&&o&&M(u,We,o),M(u,Je,d.carousel),M(r,We,"presentation"),w()}function y(e){var t=Ve.concat("style");o(p),K(u,g),K(i,m),N([i,r],t),N(u,e?t:["style",Je])}function w(){K(u,g),K(i,m),g=C($e),m=C(Ze),S(u,g),S(i,m),M(u,He,n.label),M(u,Xe,n.labelledby)}function b(e){var t=J(u,e);return t&&function(e,t){if(h(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!P(n,t);)n=n.parentElement;return n}(t,".splide")===u?t:void 0}function C(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===$e&&st]}return D(f,{setup:v,mount:function(){c(ye,y),c(ye,v),c(we,w),l(document,"touchstart mousedown keydown",(function(e){a="keydown"===e.type}),{capture:!0}),l(u,"focusin",(function(){k(u,ft,!!a)}))},destroy:y})},Slides:function(e,t,n){var i=Ie(e),r=i.on,s=i.emit,c=i.bind,l=t.Elements,u=l.slides,d=l.list,f=[];function g(){u.forEach((function(e,t){E(e,t,-1)}))}function m(){_((function(e){e.destroy()})),o(f)}function E(t,n,i){var o=function(e,t,n,i){var o,r=Ie(e),s=r.on,c=r.emit,l=r.bind,u=e.Components,d=e.root,f=e.options,h=f.isNavigation,p=f.updateOnMove,g=f.i18n,m=f.pagination,v=f.slideFocus,y=u.Direction.resolve,w=G(i,"style"),b=G(i,He),E=n>-1,S=T(i,".splide__slide__container");function C(){var o=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");M(i,He,le(g.slideX,(E?n:t)+1)),M(i,Be,o),M(i,We,v?"button":""),v&&N(i,Je)}function x(){o||P()}function P(){if(!o){var n=e.index;(r=L())!==j(i,st)&&(k(i,st,r),M(i,Ge,h&&r||""),c(r?"active":"inactive",_)),function(){var t=function(){if(e.is(bt))return L();var t=H(u.Elements.track),n=H(i),o=y("left",!0),r=y("right",!0);return ne(t[o])<=ie(n[o])&&ne(n[r])<=ie(t[r])}(),n=!t&&(!L()||E);if(e.state.is([4,5])||M(i,Ue,n||""),M(q(i,f.focusableNodes||""),Oe,n?-1:""),v&&M(i,Oe,n?-1:0),t!==j(i,ut)&&(k(i,ut,t),c(t?"visible":"hidden",_)),!t&&document.activeElement===i){var o=u.Slides.getAt(e.index);o&&B(o.slide)}}(),k(i,ct,t===n-1),k(i,lt,t===n+1)}var r}function L(){var i=e.index;return i===t||f.cloneStatus&&i===n}var _={index:t,slideIndex:n,slide:i,container:S,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+ue(t+1),M(i,We,m?"tabpanel":"group"),M(i,Je,g.slide),M(i,He,b||le(g.slideLabel,[t+1,e.length]))),l(i,"click",a(c,ve,_)),l(i,"keydown",a(c,"sk",_)),s([me,"sh",Se],P),s(xe,C),p&&s(ge,x)},destroy:function(){o=!0,r.destroy(),K(i,pt),N(i,Ve),M(i,"style",w),M(i,He,b||"")},update:P,style:function(e,t,n){W(n&&S||i,e,t)},isWithin:function(n,i){var o=oe(n-t);return E||!f.rewind&&!e.is(wt)||(o=ee(o,e.length-o)),o<=i}};return _}(e,n,i,t);o.mount(),f.push(o),f.sort((function(e,t){return e.index-t.index}))}function L(e){return e?I((function(e){return!e.isClone})):f}function _(e,t){L(t).forEach(e)}function I(e){return f.filter(h(e)?e:function(t){return p(e)?P(t.slide,e):b(y(e),t.index)})}return{mount:function(){g(),r(ye,m),r(ye,g)},destroy:m,update:function(){_((function(e){e.update()}))},register:E,get:L,getIn:function(e){var i=t.Controller,o=i.toIndex(e),r=i.hasFocus()?1:n.perPage;return I((function(e){return ae(e.index,o,o+r-1)}))},getAt:function(e){return I(e)[0]},add:function(e,t){w(e,(function(e){if(p(e)&&(e=U(e)),v(e)){var i=u[t];i?x(e,i):C(d,e),S(e,n.classes.slide),o=e,r=a(s,be),l=q(o,"img"),(f=l.length)?l.forEach((function(e){c(e,"load error",(function(){--f||r()}))})):r()}var o,r,l,f})),s(ye)},remove:function(e){X(I(e).map((function(e){return e.slide}))),s(ye)},forEach:_,filter:I,style:function(e,t,n){_((function(i){i.style(e,t,n)}))},getLength:function(e){return e?u.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(e,t,n){var i,o,r,s=Ie(e),c=s.on,l=s.bind,u=s.emit,f=t.Slides,h=t.Direction.resolve,p=t.Elements,g=p.root,m=p.track,v=p.list,y=f.getAt,w=f.style;function b(){i=n.direction===Me,W(g,"maxWidth",V(n.width)),W(m,h("paddingLeft"),S(!1)),W(m,h("paddingRight"),S(!0)),E(!0)}function E(e){var t,a=H(g);(e||o.width!==a.width||o.height!==a.height)&&(W(m,"height",(t="",i&&(Z(t=C(),"height or heightRatio is missing."),t="calc("+t+" - "+S(!1)+" - "+S(!0)+")"),t)),w(h("marginRight"),V(n.gap)),w("width",n.autoWidth?null:V(n.fixedWidth)||(i?"":x())),w("height",V(n.fixedHeight)||(i?n.autoHeight?null:x():C()),!0),o=a,u(Ee),r!==(r=A())&&(k(g,ht,r),u("overflow",r)))}function S(e){var t=n.padding,i=h(e?"right":"left");return t&&V(t[i]||(d(t)?0:t))||"0px"}function C(){return V(n.height||H(v).width*n.heightRatio)}function x(){var e=V(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function P(){return H(v)[h("width")]}function L(e,t){var n=y(e||0);return n?H(n.slide)[h("width")]+(t?0:I()):0}function _(e,t){var n=y(e);if(n){var i=H(n.slide)[h("right")],o=H(v)[h("left")];return oe(i-o)+(t?0:I())}return 0}function T(t){return _(e.length-1)-_(0)+L(0,t)}function I(){var e=y(0);return e&&parseFloat(W(e.slide,h("marginRight")))||0}function A(){return e.is(bt)||T(!0)>P()}return{mount:function(){var e,t;b(),l(window,"resize load",(e=a(u,be),t=Ae(0,e,null,1),function(){t.isPaused()&&t.start()})),c([we,ye],b),c(be,E)},resize:E,listSize:P,slideSize:L,sliderSize:T,totalSize:_,getPadding:function(e){return parseFloat(W(m,h("padding"+(e?"Right":"Left"))))||0},isOverflow:A}},Clones:function(e,t,n){var i,r=Ie(e),a=r.on,s=t.Elements,c=t.Slides,l=t.Direction.resolve,u=[];function d(){a(ye,f),a([we,be],p),(i=m())&&(function(t){var i=c.get().slice(),o=i.length;if(o){for(;i.length<t;)E(i,i);E(i.slice(-t),i.slice(0,t)).forEach((function(r,a){var l=a<t,d=function(t,i){var o=t.cloneNode(!0);return S(o,n.classes.clone),o.id=e.root.id+"-clone"+ue(i+1),o}(r.slide,a);l?x(d,i[0].slide):C(s.list,d),E(u,d),c.register(d,a-t+(l?0:o),r.index)}))}}(i),t.Layout.resize(!0))}function f(){h(),d()}function h(){X(u),o(u),r.destroy()}function p(){var e=m();i!==e&&(i<e||!e)&&r.emit(ye)}function m(){var i=n.clones;if(e.is(wt)){if(g(i)){var o=n[l("fixedWidth")]&&t.Layout.slideSize(0);i=o&&ie(H(s.track)[l("width")]/o)||n[l("autoWidth")]&&e.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:h}},Move:function(e,t,n){var i,o=Ie(e),r=o.on,a=o.emit,s=e.state.set,c=t.Layout,l=c.slideSize,u=c.getPadding,d=c.totalSize,f=c.listSize,h=c.sliderSize,p=t.Direction,m=p.resolve,v=p.orient,y=t.Elements,w=y.list,b=y.track;function E(){t.Controller.isBusy()||(t.Scroll.cancel(),k(e.index),t.Slides.update())}function k(e){S(L(e,!0))}function S(n,i){if(!e.is(bt)){var o=i?n:function(n){if(e.is(wt)){var i=P(n),o=i>t.Controller.getEnd();(i<0||o)&&(n=C(n,o))}return n}(n);W(w,"transform","translate"+m("X")+"("+o+"px)"),n!==o&&a("sh")}}function C(e,t){var n=e-T(t),i=h();return e-v(i*(ie(oe(n)/i)||1))*(t?1:-1)}function x(){S(_(),!0),i.cancel()}function P(e){for(var n=t.Slides.get(),i=0,o=1/0,r=0;r<n.length;r++){var a=n[r].index,s=oe(L(a,!0)-e);if(!(s<=o))break;o=s,i=a}return i}function L(t,i){var o=v(d(t-1)-function(e){var t=n.focus;return"center"===t?(f()-l(e,!0))/2:+t*l(e)||0}(t));return i?function(t){return n.trimSpace&&e.is(yt)&&(t=se(t,0,v(h(!0)-f()))),t}(o):o}function _(){var e=m("left");return H(w)[e]-H(b)[e]+v(u(!1))}function T(e){return L(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=t.Transition,r([he,Ee,we,ye],E)},move:function(e,t,n,o){var r,c;e!==t&&(r=e>n,c=v(C(_(),r)),r?c>=0:c<=w[m("scrollWidth")]-H(b)[m("width")])&&(x(),S(C(_(),e>n),!0)),s(4),a(ge,t,n,e),i.start(t,(function(){s(3),a(me,t,n,e),o&&o()}))},jump:k,translate:S,shift:C,cancel:x,toIndex:P,toPosition:L,getPosition:_,getLimit:T,exceededLimit:function(e,t){t=g(t)?_():t;var n=!0!==e&&v(t)<v(T(!1)),i=!1!==e&&v(t)>v(T(!0));return n||i},reposition:E}},Controller:function(e,t,n){var i,o,r,s,c=Ie(e),l=c.on,u=c.emit,d=t.Move,f=d.getPosition,h=d.getLimit,m=d.toPosition,v=t.Slides,y=v.isEnough,w=v.getLength,b=n.omitEnd,E=e.is(wt),k=e.is(yt),S=a(T,!1),C=a(T,!0),x=n.start||0,P=x;function L(){o=w(!0),r=n.perMove,s=n.perPage,i=D();var e=se(x,0,b?i:o-1);e!==x&&(x=e,d.reposition())}function _(){i!==D()&&u(Te)}function T(e,t){var n=r||(M()?1:s),o=I(x+n*(e?-1:1),x,!(r||M()));return-1===o&&k&&!re(f(),h(!e),1)?e?0:i:t?o:A(o)}function I(t,a,c){if(y()||M()){var l=function(t){if(k&&"move"===n.trimSpace&&t!==x)for(var i=f();i===m(t,!0)&&ae(t,0,e.length-1,!n.rewind);)t<x?--t:++t;return t}(t);l!==t&&(a=t,t=l,c=!1),t<0||t>i?t=r||!ae(0,t,a,!0)&&!ae(i,a,t,!0)?E?c?t<0?-(o%s||s):o:t:n.rewind?t<0?i:0:-1:F(R(t)):c&&t!==a&&(t=F(R(a)+(t<a?-1:1)))}else t=-1;return t}function A(e){return E?(e+o)%o||0:e}function D(){for(var e=o-(M()||E&&r?1:s);b&&e-- >0;)if(m(o-1,!0)!==m(e,!0)){e++;break}return se(e,0,o-1)}function F(e){return se(M()?e:s*e,0,i)}function R(e){return M()?ee(e,i):ne((e>=i?o-1:e)/s)}function N(e){e!==x&&(P=x,x=e)}function M(){return!g(n.focus)||n.isNavigation}function z(){return e.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){L(),l([we,ye,Te],L),l(Ee,_)},go:function(e,t,n){if(!z()){var o=function(e){var t=x;if(p(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],o=n[1],r=n[2];"+"===o||"-"===o?t=I(x+ +(""+o+(+r||1)),x):">"===o?t=r?F(+r):S(!0):"<"===o&&(t=C(!0))}else t=E?e:se(e,0,i);return t}(e),r=A(o);r>-1&&(t||r!==x)&&(N(r),d.move(o,r,P,n))}},scroll:function(e,n,o,r){t.Scroll.scroll(e,n,o,(function(){var e=A(d.toIndex(f()));N(b?ee(e,i):e),r&&r()}))},getNext:S,getPrev:C,getAdjacent:T,getEnd:D,setIndex:N,getIndex:function(e){return e?P:x},toIndex:F,toPage:R,toDest:function(e){var t=d.toIndex(e);return k?se(t,0,i):t},hasFocus:M,isBusy:z}},Arrows:function(e,t,n){var i,o,r=Ie(e),s=r.on,c=r.bind,l=r.emit,u=n.classes,d=n.i18n,f=t.Elements,h=t.Controller,p=f.arrows,g=f.track,m=p,v=f.prev,y=f.next,w={};function b(){var e;!(e=n.arrows)||v&&y||(m=p||z("div",u.arrows),v=L(!0),y=L(!1),i=!0,C(m,[v,y]),!p&&x(m,g)),v&&y&&(D(w,{prev:v,next:y}),O(m,e?"":"none"),S(m,o=nt+"--"+n.direction),e&&(s([he,me,ye,Se,Te],_),c(y,"click",a(P,">")),c(v,"click",a(P,"<")),_(),M([v,y],Be,g.id),l("arrows:mounted",v,y))),s(we,E)}function E(){k(),b()}function k(){r.destroy(),K(m,o),i?(X(p?[v,y]:m),v=y=null):N([v,y],Ve)}function P(e){h.go(e,!0)}function L(e){return U('<button class="'+u.arrow+" "+(e?u.prev:u.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function _(){if(v&&y){var t=e.index,n=h.getPrev(),i=h.getNext(),o=n>-1&&t<n?d.last:d.prev,r=i>-1&&t>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,M(v,He,o),M(y,He,r),l("arrows:updated",v,y,n,i)}}return{arrows:w,mount:b,destroy:k,update:_}},Autoplay:function(e,t,n){var i,o,r=Ie(e),a=r.on,s=r.bind,c=r.emit,l=Ae(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&W(t,"width",100*e+"%"),c("autoplay:playing",e)})),u=l.isPaused,d=t.Elements,f=t.Elements,h=f.root,p=f.toggle,g=n.autoplay,m="pause"===g;function v(){u()&&t.Slides.isEnough()&&(l.start(!n.resetProgress),o=i=m=!1,b(),c(Pe))}function y(e){void 0===e&&(e=!0),m=!!e,b(),u()||(l.pause(),c(Le))}function w(){m||(i||o?y(!1):v())}function b(){p&&(k(p,st,!m),M(p,He,n.i18n[m?"play":"pause"]))}function E(e){var i=t.Slides.getAt(e);l.set(i&&+G(i.slide,"data-splide-interval")||n.interval)}return{mount:function(){g&&(n.pauseOnHover&&s(h,"mouseenter mouseleave",(function(e){i="mouseenter"===e.type,w()})),n.pauseOnFocus&&s(h,"focusin focusout",(function(e){o="focusin"===e.type,w()})),p&&s(p,"click",(function(){m?v():y(!0)})),a([ge,ke,ye],l.rewind),a(ge,E),p&&M(p,Be,d.track.id),m||v(),b())},destroy:l.cancel,play:v,pause:y,isPaused:u}},Cover:function(e,t,n){var i=Ie(e).on;function o(e){t.Slides.forEach((function(t){var n=T(t.container||t.slide,"img");n&&n.src&&r(e,n,t)}))}function r(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),O(t,e?"none":"")}return{mount:function(){n.cover&&(i(_e,a(r,!0)),i([he,we,ye],a(o,!0)))},destroy:a(o,!1)}},Scroll:function(e,t,n){var i,o,r=Ie(e),s=r.on,c=r.emit,l=e.state.set,u=t.Move,d=u.getPosition,f=u.getLimit,h=u.exceededLimit,p=u.translate,g=e.is(yt),m=1;function v(e,n,r,s,f){var p=d();if(b(),r&&(!g||!h())){var v=t.Layout.sliderSize(),E=ce(e)*v*ne(oe(e)/v)||0;e=u.toPosition(t.Controller.toDest(e%v))+E}var k=re(p,e,1);m=1,n=k?0:n||te(oe(e-p)/1.5,800),o=s,i=Ae(n,y,a(w,p,e,f),1),l(5),c(ke),i.start()}function y(){l(3),o&&o(),c(Se)}function w(e,t,i,r){var a=d(),s=e+(t-e)*function(e){var t=n.easingFunc;return t?t(e):1-Math.pow(1-e,4)}(r),c=(s-a)*m;p(a+c),g&&!i&&h()&&(m*=.6,oe(c)<10&&v(f(h(!0)),600,!1,o,!0))}function b(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){s(ge,b),s([we,ye],E)},destroy:b,scroll:v,cancel:E}},Drag:function(e,t,n){var i,o,r,a,s,l,u,f,h=Ie(e),p=h.on,g=h.emit,m=h.bind,v=h.unbind,y=e.state,w=t.Move,b=t.Scroll,E=t.Controller,k=t.Elements.track,S=t.Media.reduce,C=t.Direction,x=C.resolve,L=C.orient,_=w.getPosition,T=w.exceededLimit,I=!1;function A(){var e=n.drag;j(!e),a="free"===e}function D(e){if(l=!1,!u){var t=G(e);i=e.target,o=n.noDrag,P(i,".splide__pagination__page, ."+it)||o&&P(i,o)||!t&&e.button||(E.isBusy()?Y(e,!0):(f=t?k:window,s=y.is([4,5]),r=null,m(f,mt,F,Et),m(f,vt,R,Et),w.cancel(),b.cancel(),M(e)))}var i,o}function F(t){if(y.is(6)||(y.set(6),g("drag")),t.cancelable)if(s){w.translate(i+z(t)/(I&&e.is(yt)?5:1));var o=W(t)>200,r=I!==(I=T());(o||r)&&M(t),l=!0,g("dragging"),Y(t)}else(function(e){return oe(z(e))>oe(z(e,!0))})(t)&&(s=function(e){var t=n.dragMinThreshold,i=d(t),o=i&&t.mouse||0,r=(i?t.touch:+t)||10;return oe(z(e))>(G(e)?r:o)}(t),Y(t))}function R(i){y.is(6)&&(y.set(3),g("dragged")),s&&(function(i){var o=function(t){if(e.is(wt)||!I){var n=W(t);if(n&&n<200)return z(t)/n}return 0}(i),r=function(e){return _()+ce(e)*ee(oe(e)*(n.flickPower||600),a?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(o),s=n.rewind&&n.rewindByDrag;S(!1),a?E.scroll(r,0,n.snap):e.is(bt)?E.go(L(ce(o))<0?s?"<":"-":s?">":"+"):e.is(yt)&&I&&s?E.go(T(!0)?">":"<"):E.go(E.toDest(r),!0),S(!0)}(i),Y(i)),v(f,mt,F),v(f,vt,R),s=!1}function N(e){!u&&l&&Y(e,!0)}function M(e){r=o,o=e,i=_()}function z(e,t){return B(e,t)-B(O(e),t)}function W(e){return Q(e)-Q(O(e))}function O(e){return o===e&&r||o}function B(e,t){return(G(e)?e.changedTouches[0]:e)["page"+x(t?"Y":"X")]}function G(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function j(e){u=e}return{mount:function(){m(k,mt,c,Et),m(k,vt,c,Et),m(k,"touchstart mousedown",D,Et),m(k,"click",N,{capture:!0}),m(k,"dragstart",Y),p([he,we],A)},disable:j,isDragging:function(){return s}}},Keyboard:function(e,t,n){var i,o,r=Ie(e),a=r.on,c=r.bind,l=r.unbind,u=e.root,d=t.Direction.resolve;function f(){var e=n.keyboard;e&&(i="global"===e?window:u,c(i,Ct,g))}function h(){l(i,Ct)}function p(){var e=o;o=!0,s((function(){o=e}))}function g(t){if(!o){var n=St(t);n===d(De)?e.go("<"):n===d(Fe)&&e.go(">")}}return{mount:function(){f(),a(we,h),a(we,f),a(ge,p)},destroy:h,disable:function(e){o=e}}},LazyLoad:function(e,t,n){var i=Ie(e),r=i.on,s=i.off,c=i.bind,l=i.emit,u="sequential"===n.lazyLoad,d=[me,Se],f=[];function h(){o(f),t.Slides.forEach((function(e){q(e.slide,"[data-splide-lazy], [data-splide-lazy-srcset]").forEach((function(t){var i=G(t,xt),o=G(t,Pt);if(i!==t.src||o!==t.srcset){var r=n.classes.spinner,a=t.parentElement,s=T(a,"."+r)||z("span",r,a);f.push([t,e,s]),t.src||O(t,"none")}}))})),u?v():(s(d),r(d,p),p())}function p(){(f=f.filter((function(t){var i=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,i)||g(t)}))).length||s(d)}function g(e){var t=e[0];S(e[1].slide,dt),c(t,"load error",a(m,e)),M(t,"src",G(t,xt)),M(t,"srcset",G(t,Pt)),N(t,xt),N(t,Pt)}function m(e,t){var n=e[0],i=e[1];K(i.slide,dt),"error"!==t.type&&(X(e[2]),O(n,""),l(_e,n,i),l(be)),u&&v()}function v(){f.length&&g(f.shift())}return{mount:function(){n.lazyLoad&&(h(),r(ye,h))},destroy:a(o,f),check:p}},Pagination:function(e,t,n){var i,s,c=Ie(e),l=c.on,u=c.emit,d=c.bind,f=t.Slides,h=t.Elements,p=t.Controller,g=p.hasFocus,m=p.getIndex,v=p.go,y=t.Direction.resolve,w=h.pagination,b=[];function E(){i&&(X(w?r(i.children):i),K(i,s),o(b),i=null),c.destroy()}function k(e){v(">"+e,!0)}function C(e,t){var n=b.length,i=St(t),o=x(),r=-1;i===y(Fe,!1,o)?r=++e%n:i===y(De,!1,o)?r=(--e+n)%n:"Home"===i?r=0:"End"===i&&(r=n-1);var a=b[r];a&&(B(a.button),v(">"+r),Y(t,!0))}function x(){return n.paginationDirection||n.direction}function P(e){return b[p.toPage(e)]}function L(){var e=P(m(!0)),t=P(m());if(e){var n=e.button;K(n,st),N(n,je),M(n,Oe,-1)}if(t){var o=t.button;S(o,st),M(o,je,!0),M(o,Oe,"")}u("pagination:updated",{list:i,items:b},e,t)}return{items:b,mount:function t(){E(),l([we,ye,Te],t);var o=n.pagination;w&&O(w,o?"":"none"),o&&(l([ge,ke,Se],L),function(){var t=e.length,o=n.classes,r=n.i18n,c=n.perPage,l=g()?p.getEnd()+1:ie(t/c);S(i=w||z("ul",o.pagination,h.track.parentElement),s=at+"--"+x()),M(i,We,"tablist"),M(i,He,r.select),M(i,Ye,x()===Me?"vertical":"");for(var u=0;u<l;u++){var m=z("li",null,i),v=z("button",{class:o.page,type:"button"},m),y=f.getIn(u).map((function(e){return e.slide.id})),E=!g()&&c>1?r.pageX:r.slideX;d(v,"click",a(k,u)),n.paginationKeyboard&&d(v,"keydown",a(C,u)),M(m,We,"presentation"),M(v,We,"tab"),M(v,Be,y.join(" ")),M(v,He,le(E,u+1)),M(v,Oe,-1),b.push({li:m,button:v,page:u})}}(),L(),u("pagination:mounted",{list:i,items:b},P(e.index)))},destroy:E,getAt:P,update:L}},Sync:function(e,t,n){var i=n.isNavigation,r=n.slideFocus,s=[];function c(){var t,n;e.splides.forEach((function(t){t.isParent||(u(e,t.splide),u(t.splide,e))})),i&&((n=(t=Ie(e)).on)(ve,f),n("sk",h),n([he,we],d),s.push(t),t.emit(xe,e.splides))}function l(){s.forEach((function(e){e.destroy()})),o(s)}function u(e,t){var n=Ie(e);n.on(ge,(function(e,n,i){t.go(t.is(wt)?i:e)})),s.push(n)}function d(){M(t.Elements.list,Ye,n.direction===Me?"vertical":"")}function f(t){e.go(t.index)}function h(e,t){b(Lt,St(t))&&(f(e),Y(t))}return{setup:a(t.Media.set,{slideFocus:g(r)?i:r},!0),mount:c,destroy:l,remount:function(){l(),c()}}},Wheel:function(e,t,n){var i=Ie(e).bind,o=0;function r(i){if(i.cancelable){var r=i.deltaY,a=r<0,s=Q(i),c=n.wheelMinThreshold||0,l=n.wheelSleep||0;oe(r)>c&&s-o>l&&(e.go(a?"<":">"),o=s),function(i){return!n.releaseWheel||e.state.is(4)||-1!==t.Controller.getAdjacent(i)}(a)&&Y(i)}}return{mount:function(){n.wheel&&i(t.Elements.track,"wheel",r,Et)}}},Live:function(e,t,n){var i=Ie(e).on,o=t.Elements.track,r=n.live&&!n.isNavigation,s=z("span","splide__sr"),c=Ae(90,a(l,!1));function l(e){M(o,Ke,e),e?(C(o,s),c.start()):(X(s),c.cancel())}function u(e){r&&M(o,qe,e?"off":"polite")}return{mount:function(){r&&(u(!t.Autoplay.isPaused()),M(o,Qe,!0),s.textContent="…",i(Pe,a(u,!0)),i(Le,a(u,!1)),i([me,Se],a(l,!0)))},disable:u,destroy:function(){N(o,[qe,Qe,Ke]),X(s)}}}}),Tt={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:gt,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function It(e,t,n){var i=t.Slides;function o(){i.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){Ie(e).on([he,ye],o)},start:function(e,t){i.style("transition","opacity "+n.speed+"ms "+n.easing),s(t)},cancel:c}}function At(e,t,n){var i,o=t.Move,r=t.Controller,s=t.Scroll,c=t.Elements.list,l=a(W,c,"transition");function u(){l(""),s.cancel()}return{mount:function(){Ie(e).bind(c,"transitionend",(function(e){e.target===c&&i&&(u(),i())}))},start:function(t,a){var c=o.toPosition(t,!0),u=o.getPosition(),d=function(t){var i=n.rewindSpeed;if(e.is(yt)&&i){var o=r.getIndex(!0),a=r.getEnd();if(0===o&&t>=a||o>=a&&0===t)return i}return n.speed}(t);oe(c-u)>=1&&d>=1?n.useScroll?s.scroll(c,d,!1,a):(l("transform "+d+"ms "+n.easing),o.translate(c,!0),i=a):(o.jump(t),a())},cancel:u}}var Dt=function(){function e(t,n){var i;this.event=Ie(),this.Components={},this.state=(i=1,{set:function(e){i=e},is:function(e){return b(y(e),i)}}),this.splides=[],this._o={},this._E={};var o=p(t)?J(document,t):t;Z(o,o+" is invalid."),this.root=o,n=F({label:G(o,He)||"",labelledby:G(o,Xe)||""},Tt,e.defaults,n||{});try{F(n,JSON.parse(G(o,"data-splide")))}catch(e){Z(!1,"Invalid JSON")}this._o=Object.create(F({},n))}var t,i,a=e.prototype;return a.mount=function(e,t){var n=this,i=this.state,o=this.Components;return Z(i.is([1,7]),"Already mounted!"),i.set(1),this._C=o,this._T=t||this._T||(this.is(bt)?It:At),this._E=e||this._E,A(D({},_t,this._E,{Transition:this._T}),(function(e,t){var i=e(n,o,n._o);o[t]=i,i.setup&&i.setup()})),A(o,(function(e){e.mount&&e.mount()})),this.emit(he),S(this.root,"is-initialized"),i.set(3),this.emit(pe),this},a.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},a.go=function(e){return this._C.Controller.go(e),this},a.on=function(e,t){return this.event.on(e,t),this},a.off=function(e){return this.event.off(e),this},a.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(r(arguments,1))),this},a.add=function(e,t){return this._C.Slides.add(e,t),this},a.remove=function(e){return this._C.Slides.remove(e),this},a.is=function(e){return this._o.type===e},a.refresh=function(){return this.emit(ye),this},a.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?Ie(this).on(pe,this.destroy.bind(this,e)):(A(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Ce),t.destroy(),e&&o(this.splides),n.set(7)),this},t=e,(i=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&n(t.prototype,i),Object.defineProperty(t,"prototype",{writable:!1}),e}();Dt.defaults={},Dt.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};class Ft{constructor(e,t){this.emptyGlowImageTag="empty_glow_image",this.imagesPath=e,this.audioPath=t,this.currentPage=0,this.splideHandle=new Dt(".splide",{fixedHeight:window.innerHeight-20}).mount(),this.splideHandle.on("move",((e,t,n)=>{this.transitioningToPage=!0,this.stopPageAudio(this.book.pages[t])})),this.splideHandle.on("moved",((e,t,n)=>{this.currentPage=e,this.transitioningToPage=!1,this.playPageAudio(this.book.pages[e])})),this.addPageResizeListener()}stopPageAudio(e){for(let t=0;t<e.visualElements.length;t++){let n=e.visualElements[t];if("audio"===n.type){let e=n,t=document.getElementById(e.domID);t.pause(),t.currentTime=0,clearInterval(this.currentPageAutoPlayerInterval);for(let t=0;t<e.audioTimestamps.timestamps.length;t++)document.getElementById(e.domID+"_word_"+t).classList.remove("cr-clickable-word-active")}}}playPageAudio(e){for(let t=0;t<e.visualElements.length;t++){let n=e.visualElements[t];if("audio"===n.type){let e=n,t=document.getElementById(e.domID);t.play();let i=0,o=0;this.currentPageAutoPlayerInterval=setInterval((()=>{if(void 0!==e.audioTimestamps){let n=t.currentTime;for(let t=0;t<e.audioTimestamps.timestamps.length;t++){if(n>=e.audioTimestamps.timestamps[t].startTimestamp&&n<=e.audioTimestamps.timestamps[t].endTimestamp){o=t;let n=document.getElementById(e.domID+"_word_"+o);n.classList.add("cr-clickable-word-active"),n.style.color=e.glowColor}if(i<o){let t=document.getElementById(e.domID+"_word_"+i);t.classList.remove("cr-clickable-word-active"),t.style.color="white",i=o}}if(n>=e.audioTimestamps.timestamps[e.audioTimestamps.timestamps.length-1].endTimestamp-.1){let t=document.getElementById(e.domID+"_word_"+o);t.classList.remove("cr-clickable-word-active"),t.style.color="white",clearInterval(this.currentPageAutoPlayerInterval)}}}),60)}}}addPageResizeListener(){window.addEventListener("resize",(()=>{this.splideHandle.options.fixedHeight=window.innerHeight-20,this.splideHandle.refresh()}))}initializeBook(t){this.book=t,this.currentBookType=t.bookType,this.numberOfPages=t.pages.length,this.currentBookType===e.CuriousReader?this.initializeCuriousReaderBook(t):this.currentBookType===e.GDL&&this.initializeGDLBook(t)}initializeCuriousReaderBook(e){this.numberOfPages=e.pages.length;for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");let i=!1;for(let o=0;o<e.pages[t].visualElements.length;o++){let r=e.pages[t].visualElements[o];if("image"==r.type){let e=r,i=t;n.appendChild(this.createImageContainer(i,e))}else if("audio"==r.type){i=!0;let o=r,a=null;for(let n=0;n<e.pages[t].visualElements.length;n++){let i=e.pages[t].visualElements[n];if("text"==i.type){a=i;break}}if(a){let e=this.createAudioAndTextContainers(t,o,a);n.appendChild(e[0]),n.appendChild(e[1])}else n.appendChild(this.createAudioContainer(o))}this.splideHandle.add(n)}if(!i)for(let i=0;i<e.pages[t].visualElements.length;i++){let o=e.pages[t].visualElements[i];if("text"==o.type){let e=o;n.appendChild(this.createTextContainer(e))}}}}createTextContainer(e){let t=document.createElement("div");return t.id="cr-text",t.classList.add("cr-text"),t.style.position="absolute",t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.style.top=e.positionY+"%",t.style.left=e.positionX+"%",t.style.width=e.width+"%",t.style.height=e.height+"%",t.innerHTML=e.textContentAsHTML,t}createImageContainer(e,t){let n=document.createElement("div");if(n.style.position="absolute",n.style.top=t.positionY+"%",n.style.left=t.positionX+"%",n.style.width=t.width+"%",n.style.height=t.height+"%",t.imageSource===this.emptyGlowImageTag)n.classList.add("cr-image-empty-glow"),n.classList.add(t.domID),n.addEventListener("click",(()=>{this.handleGlowImageClick(e,t.domID.split("_")[1])}));else{n.id=t.domID,n.classList.add("cr-image");let e=document.createElement("img");e.src=this.imagesPath+t.imageSource.replace("images/",""),e.style.width="100%",e.style.height="100%",n.appendChild(e)}return n}createAudioContainer(e){let t=document.createElement("div");t.classList.add("cr-audio"),t.style.position="absolute";let n=document.createElement("audio");if(n.id=e.domID,n.src=this.audioPath+e.audioSrc.replace("audios/",""),n.controls=!1,t.appendChild(n),void 0!==e.audioTimestamps)for(let n=0;n<e.audioTimestamps.timestamps.length;n++){let i=e.audioTimestamps.timestamps[n],o=document.createElement("audio");o.id=i.domID,o.src=this.audioPath+i.audioSrc.replace("audios/",""),o.controls=!1,t.appendChild(o)}return t}createAudioAndTextContainers(e,t,n){let i=Array(),o=document.createElement("div");o.classList.add("cr-audio"),o.style.position="absolute";let r=document.createElement("audio");r.id=t.domID,r.src=this.audioPath+t.audioSrc.replace("audios/",""),r.controls=!1,o.appendChild(r);let a=Array();if(void 0!==t.audioTimestamps)for(let e=0;e<t.audioTimestamps.timestamps.length;e++){let n=t.audioTimestamps.timestamps[e],i=document.createElement("audio");i.id=n.domID,i.src=this.audioPath+n.audioSrc.replace("audios/",""),i.controls=!1,a.push(n.word.trim()),o.appendChild(i)}i.push(o);let s=t.domID,c=document.createElement("div");c.id="cr-text",c.classList.add("cr-text"),c.style.position="absolute",c.style.webkitTextStroke="1px #303030",c.style.color="#FFFFFF",c.style.textShadow="0.1rem 0.15rem 0.1rem #303030",c.style.fontFamily="Quicksand",c.style.fontWeight="800",c.style.fontSize="1.7em",c.style.top=n.positionY+"%",c.style.left=n.positionX+"%",c.style.width=n.width+"%",c.style.height=n.height+"%";let l=document.createElement("p");l.style.textAlign="center",l.style.fontSize="1.75em";for(let t=0;t<a.length;t++){let n=document.createElement("div");n.id=s+"_word_"+t,n.classList.add("cr-clickable-word"),n.style.margin="10px",n.innerText=a[t],n.addEventListener("click",(n=>{this.handleInteractiveWordClick(e,t)})),l.appendChild(n)}return c.appendChild(l),i.push(c),i}handleGlowImageClick(e,t){let n=parseInt(t);this.handleInteractiveWordClick(e,n)}handleInteractiveWordClick(e,t){let n=this.book.pages[e];for(let e=0;e<n.visualElements.length;e++){let i=n.visualElements[e];if("audio"===i.type){let e=i,n=document.getElementById(e.audioTimestamps.timestamps[t].domID),o=document.getElementById(e.domID+"_word_"+t);o.classList.add("cr-clickable-word-active"),o.style.color=e.glowColor;let r="img"+e.domID+"_"+t,a=document.getElementsByClassName(r);for(let t=0;t<a.length;t++)a[t].style.boxShadow=e.glowColor+" 0px 0px 20px 20px";setTimeout((()=>{o.classList.remove("cr-clickable-word-active"),o.style.color="white";for(let e=0;e<a.length;e++)a[e].style.boxShadow="transparent 0px 0px 20px 20px"}),600),n.play()}}}initializeGDLBook(e){for(let t=0;t<e.pages.length;t++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<e.pages[t].visualElements.length;n++){let o=e.pages[t].visualElements[n];if("text"==o.type){let e=o,t=document.createElement("div");t.style.width="60%",t.classList.add("gdl-text"),t.style.webkitTextStroke="1px #303030",t.style.color="#FFFFFF",t.style.textShadow="0.1rem 0.15rem 0.1rem #303030",t.style.fontFamily="Quicksand",t.style.fontWeight="800",t.style.fontSize="1.7em",t.innerHTML=e.textContentAsHTML,i.appendChild(t)}else if("image"==o.type){let e=o,t=document.createElement("div");t.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+e.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",t.appendChild(n),i.appendChild(t)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(e){this.transitioningToPage=!0}}try{self["workbox:window:6.5.3"]&&_()}catch(Rt){}function Rt(e,t){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(e){n(e.data)},e.postMessage(t,[i.port2])}))}function Nt(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function Mt(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Nt(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nt(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var i=0;return function(){return i>=e.length?{done:!0}:{done:!1,value:e[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:6.5.3"]&&_()}catch(Rt){}var zt=function(){var e=this;this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))};function Wt(e,t){var n=location.href;return new URL(e,n).href===new URL(t,n).href}var Ot=function(e,t){this.type=e,Object.assign(this,t)};function Bt(e,t,n){return n?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function Gt(){}var jt={type:"SKIP_WAITING"};function Ht(e,t){if(!t)return e&&e.then?e.then(Gt):Promise.resolve()}var Xt=function(e){var t,n;function i(t,n){var i,o;return void 0===n&&(n={}),(i=e.call(this)||this).nn={},i.tn=0,i.rn=new zt,i.en=new zt,i.on=new zt,i.un=0,i.an=new Set,i.cn=function(){var e=i.fn,t=e.installing;i.tn>0||!Wt(t.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=t,e.removeEventListener("updatefound",i.cn)):(i.hn=t,i.an.add(t),i.rn.resolve(t)),++i.tn,t.addEventListener("statechange",i.ln)},i.ln=function(e){var t=i.fn,n=e.target,o=n.state,r=n===i.vn,a={sw:n,isExternal:r,originalEvent:e};!r&&i.mn&&(a.isUpdate=!0),i.dispatchEvent(new Ot(o,a)),"installed"===o?i.wn=self.setTimeout((function(){"installed"===o&&t.waiting===n&&i.dispatchEvent(new Ot("waiting",a))}),200):"activating"===o&&(clearTimeout(i.wn),r||i.en.resolve(n))},i.dn=function(e){var t=i.hn,n=t!==navigator.serviceWorker.controller;i.dispatchEvent(new Ot("controlling",{isExternal:n,originalEvent:e,sw:t,isUpdate:i.mn})),n||i.on.resolve(t)},i.gn=(o=function(e){var t=e.data,n=e.ports,o=e.source;return Bt(i.getSW(),(function(){i.an.has(o)&&i.dispatchEvent(new Ot("message",{data:t,originalEvent:e,ports:n,sw:o}))}))},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{return Promise.resolve(o.apply(this,e))}catch(e){return Promise.reject(e)}}),i.sn=t,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o,r=i.prototype;return r.register=function(e){var t=(void 0===e?{}:e).immediate,n=void 0!==t&&t;try{var i=this;return function(e,t){var n=e();return n&&n.then?n.then(t):t()}((function(){if(!n&&"complete"!==document.readyState)return Ht(new Promise((function(e){return window.addEventListener("load",e)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),Bt(i.bn(),(function(e){i.fn=e,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var t=i.fn.waiting;return t&&Wt(t.scriptURL,i.sn.toString())&&(i.hn=t,Promise.resolve().then((function(){i.dispatchEvent(new Ot("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(e){return Promise.reject(e)}},r.update=function(){try{return this.fn?Ht(this.fn.update()):void 0}catch(e){return Promise.reject(e)}},r.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},r.messageSW=function(e){try{return Bt(this.getSW(),(function(t){return Rt(t,e)}))}catch(e){return Promise.reject(e)}},r.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Rt(this.fn.waiting,jt)},r.pn=function(){var e=navigator.serviceWorker.controller;return e&&Wt(e.scriptURL,this.sn.toString())?e:void 0},r.bn=function(){try{var e=this;return function(e,t){try{var n=e()}catch(e){return t(e)}return n&&n.then?n.then(void 0,t):n}((function(){return Bt(navigator.serviceWorker.register(e.sn,e.nn),(function(t){return e.un=performance.now(),t}))}),(function(e){throw e}))}catch(e){return Promise.reject(e)}},(o=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(i.prototype,o),i}(function(){function e(){this.Pn=new Map}var t=e.prototype;return t.addEventListener=function(e,t){this.Sn(e).add(t)},t.removeEventListener=function(e,t){this.Sn(e).delete(t)},t.dispatchEvent=function(e){e.target=this;for(var t,n=Mt(this.Sn(e.type));!(t=n()).done;)(0,t.value)(e)},t.Sn=function(e){return this.Pn.has(e)||this.Pn.set(e,new Set),this.Pn.get(e)},e}());let Ut=new class{constructor(e,n,i,o){this.cachedLanguages=new Map,this.lang="english",this.isCached="is_cached",this.bookName=e,this.contentFilePath=n,this.imagesPath=i,this.audioPath=o,this.contentParser=new t(n),this.playBackEngine=new Ft(i,o),this.broadcastChannel=new BroadcastChannel("cr-message-channel"),null==localStorage.getItem(this.isCached)||localStorage.getItem(this.isCached)}async initialize(){let e=await this.contentParser.parseBook();e.bookName=this.bookName,console.log("Dev App initialized!"),console.log(e),this.enforceLandscapeMode(),console.log("Adding a load event listener!"),window.addEventListener("load",(async()=>{await this.registerServiceWorker(e)})),this.playBackEngine.initializeBook(e)}async registerServiceWorker(e){console.log("Registering Service Worker!"),"serviceWorker"in navigator?(new Xt("/sw.js",{}).register().then((e=>{this.handleServiceWorkerRegistration(e)})).catch((e=>{console.error(e)})),await navigator.serviceWorker.ready,this.broadcastChannel.onmessage=t=>{console.log("CRapp: Message Received!"),console.log(t.data.command),"Activated"==t.data.command&&this.broadcastChannel.postMessage({command:"Cache",data:{lang:this.lang,bookData:e,contentFile:this.contentFilePath}})},navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)):console.warn("Service Worker not supported!")}handleServiceWorkerRegistration(e){var t;try{null===(t=null==e?void 0:e.installing)||void 0===t||t.postMessage({type:"Registartion",value:this.lang})}catch(e){console.error("CRapp: Service Worker Registration Failed!",e)}}handleServiceWorkerMessage(e){"Recache"==e.data.msg?console.log("CRapp: Recache Message Received!"):"Loading"==e.data.msg?(console.log("CRapp: Loading Message Received!"),console.log(e.data)):"Update Found"==e.data.msg&&console.log("CRapp: Update Found Message Received!")}readLanguageDataFromCacheAndNotifyAndroidApp(){window.Android&&window.Android.cachedStatus(!0)}enforceLandscapeMode(){try{screen.orientation&&screen.orientation.lock&&screen.orientation.lock("landscape").then((()=>{console.log("Screen orientation locked to landscape!")})).catch((e=>{console.log("Screen orientation lock failed! Interface may not work as expected on mobile devices!")}))}catch(e){console.warn("Screen orientation lock not supported! Interface may not work as expected on mobile devices!")}}}("LetsFlyLevel2En","/BookContent/LetsFlyLevel2En/content/content.json","/BookContent/LetsFlyLevel2En/content/images/","/BookContent/LetsFlyLevel2En/content/audios/");(async()=>{await Ut.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S0FBS3c2QixLQUNYYyxTQUFVNTZCLEVBQ1Y2NkIsWUFBYXY3QixLQUFLRixvQkFNbENpNUIsVUFBVUMsY0FBY3hwQixpQkFBaUIsVUFBV3hQLEtBQUt3N0IsNkJBRXpEaDdCLFFBQVFpN0IsS0FBSyxnQ0FFckIsQ0FFQU4sZ0NBQWdDTyxTQUM1QixJQUM0QixRQUF4QixFQUFBQSxhQUFZLEVBQVpBLEVBQWMzRCxrQkFBVSxTQUFFM0IsWUFBWSxDQUNsQ3R6QixLQUFNLGVBQ040RSxNQUFPMUgsS0FBS3c2QixPQUVsQixNQUFPdjVCLEdBQ0xULFFBQVFTLE1BQU0sNkNBQThDQSxHQUVwRSxDQUVBdTZCLDJCQUEyQnJzQixHQUNELFdBQWxCQSxFQUFNZ0IsS0FBS3dyQixJQUNYbjdCLFFBQVFDLElBQUksb0NBRVksV0FBbEIwTyxFQUFNZ0IsS0FBS3dyQixLQUNqQm43QixRQUFRQyxJQUFJLG9DQUNaRCxRQUFRQyxJQUFJME8sRUFBTWdCLE9BRU0sZ0JBQWxCaEIsRUFBTWdCLEtBQUt3ckIsS0FDakJuN0IsUUFBUUMsSUFBSSx3Q0FHcEIsQ0FFQW03QiwrQ0FFUXQwQixPQUFPdTBCLFNBR1B2MEIsT0FBT3UwQixRQUFRQyxjQUFhLEVBRXBDLENBRUFiLHVCQUNJLElBQ1FjLE9BQU9DLGFBQWVELE9BQU9DLFlBQVlDLE1BQ3pDRixPQUFPQyxZQUFZQyxLQUFLLGFBQWEzN0IsTUFBSyxLQUN0Q0UsUUFBUUMsSUFBSSwwQ0FBMEMsSUFDdkRPLE9BQU9DLElBQ05ULFFBQVFDLElBQUksd0ZBQXdGLElBRzlHLE1BQU9RLEdBQ0xULFFBQVFpN0IsS0FBSyxnR0FFckIsR0FNbUIsa0JBQW1CLG9EQUN0QywrQ0FDQSxnREFRSixpQkFDVW5CLEdBQUk0QixZQUNiLEVBRkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9Nb2RlbHMvQm9vay50cyIsIndlYnBhY2s6Ly8vLi9QYXJzZXIvQ29udGVudFBhcnNlci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHNwbGlkZWpzL3NwbGlkZS9kaXN0L2pzL3NwbGlkZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vUGxheUJhY2tFbmdpbmUvUGxheUJhY2tFbmdpbmUudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dvcmtib3gtd2luZG93L2J1aWxkL3dvcmtib3gtd2luZG93LnByb2QuZXM1Lm1qcyIsIndlYnBhY2s6Ly8vLi9BcHAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gUGFnZSB0eXBlIHRoYXQgZGVcclxuXHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tIFwiLi9QYWdlXCI7XHJcblxyXG5leHBvcnQgZW51bSBCb29rVHlwZSB7XHJcbiAgICBDdXJpb3VzUmVhZGVyID0gXCJDdXJpb3VzUmVhZGVyXCIsXHJcbiAgICBHREwgPSBcIkdETFwiLFxyXG4gICAgVW5rbm93biA9IFwiVW5rbm93blwiLFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBCb29rID0ge1xyXG4gICAgYm9va05hbWU6IHN0cmluZztcclxuICAgIHBhZ2VzOiBQYWdlW107XHJcbiAgICBib29rVHlwZTogQm9va1R5cGU7XHJcbn0iLCJpbXBvcnQge1xuICAgIEJvb2ssXG4gICAgQm9va1R5cGUsXG4gICAgUGFnZSxcbiAgICBUZXh0RWxlbWVudCxcbiAgICBJbWFnZUVsZW1lbnQsXG4gICAgQXVkaW9FbGVtZW50LFxuICAgIEF1ZGlvVGltZXN0YW1wcyxcbiAgICBXb3JkVGltZXN0YW1wRWxlbWVudCxcbn0gZnJvbSBcIi4uL01vZGVscy9Nb2RlbHNcIjtcblxuZXhwb3J0IGNsYXNzIENvbnRlbnRQYXJzZXIge1xuICAgIGltYWdlc1BhdGg6IHN0cmluZztcbiAgICBhdWRpb1BhdGg6IHN0cmluZztcbiAgICBjb250ZW50RmlsZVBhdGg6IHN0cmluZztcblxuICAgIGNvbnRlbnRKU09OOiBhbnk7XG5cbiAgICBlbXB0eUdsb3dJbWFnZVRhZzogc3RyaW5nID0gXCJlbXB0eV9nbG93X2ltYWdlXCI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50RmlsZVBhdGg6IHN0cmluZykge1xuICAgICAgICB0aGlzLmNvbnRlbnRGaWxlUGF0aCA9IGNvbnRlbnRGaWxlUGF0aDtcbiAgICB9XG5cbiAgICBhc3luYyBwYXJzZUJvb2soKTogUHJvbWlzZTxCb29rPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlQ29udGVudEpTT05GaWxlKClcbiAgICAgICAgICAgICAgICAudGhlbigoY29udGVudEpTT04pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50SlNPTiA9IGNvbnRlbnRKU09OO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbnRlbnQgSlNPTiBmaWxlIHBhcnNlZCFcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29udGVudEpTT04pO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBib29rOiBCb29rID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9va05hbWU6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlczogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBib29rVHlwZTogdGhpcy5kZXRlcm1pbmVCb29rVHlwZSgpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGJvb2sucGFnZXMgPSB0aGlzLnBhcnNlUGFnZXMoYm9vayk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShib29rKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGV0ZXJtaW5lQm9va1R5cGUoKTogQm9va1R5cGUge1xuICAgICAgICBpZiAodGhpcy5jb250ZW50SlNPTltcInByZXNlbnRhdGlvblwiXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gQm9va1R5cGUuQ3VyaW91c1JlYWRlcjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnRlbnRKU09OW1wiY2hhcHRlcnNcIl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIEJvb2tUeXBlLkdETDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBCb29rVHlwZS5Vbmtub3duO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2VQYWdlcyhib29rOiBCb29rKTogUGFnZVtdIHtcbiAgICAgICAgbGV0IHBhZ2VzOiBQYWdlW10gPSBbXTtcblxuICAgICAgICBpZiAoYm9vay5ib29rVHlwZSA9PT0gQm9va1R5cGUuQ3VyaW91c1JlYWRlcikge1xuICAgICAgICAgICAgbGV0IHBhZ2VzSlNPTiA9IHRoaXMuY29udGVudEpTT05bXCJwcmVzZW50YXRpb25cIl1bXCJzbGlkZXNcIl07XG4gICAgICAgICAgICBsZXQgZ2xvYmFsRmlsbENvbG9yID1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRKU09OW1wicHJlc2VudGF0aW9uXCJdW1wiZ2xvYmFsQmFja2dyb3VuZFNlbGVjdG9yXCJdW1xuICAgICAgICAgICAgICAgIFwiZmlsbEdsb2JhbEJhY2tncm91bmRcIlxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzSlNPTi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwYWdlSlNPTiA9IHBhZ2VzSlNPTltpXTtcbiAgICAgICAgICAgICAgICBsZXQgcGFnZTogUGFnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdsb2JhbEZpbGxDb2xvcixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHBhZ2UudmlzdWFsRWxlbWVudHMgPSB0aGlzLnBhcnNlUGFnZUNSKHBhZ2VKU09OKTtcbiAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGJvb2suYm9va1R5cGUgPT09IEJvb2tUeXBlLkdETCkge1xuICAgICAgICAgICAgbGV0IHBhZ2VzSlNPTiA9IHRoaXMuY29udGVudEpTT05bXCJjaGFwdGVyc1wiXTtcbiAgICAgICAgICAgIGxldCBnbG9iYWxGaWxsQ29sb3IgPSBcIiNGQ0ZDRjJcIjtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZXNKU09OLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhZ2VKU09OID0gcGFnZXNKU09OW2ldO1xuICAgICAgICAgICAgICAgIGxldCBwYWdlOiBQYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ2xvYmFsRmlsbENvbG9yLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGFnZS52aXN1YWxFbGVtZW50cyA9IHRoaXMucGFyc2VQYWdlR0RMKHBhZ2VKU09OKTtcbiAgICAgICAgICAgICAgICBwYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJVbmtub3duIGJvb2sgdHlwZSFcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXM7XG4gICAgfVxuXG4gICAgcGFyc2VQYWdlQ1IocGFnZUpTT046IGFueSk6IGFueVtdIHtcbiAgICAgICAgbGV0IHZpc3VhbEVsZW1lbnRzOiBhbnlbXSA9IFtdO1xuICAgICAgICBsZXQgZWxlbWVudHNKU09OID0gcGFnZUpTT05bXCJlbGVtZW50c1wiXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50c0pTT04ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsaWJyYXJ5U3RyaW5nOiBzdHJpbmcgPSBlbGVtZW50c0pTT05baV1bXCJhY3Rpb25cIl1bXCJsaWJyYXJ5XCJdO1xuICAgICAgICAgICAgaWYgKGxpYnJhcnlTdHJpbmcuaW5jbHVkZXMoXCJBZHZhbmNlZFRleHRcIikpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGV4dEVsZW1lbnQ6IFRleHRFbGVtZW50ID0gdGhpcy5wYXJzZVRleHRFbGVtZW50Q1IoZWxlbWVudHNKU09OW2ldKTtcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50cy5wdXNoKHRleHRFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlicmFyeVN0cmluZy5pbmNsdWRlcyhcIkltYWdlXCIpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGltYWdlRWxlbWVudDogSW1hZ2VFbGVtZW50ID0gdGhpcy5wYXJzZUltYWdlRWxlbWVudENSKFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0pTT05baV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnRzLnB1c2goaW1hZ2VFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlicmFyeVN0cmluZy5pbmNsdWRlcyhcIkF1ZGlvXCIpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGF1ZGlvRWxlbWVudDogQXVkaW9FbGVtZW50ID0gdGhpcy5wYXJzZUF1ZGlvRWxlbWVudENSKFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0pTT05baV1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHZpc3VhbEVsZW1lbnRzLnB1c2goYXVkaW9FbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aXN1YWxFbGVtZW50cztcbiAgICB9XG5cbiAgICBwYXJzZVBhZ2VHREwocGFnZUpTT046IGFueSk6IGFueVtdIHtcbiAgICAgICAgbGV0IHZpc3VhbEVsZW1lbnRzOiBhbnlbXSA9IFtdO1xuICAgICAgICBsZXQgZWxlbWVudHNKU09OQXJyYXkgPSBwYWdlSlNPTltcInBhcmFtc1wiXVtcImNvbnRlbnRcIl07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50c0pTT05BcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGxpYnJhcnlTdHJpbmc6IHN0cmluZyA9IGVsZW1lbnRzSlNPTkFycmF5W2ldW1wiY29udGVudFwiXVtcImxpYnJhcnlcIl07XG4gICAgICAgICAgICBpZiAobGlicmFyeVN0cmluZy5pbmNsdWRlcyhcIkFkdmFuY2VkVGV4dFwiKSkge1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0RWxlbWVudDogVGV4dEVsZW1lbnQgPSB0aGlzLnBhcnNlVGV4dEVsZW1lbnRHREwoXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzSlNPTkFycmF5W2ldW1wiY29udGVudFwiXVtcInBhcmFtc1wiXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudHMucHVzaCh0ZXh0RWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpYnJhcnlTdHJpbmcuaW5jbHVkZXMoXCJJbWFnZVwiKSkge1xuICAgICAgICAgICAgICAgIGxldCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCA9IHRoaXMucGFyc2VJbWFnZUVsZW1lbnRHREwoXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzSlNPTkFycmF5W2ldW1wiY29udGVudFwiXVtcInBhcmFtc1wiXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudHMucHVzaChpbWFnZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpc3VhbEVsZW1lbnRzO1xuICAgIH1cblxuICAgIHBhcnNlVGV4dEVsZW1lbnRDUihlbGVtZW50SlNPTjogYW55KTogVGV4dEVsZW1lbnQge1xuICAgICAgICBsZXQgdGV4dEVsZW1lbnQ6IFRleHRFbGVtZW50ID0ge1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBwb3NpdGlvblg6IGVsZW1lbnRKU09OW1wieFwiXSxcbiAgICAgICAgICAgIHBvc2l0aW9uWTogZWxlbWVudEpTT05bXCJ5XCJdLFxuICAgICAgICAgICAgd2lkdGg6IGVsZW1lbnRKU09OW1wid2lkdGhcIl0sXG4gICAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnRKU09OW1wiaGVpZ2h0XCJdLFxuICAgICAgICAgICAgdGV4dENvbnRlbnRBc0hUTUw6IGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wicGFyYW1zXCJdW1widGV4dFwiXSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGV4dEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcGFyc2VUZXh0RWxlbWVudEdETChlbGVtZW50SlNPTjogYW55KTogVGV4dEVsZW1lbnQge1xuICAgICAgICBsZXQgdGV4dEVsZW1lbnQ6IFRleHRFbGVtZW50ID0ge1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBwb3NpdGlvblg6IE5hTixcbiAgICAgICAgICAgIHBvc2l0aW9uWTogTmFOLFxuICAgICAgICAgICAgd2lkdGg6IE5hTixcbiAgICAgICAgICAgIGhlaWdodDogTmFOLFxuICAgICAgICAgICAgdGV4dENvbnRlbnRBc0hUTUw6IGVsZW1lbnRKU09OW1widGV4dFwiXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRleHRFbGVtZW50O1xuICAgIH1cblxuICAgIHBhcnNlSW1hZ2VFbGVtZW50Q1IoZWxlbWVudEpTT046IGFueSk6IEltYWdlRWxlbWVudCB7XG4gICAgICAgIGxldCBwYXRoOiBzdHJpbmcgPSBcIlwiO1xuICAgICAgICBpZiAoZWxlbWVudEpTT05bXCJhY3Rpb25cIl1bXCJwYXJhbXNcIl1bXCJmaWxlXCJdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhdGggPSB0aGlzLmVtcHR5R2xvd0ltYWdlVGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGF0aCA9IGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wicGFyYW1zXCJdW1wiZmlsZVwiXVtcInBhdGhcIl07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGltYWdlRWxlbWVudDogSW1hZ2VFbGVtZW50ID0ge1xuICAgICAgICAgICAgZG9tSUQ6XG4gICAgICAgICAgICAgICAgcGF0aCA9PT0gdGhpcy5lbXB0eUdsb3dJbWFnZVRhZ1xuICAgICAgICAgICAgICAgICAgICA/IGVsZW1lbnRKU09OW1wiaWRcIl1cbiAgICAgICAgICAgICAgICAgICAgOiBlbGVtZW50SlNPTltcImFjdGlvblwiXVtcInN1YkNvbnRlbnRJZFwiXSxcbiAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgIHBvc2l0aW9uWDogZWxlbWVudEpTT05bXCJ4XCJdLFxuICAgICAgICAgICAgcG9zaXRpb25ZOiBlbGVtZW50SlNPTltcInlcIl0sXG4gICAgICAgICAgICB3aWR0aDogZWxlbWVudEpTT05bXCJ3aWR0aFwiXSxcbiAgICAgICAgICAgIGhlaWdodDogZWxlbWVudEpTT05bXCJoZWlnaHRcIl0sXG4gICAgICAgICAgICBpbWFnZVNvdXJjZTogcGF0aCxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gaW1hZ2VFbGVtZW50O1xuICAgIH1cblxuICAgIHBhcnNlSW1hZ2VFbGVtZW50R0RMKGVsZW1lbnRKU09OOiBhbnkpOiBJbWFnZUVsZW1lbnQge1xuICAgICAgICBsZXQgaW1hZ2VFbGVtZW50OiBJbWFnZUVsZW1lbnQgPSB7XG4gICAgICAgICAgICBkb21JRDogXCJcIixcbiAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgIHBvc2l0aW9uWDogTmFOLFxuICAgICAgICAgICAgcG9zaXRpb25ZOiBOYU4sXG4gICAgICAgICAgICB3aWR0aDogZWxlbWVudEpTT05bXCJ3aWR0aFwiXSxcbiAgICAgICAgICAgIGhlaWdodDogZWxlbWVudEpTT05bXCJoZWlnaHRcIl0sXG4gICAgICAgICAgICBpbWFnZVNvdXJjZTogZWxlbWVudEpTT05bXCJmaWxlXCJdW1wicGF0aFwiXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGltYWdlRWxlbWVudDtcbiAgICB9XG5cbiAgICBwYXJzZUF1ZGlvRWxlbWVudENSKGVsZW1lbnRKU09OOiBhbnkpOiBBdWRpb0VsZW1lbnQge1xuICAgICAgICBsZXQgYXVkaW9UaW1lc3RhbXBzOiBBdWRpb1RpbWVzdGFtcHMgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHRpbWVzdGFtcHNKU09OQXJyYXkgPVxuICAgICAgICAgICAgZWxlbWVudEpTT05bXCJhY3Rpb25cIl1bXCJwYXJhbXNcIl1bXCJ0aW1lU3RhbXBGb3JFYWNoVGV4dFwiXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aW1lc3RhbXBzSlNPTkFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdGltZXN0YW1wSW5kZXggPSBpO1xuICAgICAgICAgICAgbGV0IHRpbWVzdGFtcEpTT04gPSB0aW1lc3RhbXBzSlNPTkFycmF5W2ldO1xuICAgICAgICAgICAgbGV0IHRpbWVzdGFtcDogV29yZFRpbWVzdGFtcEVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgZG9tSUQ6XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wic3ViQ29udGVudElkXCJdICtcbiAgICAgICAgICAgICAgICAgICAgXCJfXCIgK1xuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXBJbmRleC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHdvcmQ6IHRpbWVzdGFtcEpTT05bXCJ0ZXh0XCJdLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiB0aW1lc3RhbXBKU09OW1wic3RhcnREdXJhdGlvblwiXSxcbiAgICAgICAgICAgICAgICBlbmRUaW1lc3RhbXA6IHRpbWVzdGFtcEpTT05bXCJlbmREdXJhdGlvblwiXSxcbiAgICAgICAgICAgICAgICBhdWRpb1NyYzogdGltZXN0YW1wSlNPTltcIndvcmRmaWxlXCJdWzBdW1wicGF0aFwiXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhdWRpb1RpbWVzdGFtcHMudGltZXN0YW1wcy5wdXNoKHRpbWVzdGFtcCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGF1ZGlvRWxlbWVudDogQXVkaW9FbGVtZW50ID0ge1xuICAgICAgICAgICAgZG9tSUQ6IGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wic3ViQ29udGVudElkXCJdLFxuICAgICAgICAgICAgdHlwZTogXCJhdWRpb1wiLFxuICAgICAgICAgICAgcG9zaXRpb25YOiBlbGVtZW50SlNPTltcInhcIl0sXG4gICAgICAgICAgICBwb3NpdGlvblk6IGVsZW1lbnRKU09OW1wieVwiXSxcbiAgICAgICAgICAgIHdpZHRoOiBlbGVtZW50SlNPTltcIndpZHRoXCJdLFxuICAgICAgICAgICAgaGVpZ2h0OiBlbGVtZW50SlNPTltcImhlaWdodFwiXSxcbiAgICAgICAgICAgIGdsb3dDb2xvcjogZWxlbWVudEpTT05bXCJhY3Rpb25cIl1bXCJwYXJhbXNcIl1bXCJnbG93Q29sb3JcIl0sXG4gICAgICAgICAgICBhdWRpb1NyYzogZWxlbWVudEpTT05bXCJhY3Rpb25cIl1bXCJwYXJhbXNcIl1bXCJmaWxlc1wiXVswXVtcInBhdGhcIl0sXG4gICAgICAgICAgICBhdWRpb1RpbWVzdGFtcHM6IGF1ZGlvVGltZXN0YW1wcyxcbiAgICAgICAgICAgIHN0eWxlczogXCJcIixcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gYXVkaW9FbGVtZW50O1xuICAgIH1cblxuICAgIGFzeW5jIHBhcnNlQ29udGVudEpTT05GaWxlKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB0aGlzLmNvbnRlbnRGaWxlUGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJqc29uXCI7XG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxldCBzdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNwb25zZVtcImwxMG5cIl07XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNwb25zZVtcIm92ZXJyaWRlXCJdO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG4vKiFcbiAqIFNwbGlkZS5qc1xuICogVmVyc2lvbiAgOiA0LjEuNFxuICogTGljZW5zZSAgOiBNSVRcbiAqIENvcHlyaWdodDogMjAyMiBOYW90b3NoaSBGdWppdGFcbiAqL1xudmFyIE1FRElBX1BSRUZFUlNfUkVEVUNFRF9NT1RJT04gPSBcIihwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2UpXCI7XG52YXIgQ1JFQVRFRCA9IDE7XG52YXIgTU9VTlRFRCA9IDI7XG52YXIgSURMRSA9IDM7XG52YXIgTU9WSU5HID0gNDtcbnZhciBTQ1JPTExJTkcgPSA1O1xudmFyIERSQUdHSU5HID0gNjtcbnZhciBERVNUUk9ZRUQgPSA3O1xudmFyIFNUQVRFUyA9IHtcbiAgQ1JFQVRFRDogQ1JFQVRFRCxcbiAgTU9VTlRFRDogTU9VTlRFRCxcbiAgSURMRTogSURMRSxcbiAgTU9WSU5HOiBNT1ZJTkcsXG4gIFNDUk9MTElORzogU0NST0xMSU5HLFxuICBEUkFHR0lORzogRFJBR0dJTkcsXG4gIERFU1RST1lFRDogREVTVFJPWUVEXG59O1xuXG5mdW5jdGlvbiBlbXB0eShhcnJheSkge1xuICBhcnJheS5sZW5ndGggPSAwO1xufVxuXG5mdW5jdGlvbiBzbGljZShhcnJheUxpa2UsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5TGlrZSwgc3RhcnQsIGVuZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmMuYmluZC5hcHBseShmdW5jLCBbbnVsbF0uY29uY2F0KHNsaWNlKGFyZ3VtZW50cywgMSkpKTtcbn1cblxudmFyIG5leHRUaWNrID0gc2V0VGltZW91dDtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbmZ1bmN0aW9uIHJhZihmdW5jKSB7XG4gIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuYyk7XG59XG5cbmZ1bmN0aW9uIHR5cGVPZih0eXBlLCBzdWJqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygc3ViamVjdCA9PT0gdHlwZTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gIWlzTnVsbChzdWJqZWN0KSAmJiB0eXBlT2YoXCJvYmplY3RcIiwgc3ViamVjdCk7XG59XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBpc0Z1bmN0aW9uID0gYXBwbHkodHlwZU9mLCBcImZ1bmN0aW9uXCIpO1xudmFyIGlzU3RyaW5nID0gYXBwbHkodHlwZU9mLCBcInN0cmluZ1wiKTtcbnZhciBpc1VuZGVmaW5lZCA9IGFwcGx5KHR5cGVPZiwgXCJ1bmRlZmluZWRcIik7XG5cbmZ1bmN0aW9uIGlzTnVsbChzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0ID09PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KHN1YmplY3QpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gc3ViamVjdCBpbnN0YW5jZW9mIChzdWJqZWN0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93KS5IVE1MRWxlbWVudDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaCh2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gIHRvQXJyYXkodmFsdWVzKS5mb3JFYWNoKGl0ZXJhdGVlKTtcbn1cblxuZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gIHJldHVybiBhcnJheS5pbmRleE9mKHZhbHVlKSA+IC0xO1xufVxuXG5mdW5jdGlvbiBwdXNoKGFycmF5LCBpdGVtcykge1xuICBhcnJheS5wdXNoLmFwcGx5KGFycmF5LCB0b0FycmF5KGl0ZW1zKSk7XG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBhZGQpIHtcbiAgaWYgKGVsbSkge1xuICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIGVsbS5jbGFzc0xpc3RbYWRkID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKG5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzKGVsbSwgY2xhc3Nlcykge1xuICB0b2dnbGVDbGFzcyhlbG0sIGlzU3RyaW5nKGNsYXNzZXMpID8gY2xhc3Nlcy5zcGxpdChcIiBcIikgOiBjbGFzc2VzLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHBhcmVudCwgY2hpbGRyZW4pIHtcbiAgZm9yRWFjaChjaGlsZHJlbiwgcGFyZW50LmFwcGVuZENoaWxkLmJpbmQocGFyZW50KSk7XG59XG5cbmZ1bmN0aW9uIGJlZm9yZShub2RlcywgcmVmKSB7XG4gIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIHBhcmVudCA9IChyZWYgfHwgbm9kZSkucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgcmVmKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzKGVsbSwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGlzSFRNTEVsZW1lbnQoZWxtKSAmJiAoZWxtW1wibXNNYXRjaGVzU2VsZWN0b3JcIl0gfHwgZWxtLm1hdGNoZXMpLmNhbGwoZWxtLCBzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgdmFyIGNoaWxkcmVuMiA9IHBhcmVudCA/IHNsaWNlKHBhcmVudC5jaGlsZHJlbikgOiBbXTtcbiAgcmV0dXJuIHNlbGVjdG9yID8gY2hpbGRyZW4yLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gbWF0Y2hlcyhjaGlsZCwgc2VsZWN0b3IpO1xuICB9KSA6IGNoaWxkcmVuMjtcbn1cblxuZnVuY3Rpb24gY2hpbGQocGFyZW50LCBzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPyBjaGlsZHJlbihwYXJlbnQsIHNlbGVjdG9yKVswXSA6IHBhcmVudC5maXJzdEVsZW1lbnRDaGlsZDtcbn1cblxudmFyIG93bktleXMgPSBPYmplY3Qua2V5cztcblxuZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUsIHJpZ2h0KSB7XG4gIGlmIChvYmplY3QpIHtcbiAgICAocmlnaHQgPyBvd25LZXlzKG9iamVjdCkucmV2ZXJzZSgpIDogb3duS2V5cyhvYmplY3QpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGtleSAhPT0gXCJfX3Byb3RvX19cIiAmJiBpdGVyYXRlZShvYmplY3Rba2V5XSwga2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbihvYmplY3QpIHtcbiAgc2xpY2UoYXJndW1lbnRzLCAxKS5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBmb3JPd24oc291cmNlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIG1lcmdlKG9iamVjdCkge1xuICBzbGljZShhcmd1bWVudHMsIDEpLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGZvck93bihzb3VyY2UsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZS5zbGljZSgpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSBtZXJnZSh7fSwgaXNPYmplY3Qob2JqZWN0W2tleV0pID8gb2JqZWN0W2tleV0gOiB7fSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIG9taXQob2JqZWN0LCBrZXlzKSB7XG4gIGZvckVhY2goa2V5cyB8fCBvd25LZXlzKG9iamVjdCksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoZWxtcywgYXR0cnMpIHtcbiAgZm9yRWFjaChlbG1zLCBmdW5jdGlvbiAoZWxtKSB7XG4gICAgZm9yRWFjaChhdHRycywgZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgIGVsbSAmJiBlbG0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlKGVsbXMsIGF0dHJzLCB2YWx1ZSkge1xuICBpZiAoaXNPYmplY3QoYXR0cnMpKSB7XG4gICAgZm9yT3duKGF0dHJzLCBmdW5jdGlvbiAodmFsdWUyLCBuYW1lKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUoZWxtcywgbmFtZSwgdmFsdWUyKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBmb3JFYWNoKGVsbXMsIGZ1bmN0aW9uIChlbG0pIHtcbiAgICAgIGlzTnVsbCh2YWx1ZSkgfHwgdmFsdWUgPT09IFwiXCIgPyByZW1vdmVBdHRyaWJ1dGUoZWxtLCBhdHRycykgOiBlbG0uc2V0QXR0cmlidXRlKGF0dHJzLCBTdHJpbmcodmFsdWUpKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGUodGFnLCBhdHRycywgcGFyZW50KSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG5cbiAgaWYgKGF0dHJzKSB7XG4gICAgaXNTdHJpbmcoYXR0cnMpID8gYWRkQ2xhc3MoZWxtLCBhdHRycykgOiBzZXRBdHRyaWJ1dGUoZWxtLCBhdHRycyk7XG4gIH1cblxuICBwYXJlbnQgJiYgYXBwZW5kKHBhcmVudCwgZWxtKTtcbiAgcmV0dXJuIGVsbTtcbn1cblxuZnVuY3Rpb24gc3R5bGUoZWxtLCBwcm9wLCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxtKVtwcm9wXTtcbiAgfVxuXG4gIGlmICghaXNOdWxsKHZhbHVlKSkge1xuICAgIGVsbS5zdHlsZVtwcm9wXSA9IFwiXCIgKyB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaXNwbGF5KGVsbSwgZGlzcGxheTIpIHtcbiAgc3R5bGUoZWxtLCBcImRpc3BsYXlcIiwgZGlzcGxheTIpO1xufVxuXG5mdW5jdGlvbiBmb2N1cyhlbG0pIHtcbiAgZWxtW1wic2V0QWN0aXZlXCJdICYmIGVsbVtcInNldEFjdGl2ZVwiXSgpIHx8IGVsbS5mb2N1cyh7XG4gICAgcHJldmVudFNjcm9sbDogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlKGVsbSwgYXR0cikge1xuICByZXR1cm4gZWxtLmdldEF0dHJpYnV0ZShhdHRyKTtcbn1cblxuZnVuY3Rpb24gaGFzQ2xhc3MoZWxtLCBjbGFzc05hbWUpIHtcbiAgcmV0dXJuIGVsbSAmJiBlbG0uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHJlY3QodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShub2Rlcykge1xuICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlICYmIG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSHRtbChodG1sKSB7XG4gIHJldHVybiBjaGlsZChuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpLmJvZHkpO1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50KGUsIHN0b3BQcm9wYWdhdGlvbikge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBxdWVyeShwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBxdWVyeUFsbChwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA/IHNsaWNlKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkgOiBbXTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxtLCBjbGFzc2VzKSB7XG4gIHRvZ2dsZUNsYXNzKGVsbSwgY2xhc3NlcywgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiB0aW1lT2YoZSkge1xuICByZXR1cm4gZS50aW1lU3RhbXA7XG59XG5cbmZ1bmN0aW9uIHVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHZhbHVlIDogdmFsdWUgPyB2YWx1ZSArIFwicHhcIiA6IFwiXCI7XG59XG5cbnZhciBQUk9KRUNUX0NPREUgPSBcInNwbGlkZVwiO1xudmFyIERBVEFfQVRUUklCVVRFID0gXCJkYXRhLVwiICsgUFJPSkVDVF9DT0RFO1xuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW1wiICsgUFJPSkVDVF9DT0RFICsgXCJdIFwiICsgKG1lc3NhZ2UgfHwgXCJcIikpO1xuICB9XG59XG5cbnZhciBtaW4gPSBNYXRoLm1pbixcbiAgICBtYXggPSBNYXRoLm1heCxcbiAgICBmbG9vciA9IE1hdGguZmxvb3IsXG4gICAgY2VpbCA9IE1hdGguY2VpbCxcbiAgICBhYnMgPSBNYXRoLmFicztcblxuZnVuY3Rpb24gYXBwcm94aW1hdGVseUVxdWFsKHgsIHksIGVwc2lsb24pIHtcbiAgcmV0dXJuIGFicyh4IC0geSkgPCBlcHNpbG9uO1xufVxuXG5mdW5jdGlvbiBiZXR3ZWVuKG51bWJlciwgeCwgeSwgZXhjbHVzaXZlKSB7XG4gIHZhciBtaW5pbXVtID0gbWluKHgsIHkpO1xuICB2YXIgbWF4aW11bSA9IG1heCh4LCB5KTtcbiAgcmV0dXJuIGV4Y2x1c2l2ZSA/IG1pbmltdW0gPCBudW1iZXIgJiYgbnVtYmVyIDwgbWF4aW11bSA6IG1pbmltdW0gPD0gbnVtYmVyICYmIG51bWJlciA8PSBtYXhpbXVtO1xufVxuXG5mdW5jdGlvbiBjbGFtcChudW1iZXIsIHgsIHkpIHtcbiAgdmFyIG1pbmltdW0gPSBtaW4oeCwgeSk7XG4gIHZhciBtYXhpbXVtID0gbWF4KHgsIHkpO1xuICByZXR1cm4gbWluKG1heChtaW5pbXVtLCBudW1iZXIpLCBtYXhpbXVtKTtcbn1cblxuZnVuY3Rpb24gc2lnbih4KSB7XG4gIHJldHVybiArKHggPiAwKSAtICsoeCA8IDApO1xufVxuXG5mdW5jdGlvbiBjYW1lbFRvS2ViYWIoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFthLXowLTldKShbQS1aXSkvZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXQoc3RyaW5nLCByZXBsYWNlbWVudHMpIHtcbiAgZm9yRWFjaChyZXBsYWNlbWVudHMsIGZ1bmN0aW9uIChyZXBsYWNlbWVudCkge1xuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKFwiJXNcIiwgXCJcIiArIHJlcGxhY2VtZW50KTtcbiAgfSk7XG4gIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHBhZChudW1iZXIpIHtcbiAgcmV0dXJuIG51bWJlciA8IDEwID8gXCIwXCIgKyBudW1iZXIgOiBcIlwiICsgbnVtYmVyO1xufVxuXG52YXIgaWRzID0ge307XG5cbmZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICByZXR1cm4gXCJcIiArIHByZWZpeCArIHBhZChpZHNbcHJlZml4XSA9IChpZHNbcHJlZml4XSB8fCAwKSArIDEpO1xufVxuXG5mdW5jdGlvbiBFdmVudEJpbmRlcigpIHtcbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGJpbmQodGFyZ2V0cywgZXZlbnRzLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsIGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50LCBuYW1lc3BhY2UpIHtcbiAgICAgIHZhciBpc0V2ZW50VGFyZ2V0ID0gKFwiYWRkRXZlbnRMaXN0ZW5lclwiIGluIHRhcmdldCk7XG4gICAgICB2YXIgcmVtb3ZlciA9IGlzRXZlbnRUYXJnZXQgPyB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKHRhcmdldCwgZXZlbnQsIGNhbGxiYWNrLCBvcHRpb25zKSA6IHRhcmdldFtcInJlbW92ZUxpc3RlbmVyXCJdLmJpbmQodGFyZ2V0LCBjYWxsYmFjayk7XG4gICAgICBpc0V2ZW50VGFyZ2V0ID8gdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCBvcHRpb25zKSA6IHRhcmdldFtcImFkZExpc3RlbmVyXCJdKGNhbGxiYWNrKTtcbiAgICAgIGxpc3RlbmVycy5wdXNoKFt0YXJnZXQsIGV2ZW50LCBuYW1lc3BhY2UsIGNhbGxiYWNrLCByZW1vdmVyXSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1bmJpbmQodGFyZ2V0cywgZXZlbnRzLCBjYWxsYmFjaykge1xuICAgIGZvckVhY2hFdmVudCh0YXJnZXRzLCBldmVudHMsIGZ1bmN0aW9uICh0YXJnZXQsIGV2ZW50LCBuYW1lc3BhY2UpIHtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChsaXN0ZW5lclswXSA9PT0gdGFyZ2V0ICYmIGxpc3RlbmVyWzFdID09PSBldmVudCAmJiBsaXN0ZW5lclsyXSA9PT0gbmFtZXNwYWNlICYmICghY2FsbGJhY2sgfHwgbGlzdGVuZXJbM10gPT09IGNhbGxiYWNrKSkge1xuICAgICAgICAgIGxpc3RlbmVyWzRdKCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKHRhcmdldCwgdHlwZSwgZGV0YWlsKSB7XG4gICAgdmFyIGU7XG4gICAgdmFyIGJ1YmJsZXMgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBDdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBlID0gbmV3IEN1c3RvbUV2ZW50KHR5cGUsIHtcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgZGV0YWlsOiBkZXRhaWxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGZhbHNlLCBkZXRhaWwpO1xuICAgIH1cblxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGUpO1xuICAgIHJldHVybiBlO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yRWFjaEV2ZW50KHRhcmdldHMsIGV2ZW50cywgaXRlcmF0ZWUpIHtcbiAgICBmb3JFYWNoKHRhcmdldHMsIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldCAmJiBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24gKGV2ZW50czIpIHtcbiAgICAgICAgZXZlbnRzMi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROUykge1xuICAgICAgICAgIHZhciBmcmFnbWVudCA9IGV2ZW50TlMuc3BsaXQoXCIuXCIpO1xuICAgICAgICAgIGl0ZXJhdGVlKHRhcmdldCwgZnJhZ21lbnRbMF0sIGZyYWdtZW50WzFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGRhdGFbNF0oKTtcbiAgICB9KTtcbiAgICBlbXB0eShsaXN0ZW5lcnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiaW5kOiBiaW5kLFxuICAgIHVuYmluZDogdW5iaW5kLFxuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07XG59XG5cbnZhciBFVkVOVF9NT1VOVEVEID0gXCJtb3VudGVkXCI7XG52YXIgRVZFTlRfUkVBRFkgPSBcInJlYWR5XCI7XG52YXIgRVZFTlRfTU9WRSA9IFwibW92ZVwiO1xudmFyIEVWRU5UX01PVkVEID0gXCJtb3ZlZFwiO1xudmFyIEVWRU5UX0NMSUNLID0gXCJjbGlja1wiO1xudmFyIEVWRU5UX0FDVElWRSA9IFwiYWN0aXZlXCI7XG52YXIgRVZFTlRfSU5BQ1RJVkUgPSBcImluYWN0aXZlXCI7XG52YXIgRVZFTlRfVklTSUJMRSA9IFwidmlzaWJsZVwiO1xudmFyIEVWRU5UX0hJRERFTiA9IFwiaGlkZGVuXCI7XG52YXIgRVZFTlRfUkVGUkVTSCA9IFwicmVmcmVzaFwiO1xudmFyIEVWRU5UX1VQREFURUQgPSBcInVwZGF0ZWRcIjtcbnZhciBFVkVOVF9SRVNJWkUgPSBcInJlc2l6ZVwiO1xudmFyIEVWRU5UX1JFU0laRUQgPSBcInJlc2l6ZWRcIjtcbnZhciBFVkVOVF9EUkFHID0gXCJkcmFnXCI7XG52YXIgRVZFTlRfRFJBR0dJTkcgPSBcImRyYWdnaW5nXCI7XG52YXIgRVZFTlRfRFJBR0dFRCA9IFwiZHJhZ2dlZFwiO1xudmFyIEVWRU5UX1NDUk9MTCA9IFwic2Nyb2xsXCI7XG52YXIgRVZFTlRfU0NST0xMRUQgPSBcInNjcm9sbGVkXCI7XG52YXIgRVZFTlRfT1ZFUkZMT1cgPSBcIm92ZXJmbG93XCI7XG52YXIgRVZFTlRfREVTVFJPWSA9IFwiZGVzdHJveVwiO1xudmFyIEVWRU5UX0FSUk9XU19NT1VOVEVEID0gXCJhcnJvd3M6bW91bnRlZFwiO1xudmFyIEVWRU5UX0FSUk9XU19VUERBVEVEID0gXCJhcnJvd3M6dXBkYXRlZFwiO1xudmFyIEVWRU5UX1BBR0lOQVRJT05fTU9VTlRFRCA9IFwicGFnaW5hdGlvbjptb3VudGVkXCI7XG52YXIgRVZFTlRfUEFHSU5BVElPTl9VUERBVEVEID0gXCJwYWdpbmF0aW9uOnVwZGF0ZWRcIjtcbnZhciBFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQgPSBcIm5hdmlnYXRpb246bW91bnRlZFwiO1xudmFyIEVWRU5UX0FVVE9QTEFZX1BMQVkgPSBcImF1dG9wbGF5OnBsYXlcIjtcbnZhciBFVkVOVF9BVVRPUExBWV9QTEFZSU5HID0gXCJhdXRvcGxheTpwbGF5aW5nXCI7XG52YXIgRVZFTlRfQVVUT1BMQVlfUEFVU0UgPSBcImF1dG9wbGF5OnBhdXNlXCI7XG52YXIgRVZFTlRfTEFaWUxPQURfTE9BREVEID0gXCJsYXp5bG9hZDpsb2FkZWRcIjtcbnZhciBFVkVOVF9TTElERV9LRVlET1dOID0gXCJza1wiO1xudmFyIEVWRU5UX1NISUZURUQgPSBcInNoXCI7XG52YXIgRVZFTlRfRU5EX0lOREVYX0NIQU5HRUQgPSBcImVpXCI7XG5cbmZ1bmN0aW9uIEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpIHtcbiAgdmFyIGJ1cyA9IFNwbGlkZTIgPyBTcGxpZGUyLmV2ZW50LmJ1cyA6IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgdmFyIGJpbmRlciA9IEV2ZW50QmluZGVyKCk7XG5cbiAgZnVuY3Rpb24gb24oZXZlbnRzLCBjYWxsYmFjaykge1xuICAgIGJpbmRlci5iaW5kKGJ1cywgdG9BcnJheShldmVudHMpLmpvaW4oXCIgXCIpLCBmdW5jdGlvbiAoZSkge1xuICAgICAgY2FsbGJhY2suYXBwbHkoY2FsbGJhY2ssIGlzQXJyYXkoZS5kZXRhaWwpID8gZS5kZXRhaWwgOiBbXSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgYmluZGVyLmRpc3BhdGNoKGJ1cywgZXZlbnQsIHNsaWNlKGFyZ3VtZW50cywgMSkpO1xuICB9XG5cbiAgaWYgKFNwbGlkZTIpIHtcbiAgICBTcGxpZGUyLmV2ZW50Lm9uKEVWRU5UX0RFU1RST1ksIGJpbmRlci5kZXN0cm95KTtcbiAgfVxuXG4gIHJldHVybiBhc3NpZ24oYmluZGVyLCB7XG4gICAgYnVzOiBidXMsXG4gICAgb246IG9uLFxuICAgIG9mZjogYXBwbHkoYmluZGVyLnVuYmluZCwgYnVzKSxcbiAgICBlbWl0OiBlbWl0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBSZXF1ZXN0SW50ZXJ2YWwoaW50ZXJ2YWwsIG9uSW50ZXJ2YWwsIG9uVXBkYXRlLCBsaW1pdCkge1xuICB2YXIgbm93ID0gRGF0ZS5ub3c7XG4gIHZhciBzdGFydFRpbWU7XG4gIHZhciByYXRlID0gMDtcbiAgdmFyIGlkO1xuICB2YXIgcGF1c2VkID0gdHJ1ZTtcbiAgdmFyIGNvdW50ID0gMDtcblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKCFwYXVzZWQpIHtcbiAgICAgIHJhdGUgPSBpbnRlcnZhbCA/IG1pbigobm93KCkgLSBzdGFydFRpbWUpIC8gaW50ZXJ2YWwsIDEpIDogMTtcbiAgICAgIG9uVXBkYXRlICYmIG9uVXBkYXRlKHJhdGUpO1xuXG4gICAgICBpZiAocmF0ZSA+PSAxKSB7XG4gICAgICAgIG9uSW50ZXJ2YWwoKTtcbiAgICAgICAgc3RhcnRUaW1lID0gbm93KCk7XG5cbiAgICAgICAgaWYgKGxpbWl0ICYmICsrY291bnQgPj0gbGltaXQpIHtcbiAgICAgICAgICByZXR1cm4gcGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZCA9IHJhZih1cGRhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0KHJlc3VtZSkge1xuICAgIHJlc3VtZSB8fCBjYW5jZWwoKTtcbiAgICBzdGFydFRpbWUgPSBub3coKSAtIChyZXN1bWUgPyByYXRlICogaW50ZXJ2YWwgOiAwKTtcbiAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICBpZCA9IHJhZih1cGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgcGF1c2VkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJld2luZCgpIHtcbiAgICBzdGFydFRpbWUgPSBub3coKTtcbiAgICByYXRlID0gMDtcblxuICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgb25VcGRhdGUocmF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlkICYmIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICByYXRlID0gMDtcbiAgICBpZCA9IDA7XG4gICAgcGF1c2VkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCh0aW1lKSB7XG4gICAgaW50ZXJ2YWwgPSB0aW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHBhdXNlZDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHJld2luZDogcmV3aW5kLFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBjYW5jZWw6IGNhbmNlbCxcbiAgICBzZXQ6IHNldCxcbiAgICBpc1BhdXNlZDogaXNQYXVzZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBzdGF0ZSA9IGluaXRpYWxTdGF0ZTtcblxuICBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICBzdGF0ZSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gaXMoc3RhdGVzKSB7XG4gICAgcmV0dXJuIGluY2x1ZGVzKHRvQXJyYXkoc3RhdGVzKSwgc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXQ6IHNldCxcbiAgICBpczogaXNcbiAgfTtcbn1cblxuZnVuY3Rpb24gVGhyb3R0bGUoZnVuYywgZHVyYXRpb24pIHtcbiAgdmFyIGludGVydmFsID0gUmVxdWVzdEludGVydmFsKGR1cmF0aW9uIHx8IDAsIGZ1bmMsIG51bGwsIDEpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludGVydmFsLmlzUGF1c2VkKCkgJiYgaW50ZXJ2YWwuc3RhcnQoKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gTWVkaWEoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gU3BsaWRlMi5zdGF0ZTtcbiAgdmFyIGJyZWFrcG9pbnRzID0gb3B0aW9ucy5icmVha3BvaW50cyB8fCB7fTtcbiAgdmFyIHJlZHVjZWRNb3Rpb24gPSBvcHRpb25zLnJlZHVjZWRNb3Rpb24gfHwge307XG4gIHZhciBiaW5kZXIgPSBFdmVudEJpbmRlcigpO1xuICB2YXIgcXVlcmllcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIHZhciBpc01pbiA9IG9wdGlvbnMubWVkaWFRdWVyeSA9PT0gXCJtaW5cIjtcbiAgICBvd25LZXlzKGJyZWFrcG9pbnRzKS5zb3J0KGZ1bmN0aW9uIChuLCBtKSB7XG4gICAgICByZXR1cm4gaXNNaW4gPyArbiAtICttIDogK20gLSArbjtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJlZ2lzdGVyKGJyZWFrcG9pbnRzW2tleV0sIFwiKFwiICsgKGlzTWluID8gXCJtaW5cIiA6IFwibWF4XCIpICsgXCItd2lkdGg6XCIgKyBrZXkgKyBcInB4KVwiKTtcbiAgICB9KTtcbiAgICByZWdpc3RlcihyZWR1Y2VkTW90aW9uLCBNRURJQV9QUkVGRVJTX1JFRFVDRURfTU9USU9OKTtcbiAgICB1cGRhdGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koY29tcGxldGVseSkge1xuICAgIGlmIChjb21wbGV0ZWx5KSB7XG4gICAgICBiaW5kZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKG9wdGlvbnMyLCBxdWVyeSkge1xuICAgIHZhciBxdWVyeUxpc3QgPSBtYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICBiaW5kZXIuYmluZChxdWVyeUxpc3QsIFwiY2hhbmdlXCIsIHVwZGF0ZSk7XG4gICAgcXVlcmllcy5wdXNoKFtvcHRpb25zMiwgcXVlcnlMaXN0XSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIGRlc3Ryb3llZCA9IHN0YXRlLmlzKERFU1RST1lFRCk7XG4gICAgdmFyIGRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIHZhciBtZXJnZWQgPSBxdWVyaWVzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkMiwgZW50cnkpIHtcbiAgICAgIHJldHVybiBtZXJnZShtZXJnZWQyLCBlbnRyeVsxXS5tYXRjaGVzID8gZW50cnlbMF0gOiB7fSk7XG4gICAgfSwge30pO1xuICAgIG9taXQob3B0aW9ucyk7XG4gICAgc2V0KG1lcmdlZCk7XG5cbiAgICBpZiAob3B0aW9ucy5kZXN0cm95KSB7XG4gICAgICBTcGxpZGUyLmRlc3Ryb3kob3B0aW9ucy5kZXN0cm95ID09PSBcImNvbXBsZXRlbHlcIik7XG4gICAgfSBlbHNlIGlmIChkZXN0cm95ZWQpIHtcbiAgICAgIGRlc3Ryb3kodHJ1ZSk7XG4gICAgICBTcGxpZGUyLm1vdW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcmVjdGlvbiAhPT0gb3B0aW9ucy5kaXJlY3Rpb24gJiYgU3BsaWRlMi5yZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVkdWNlKGVuYWJsZSkge1xuICAgIGlmIChtYXRjaE1lZGlhKE1FRElBX1BSRUZFUlNfUkVEVUNFRF9NT1RJT04pLm1hdGNoZXMpIHtcbiAgICAgIGVuYWJsZSA/IG1lcmdlKG9wdGlvbnMsIHJlZHVjZWRNb3Rpb24pIDogb21pdChvcHRpb25zLCBvd25LZXlzKHJlZHVjZWRNb3Rpb24pKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXQob3B0cywgYmFzZSwgbm90aWZ5KSB7XG4gICAgbWVyZ2Uob3B0aW9ucywgb3B0cyk7XG4gICAgYmFzZSAmJiBtZXJnZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3B0aW9ucyksIG9wdHMpO1xuXG4gICAgaWYgKG5vdGlmeSB8fCAhc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIFNwbGlkZTIuZW1pdChFVkVOVF9VUERBVEVELCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldHVwOiBzZXR1cCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHJlZHVjZTogcmVkdWNlLFxuICAgIHNldDogc2V0XG4gIH07XG59XG5cbnZhciBBUlJPVyA9IFwiQXJyb3dcIjtcbnZhciBBUlJPV19MRUZUID0gQVJST1cgKyBcIkxlZnRcIjtcbnZhciBBUlJPV19SSUdIVCA9IEFSUk9XICsgXCJSaWdodFwiO1xudmFyIEFSUk9XX1VQID0gQVJST1cgKyBcIlVwXCI7XG52YXIgQVJST1dfRE9XTiA9IEFSUk9XICsgXCJEb3duXCI7XG52YXIgTFRSID0gXCJsdHJcIjtcbnZhciBSVEwgPSBcInJ0bFwiO1xudmFyIFRUQiA9IFwidHRiXCI7XG52YXIgT1JJRU5UQVRJT05fTUFQID0ge1xuICB3aWR0aDogW1wiaGVpZ2h0XCJdLFxuICBsZWZ0OiBbXCJ0b3BcIiwgXCJyaWdodFwiXSxcbiAgcmlnaHQ6IFtcImJvdHRvbVwiLCBcImxlZnRcIl0sXG4gIHg6IFtcInlcIl0sXG4gIFg6IFtcIllcIl0sXG4gIFk6IFtcIlhcIl0sXG4gIEFycm93TGVmdDogW0FSUk9XX1VQLCBBUlJPV19SSUdIVF0sXG4gIEFycm93UmlnaHQ6IFtBUlJPV19ET1dOLCBBUlJPV19MRUZUXVxufTtcblxuZnVuY3Rpb24gRGlyZWN0aW9uKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIGZ1bmN0aW9uIHJlc29sdmUocHJvcCwgYXhpc09ubHksIGRpcmVjdGlvbikge1xuICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICB2YXIgaW5kZXggPSBkaXJlY3Rpb24gPT09IFJUTCAmJiAhYXhpc09ubHkgPyAxIDogZGlyZWN0aW9uID09PSBUVEIgPyAwIDogLTE7XG4gICAgcmV0dXJuIE9SSUVOVEFUSU9OX01BUFtwcm9wXSAmJiBPUklFTlRBVElPTl9NQVBbcHJvcF1baW5kZXhdIHx8IHByb3AucmVwbGFjZSgvd2lkdGh8bGVmdHxyaWdodC9pLCBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCkge1xuICAgICAgdmFyIHJlcGxhY2VtZW50ID0gT1JJRU5UQVRJT05fTUFQW21hdGNoLnRvTG93ZXJDYXNlKCldW2luZGV4XSB8fCBtYXRjaDtcbiAgICAgIHJldHVybiBvZmZzZXQgPiAwID8gcmVwbGFjZW1lbnQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZXBsYWNlbWVudC5zbGljZSgxKSA6IHJlcGxhY2VtZW50O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb3JpZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICogKG9wdGlvbnMuZGlyZWN0aW9uID09PSBSVEwgPyAxIDogLTEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIG9yaWVudDogb3JpZW50XG4gIH07XG59XG5cbnZhciBST0xFID0gXCJyb2xlXCI7XG52YXIgVEFCX0lOREVYID0gXCJ0YWJpbmRleFwiO1xudmFyIERJU0FCTEVEID0gXCJkaXNhYmxlZFwiO1xudmFyIEFSSUFfUFJFRklYID0gXCJhcmlhLVwiO1xudmFyIEFSSUFfQ09OVFJPTFMgPSBBUklBX1BSRUZJWCArIFwiY29udHJvbHNcIjtcbnZhciBBUklBX0NVUlJFTlQgPSBBUklBX1BSRUZJWCArIFwiY3VycmVudFwiO1xudmFyIEFSSUFfU0VMRUNURUQgPSBBUklBX1BSRUZJWCArIFwic2VsZWN0ZWRcIjtcbnZhciBBUklBX0xBQkVMID0gQVJJQV9QUkVGSVggKyBcImxhYmVsXCI7XG52YXIgQVJJQV9MQUJFTExFREJZID0gQVJJQV9QUkVGSVggKyBcImxhYmVsbGVkYnlcIjtcbnZhciBBUklBX0hJRERFTiA9IEFSSUFfUFJFRklYICsgXCJoaWRkZW5cIjtcbnZhciBBUklBX09SSUVOVEFUSU9OID0gQVJJQV9QUkVGSVggKyBcIm9yaWVudGF0aW9uXCI7XG52YXIgQVJJQV9ST0xFREVTQ1JJUFRJT04gPSBBUklBX1BSRUZJWCArIFwicm9sZWRlc2NyaXB0aW9uXCI7XG52YXIgQVJJQV9MSVZFID0gQVJJQV9QUkVGSVggKyBcImxpdmVcIjtcbnZhciBBUklBX0JVU1kgPSBBUklBX1BSRUZJWCArIFwiYnVzeVwiO1xudmFyIEFSSUFfQVRPTUlDID0gQVJJQV9QUkVGSVggKyBcImF0b21pY1wiO1xudmFyIEFMTF9BVFRSSUJVVEVTID0gW1JPTEUsIFRBQl9JTkRFWCwgRElTQUJMRUQsIEFSSUFfQ09OVFJPTFMsIEFSSUFfQ1VSUkVOVCwgQVJJQV9MQUJFTCwgQVJJQV9MQUJFTExFREJZLCBBUklBX0hJRERFTiwgQVJJQV9PUklFTlRBVElPTiwgQVJJQV9ST0xFREVTQ1JJUFRJT05dO1xudmFyIENMQVNTX1BSRUZJWCA9IFBST0pFQ1RfQ09ERSArIFwiX19cIjtcbnZhciBTVEFUVVNfQ0xBU1NfUFJFRklYID0gXCJpcy1cIjtcbnZhciBDTEFTU19ST09UID0gUFJPSkVDVF9DT0RFO1xudmFyIENMQVNTX1RSQUNLID0gQ0xBU1NfUFJFRklYICsgXCJ0cmFja1wiO1xudmFyIENMQVNTX0xJU1QgPSBDTEFTU19QUkVGSVggKyBcImxpc3RcIjtcbnZhciBDTEFTU19TTElERSA9IENMQVNTX1BSRUZJWCArIFwic2xpZGVcIjtcbnZhciBDTEFTU19DTE9ORSA9IENMQVNTX1NMSURFICsgXCItLWNsb25lXCI7XG52YXIgQ0xBU1NfQ09OVEFJTkVSID0gQ0xBU1NfU0xJREUgKyBcIl9fY29udGFpbmVyXCI7XG52YXIgQ0xBU1NfQVJST1dTID0gQ0xBU1NfUFJFRklYICsgXCJhcnJvd3NcIjtcbnZhciBDTEFTU19BUlJPVyA9IENMQVNTX1BSRUZJWCArIFwiYXJyb3dcIjtcbnZhciBDTEFTU19BUlJPV19QUkVWID0gQ0xBU1NfQVJST1cgKyBcIi0tcHJldlwiO1xudmFyIENMQVNTX0FSUk9XX05FWFQgPSBDTEFTU19BUlJPVyArIFwiLS1uZXh0XCI7XG52YXIgQ0xBU1NfUEFHSU5BVElPTiA9IENMQVNTX1BSRUZJWCArIFwicGFnaW5hdGlvblwiO1xudmFyIENMQVNTX1BBR0lOQVRJT05fUEFHRSA9IENMQVNTX1BBR0lOQVRJT04gKyBcIl9fcGFnZVwiO1xudmFyIENMQVNTX1BST0dSRVNTID0gQ0xBU1NfUFJFRklYICsgXCJwcm9ncmVzc1wiO1xudmFyIENMQVNTX1BST0dSRVNTX0JBUiA9IENMQVNTX1BST0dSRVNTICsgXCJfX2JhclwiO1xudmFyIENMQVNTX1RPR0dMRSA9IENMQVNTX1BSRUZJWCArIFwidG9nZ2xlXCI7XG52YXIgQ0xBU1NfVE9HR0xFX1BMQVkgPSBDTEFTU19UT0dHTEUgKyBcIl9fcGxheVwiO1xudmFyIENMQVNTX1RPR0dMRV9QQVVTRSA9IENMQVNTX1RPR0dMRSArIFwiX19wYXVzZVwiO1xudmFyIENMQVNTX1NQSU5ORVIgPSBDTEFTU19QUkVGSVggKyBcInNwaW5uZXJcIjtcbnZhciBDTEFTU19TUiA9IENMQVNTX1BSRUZJWCArIFwic3JcIjtcbnZhciBDTEFTU19JTklUSUFMSVpFRCA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcImluaXRpYWxpemVkXCI7XG52YXIgQ0xBU1NfQUNUSVZFID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwiYWN0aXZlXCI7XG52YXIgQ0xBU1NfUFJFViA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcInByZXZcIjtcbnZhciBDTEFTU19ORVhUID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwibmV4dFwiO1xudmFyIENMQVNTX1ZJU0lCTEUgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJ2aXNpYmxlXCI7XG52YXIgQ0xBU1NfTE9BRElORyA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcImxvYWRpbmdcIjtcbnZhciBDTEFTU19GT0NVU19JTiA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcImZvY3VzLWluXCI7XG52YXIgQ0xBU1NfT1ZFUkZMT1cgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJvdmVyZmxvd1wiO1xudmFyIFNUQVRVU19DTEFTU0VTID0gW0NMQVNTX0FDVElWRSwgQ0xBU1NfVklTSUJMRSwgQ0xBU1NfUFJFViwgQ0xBU1NfTkVYVCwgQ0xBU1NfTE9BRElORywgQ0xBU1NfRk9DVVNfSU4sIENMQVNTX09WRVJGTE9XXTtcbnZhciBDTEFTU0VTID0ge1xuICBzbGlkZTogQ0xBU1NfU0xJREUsXG4gIGNsb25lOiBDTEFTU19DTE9ORSxcbiAgYXJyb3dzOiBDTEFTU19BUlJPV1MsXG4gIGFycm93OiBDTEFTU19BUlJPVyxcbiAgcHJldjogQ0xBU1NfQVJST1dfUFJFVixcbiAgbmV4dDogQ0xBU1NfQVJST1dfTkVYVCxcbiAgcGFnaW5hdGlvbjogQ0xBU1NfUEFHSU5BVElPTixcbiAgcGFnZTogQ0xBU1NfUEFHSU5BVElPTl9QQUdFLFxuICBzcGlubmVyOiBDTEFTU19TUElOTkVSXG59O1xuXG5mdW5jdGlvbiBjbG9zZXN0KGZyb20sIHNlbGVjdG9yKSB7XG4gIGlmIChpc0Z1bmN0aW9uKGZyb20uY2xvc2VzdCkpIHtcbiAgICByZXR1cm4gZnJvbS5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgfVxuXG4gIHZhciBlbG0gPSBmcm9tO1xuXG4gIHdoaWxlIChlbG0gJiYgZWxtLm5vZGVUeXBlID09PSAxKSB7XG4gICAgaWYgKG1hdGNoZXMoZWxtLCBzZWxlY3RvcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGVsbSA9IGVsbS5wYXJlbnRFbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGVsbTtcbn1cblxudmFyIEZSSUNUSU9OID0gNTtcbnZhciBMT0dfSU5URVJWQUwgPSAyMDA7XG52YXIgUE9JTlRFUl9ET1dOX0VWRU5UUyA9IFwidG91Y2hzdGFydCBtb3VzZWRvd25cIjtcbnZhciBQT0lOVEVSX01PVkVfRVZFTlRTID0gXCJ0b3VjaG1vdmUgbW91c2Vtb3ZlXCI7XG52YXIgUE9JTlRFUl9VUF9FVkVOVFMgPSBcInRvdWNoZW5kIHRvdWNoY2FuY2VsIG1vdXNldXAgY2xpY2tcIjtcblxuZnVuY3Rpb24gRWxlbWVudHMoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2Uub24sXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlLmJpbmQ7XG5cbiAgdmFyIHJvb3QgPSBTcGxpZGUyLnJvb3Q7XG4gIHZhciBpMThuID0gb3B0aW9ucy5pMThuO1xuICB2YXIgZWxlbWVudHMgPSB7fTtcbiAgdmFyIHNsaWRlcyA9IFtdO1xuICB2YXIgcm9vdENsYXNzZXMgPSBbXTtcbiAgdmFyIHRyYWNrQ2xhc3NlcyA9IFtdO1xuICB2YXIgdHJhY2s7XG4gIHZhciBsaXN0O1xuICB2YXIgaXNVc2luZ0tleTtcblxuICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICBjb2xsZWN0KCk7XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgZGVzdHJveSk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgc2V0dXApO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIHVwZGF0ZSk7XG4gICAgYmluZChkb2N1bWVudCwgUE9JTlRFUl9ET1dOX0VWRU5UUyArIFwiIGtleWRvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlzVXNpbmdLZXkgPSBlLnR5cGUgPT09IFwia2V5ZG93blwiO1xuICAgIH0sIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KTtcbiAgICBiaW5kKHJvb3QsIFwiZm9jdXNpblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0b2dnbGVDbGFzcyhyb290LCBDTEFTU19GT0NVU19JTiwgISFpc1VzaW5nS2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koY29tcGxldGVseSkge1xuICAgIHZhciBhdHRycyA9IEFMTF9BVFRSSUJVVEVTLmNvbmNhdChcInN0eWxlXCIpO1xuICAgIGVtcHR5KHNsaWRlcyk7XG4gICAgcmVtb3ZlQ2xhc3Mocm9vdCwgcm9vdENsYXNzZXMpO1xuICAgIHJlbW92ZUNsYXNzKHRyYWNrLCB0cmFja0NsYXNzZXMpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShbdHJhY2ssIGxpc3RdLCBhdHRycyk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKHJvb3QsIGNvbXBsZXRlbHkgPyBhdHRycyA6IFtcInN0eWxlXCIsIEFSSUFfUk9MRURFU0NSSVBUSU9OXSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgcmVtb3ZlQ2xhc3Mocm9vdCwgcm9vdENsYXNzZXMpO1xuICAgIHJlbW92ZUNsYXNzKHRyYWNrLCB0cmFja0NsYXNzZXMpO1xuICAgIHJvb3RDbGFzc2VzID0gZ2V0Q2xhc3NlcyhDTEFTU19ST09UKTtcbiAgICB0cmFja0NsYXNzZXMgPSBnZXRDbGFzc2VzKENMQVNTX1RSQUNLKTtcbiAgICBhZGRDbGFzcyhyb290LCByb290Q2xhc3Nlcyk7XG4gICAgYWRkQ2xhc3ModHJhY2ssIHRyYWNrQ2xhc3Nlcyk7XG4gICAgc2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfTEFCRUwsIG9wdGlvbnMubGFiZWwpO1xuICAgIHNldEF0dHJpYnV0ZShyb290LCBBUklBX0xBQkVMTEVEQlksIG9wdGlvbnMubGFiZWxsZWRieSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xsZWN0KCkge1xuICAgIHRyYWNrID0gZmluZChcIi5cIiArIENMQVNTX1RSQUNLKTtcbiAgICBsaXN0ID0gY2hpbGQodHJhY2ssIFwiLlwiICsgQ0xBU1NfTElTVCk7XG4gICAgYXNzZXJ0KHRyYWNrICYmIGxpc3QsIFwiQSB0cmFjay9saXN0IGVsZW1lbnQgaXMgbWlzc2luZy5cIik7XG4gICAgcHVzaChzbGlkZXMsIGNoaWxkcmVuKGxpc3QsIFwiLlwiICsgQ0xBU1NfU0xJREUgKyBcIjpub3QoLlwiICsgQ0xBU1NfQ0xPTkUgKyBcIilcIikpO1xuICAgIGZvck93bih7XG4gICAgICBhcnJvd3M6IENMQVNTX0FSUk9XUyxcbiAgICAgIHBhZ2luYXRpb246IENMQVNTX1BBR0lOQVRJT04sXG4gICAgICBwcmV2OiBDTEFTU19BUlJPV19QUkVWLFxuICAgICAgbmV4dDogQ0xBU1NfQVJST1dfTkVYVCxcbiAgICAgIGJhcjogQ0xBU1NfUFJPR1JFU1NfQkFSLFxuICAgICAgdG9nZ2xlOiBDTEFTU19UT0dHTEVcbiAgICB9LCBmdW5jdGlvbiAoY2xhc3NOYW1lLCBrZXkpIHtcbiAgICAgIGVsZW1lbnRzW2tleV0gPSBmaW5kKFwiLlwiICsgY2xhc3NOYW1lKTtcbiAgICB9KTtcbiAgICBhc3NpZ24oZWxlbWVudHMsIHtcbiAgICAgIHJvb3Q6IHJvb3QsXG4gICAgICB0cmFjazogdHJhY2ssXG4gICAgICBsaXN0OiBsaXN0LFxuICAgICAgc2xpZGVzOiBzbGlkZXNcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGlkID0gcm9vdC5pZCB8fCB1bmlxdWVJZChQUk9KRUNUX0NPREUpO1xuICAgIHZhciByb2xlID0gb3B0aW9ucy5yb2xlO1xuICAgIHJvb3QuaWQgPSBpZDtcbiAgICB0cmFjay5pZCA9IHRyYWNrLmlkIHx8IGlkICsgXCItdHJhY2tcIjtcbiAgICBsaXN0LmlkID0gbGlzdC5pZCB8fCBpZCArIFwiLWxpc3RcIjtcblxuICAgIGlmICghZ2V0QXR0cmlidXRlKHJvb3QsIFJPTEUpICYmIHJvb3QudGFnTmFtZSAhPT0gXCJTRUNUSU9OXCIgJiYgcm9sZSkge1xuICAgICAgc2V0QXR0cmlidXRlKHJvb3QsIFJPTEUsIHJvbGUpO1xuICAgIH1cblxuICAgIHNldEF0dHJpYnV0ZShyb290LCBBUklBX1JPTEVERVNDUklQVElPTiwgaTE4bi5jYXJvdXNlbCk7XG4gICAgc2V0QXR0cmlidXRlKGxpc3QsIFJPTEUsIFwicHJlc2VudGF0aW9uXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICAgIHZhciBlbG0gPSBxdWVyeShyb290LCBzZWxlY3Rvcik7XG4gICAgcmV0dXJuIGVsbSAmJiBjbG9zZXN0KGVsbSwgXCIuXCIgKyBDTEFTU19ST09UKSA9PT0gcm9vdCA/IGVsbSA6IHZvaWQgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENsYXNzZXMoYmFzZSkge1xuICAgIHJldHVybiBbYmFzZSArIFwiLS1cIiArIG9wdGlvbnMudHlwZSwgYmFzZSArIFwiLS1cIiArIG9wdGlvbnMuZGlyZWN0aW9uLCBvcHRpb25zLmRyYWcgJiYgYmFzZSArIFwiLS1kcmFnZ2FibGVcIiwgb3B0aW9ucy5pc05hdmlnYXRpb24gJiYgYmFzZSArIFwiLS1uYXZcIiwgYmFzZSA9PT0gQ0xBU1NfUk9PVCAmJiBDTEFTU19BQ1RJVkVdO1xuICB9XG5cbiAgcmV0dXJuIGFzc2lnbihlbGVtZW50cywge1xuICAgIHNldHVwOiBzZXR1cCxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9KTtcbn1cblxudmFyIFNMSURFID0gXCJzbGlkZVwiO1xudmFyIExPT1AgPSBcImxvb3BcIjtcbnZhciBGQURFID0gXCJmYWRlXCI7XG5cbmZ1bmN0aW9uIFNsaWRlJDEoU3BsaWRlMiwgaW5kZXgsIHNsaWRlSW5kZXgsIHNsaWRlKSB7XG4gIHZhciBldmVudCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICB2YXIgb24gPSBldmVudC5vbixcbiAgICAgIGVtaXQgPSBldmVudC5lbWl0LFxuICAgICAgYmluZCA9IGV2ZW50LmJpbmQ7XG4gIHZhciBDb21wb25lbnRzID0gU3BsaWRlMi5Db21wb25lbnRzLFxuICAgICAgcm9vdCA9IFNwbGlkZTIucm9vdCxcbiAgICAgIG9wdGlvbnMgPSBTcGxpZGUyLm9wdGlvbnM7XG4gIHZhciBpc05hdmlnYXRpb24gPSBvcHRpb25zLmlzTmF2aWdhdGlvbixcbiAgICAgIHVwZGF0ZU9uTW92ZSA9IG9wdGlvbnMudXBkYXRlT25Nb3ZlLFxuICAgICAgaTE4biA9IG9wdGlvbnMuaTE4bixcbiAgICAgIHBhZ2luYXRpb24gPSBvcHRpb25zLnBhZ2luYXRpb24sXG4gICAgICBzbGlkZUZvY3VzID0gb3B0aW9ucy5zbGlkZUZvY3VzO1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMuRGlyZWN0aW9uLnJlc29sdmU7XG4gIHZhciBzdHlsZXMgPSBnZXRBdHRyaWJ1dGUoc2xpZGUsIFwic3R5bGVcIik7XG4gIHZhciBsYWJlbCA9IGdldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9MQUJFTCk7XG4gIHZhciBpc0Nsb25lID0gc2xpZGVJbmRleCA+IC0xO1xuICB2YXIgY29udGFpbmVyID0gY2hpbGQoc2xpZGUsIFwiLlwiICsgQ0xBU1NfQ09OVEFJTkVSKTtcbiAgdmFyIGRlc3Ryb3llZDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAoIWlzQ2xvbmUpIHtcbiAgICAgIHNsaWRlLmlkID0gcm9vdC5pZCArIFwiLXNsaWRlXCIgKyBwYWQoaW5kZXggKyAxKTtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgUk9MRSwgcGFnaW5hdGlvbiA/IFwidGFicGFuZWxcIiA6IFwiZ3JvdXBcIik7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfUk9MRURFU0NSSVBUSU9OLCBpMThuLnNsaWRlKTtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9MQUJFTCwgbGFiZWwgfHwgZm9ybWF0KGkxOG4uc2xpZGVMYWJlbCwgW2luZGV4ICsgMSwgU3BsaWRlMi5sZW5ndGhdKSk7XG4gICAgfVxuXG4gICAgbGlzdGVuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgYmluZChzbGlkZSwgXCJjbGlja1wiLCBhcHBseShlbWl0LCBFVkVOVF9DTElDSywgc2VsZikpO1xuICAgIGJpbmQoc2xpZGUsIFwia2V5ZG93blwiLCBhcHBseShlbWl0LCBFVkVOVF9TTElERV9LRVlET1dOLCBzZWxmKSk7XG4gICAgb24oW0VWRU5UX01PVkVELCBFVkVOVF9TSElGVEVELCBFVkVOVF9TQ1JPTExFRF0sIHVwZGF0ZSk7XG4gICAgb24oRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBpbml0TmF2aWdhdGlvbik7XG5cbiAgICBpZiAodXBkYXRlT25Nb3ZlKSB7XG4gICAgICBvbihFVkVOVF9NT1ZFLCBvbk1vdmUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgICBldmVudC5kZXN0cm95KCk7XG4gICAgcmVtb3ZlQ2xhc3Moc2xpZGUsIFNUQVRVU19DTEFTU0VTKTtcbiAgICByZW1vdmVBdHRyaWJ1dGUoc2xpZGUsIEFMTF9BVFRSSUJVVEVTKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFwic3R5bGVcIiwgc3R5bGVzKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfTEFCRUwsIGxhYmVsIHx8IFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdE5hdmlnYXRpb24oKSB7XG4gICAgdmFyIGNvbnRyb2xzID0gU3BsaWRlMi5zcGxpZGVzLm1hcChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICB2YXIgU2xpZGUyID0gdGFyZ2V0LnNwbGlkZS5Db21wb25lbnRzLlNsaWRlcy5nZXRBdChpbmRleCk7XG4gICAgICByZXR1cm4gU2xpZGUyID8gU2xpZGUyLnNsaWRlLmlkIDogXCJcIjtcbiAgICB9KS5qb2luKFwiIFwiKTtcbiAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfTEFCRUwsIGZvcm1hdChpMThuLnNsaWRlWCwgKGlzQ2xvbmUgPyBzbGlkZUluZGV4IDogaW5kZXgpICsgMSkpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9DT05UUk9MUywgY29udHJvbHMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgUk9MRSwgc2xpZGVGb2N1cyA/IFwiYnV0dG9uXCIgOiBcIlwiKTtcbiAgICBzbGlkZUZvY3VzICYmIHJlbW92ZUF0dHJpYnV0ZShzbGlkZSwgQVJJQV9ST0xFREVTQ1JJUFRJT04pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3ZlKCkge1xuICAgIGlmICghZGVzdHJveWVkKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKCFkZXN0cm95ZWQpIHtcbiAgICAgIHZhciBjdXJyID0gU3BsaWRlMi5pbmRleDtcbiAgICAgIHVwZGF0ZUFjdGl2aXR5KCk7XG4gICAgICB1cGRhdGVWaXNpYmlsaXR5KCk7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfUFJFViwgaW5kZXggPT09IGN1cnIgLSAxKTtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19ORVhULCBpbmRleCA9PT0gY3VyciArIDEpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUFjdGl2aXR5KCkge1xuICAgIHZhciBhY3RpdmUgPSBpc0FjdGl2ZSgpO1xuXG4gICAgaWYgKGFjdGl2ZSAhPT0gaGFzQ2xhc3Moc2xpZGUsIENMQVNTX0FDVElWRSkpIHtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19BQ1RJVkUsIGFjdGl2ZSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfQ1VSUkVOVCwgaXNOYXZpZ2F0aW9uICYmIGFjdGl2ZSB8fCBcIlwiKTtcbiAgICAgIGVtaXQoYWN0aXZlID8gRVZFTlRfQUNUSVZFIDogRVZFTlRfSU5BQ1RJVkUsIHNlbGYpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVZpc2liaWxpdHkoKSB7XG4gICAgdmFyIHZpc2libGUgPSBpc1Zpc2libGUoKTtcbiAgICB2YXIgaGlkZGVuID0gIXZpc2libGUgJiYgKCFpc0FjdGl2ZSgpIHx8IGlzQ2xvbmUpO1xuXG4gICAgaWYgKCFTcGxpZGUyLnN0YXRlLmlzKFtNT1ZJTkcsIFNDUk9MTElOR10pKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIEFSSUFfSElEREVOLCBoaWRkZW4gfHwgXCJcIik7XG4gICAgfVxuXG4gICAgc2V0QXR0cmlidXRlKHF1ZXJ5QWxsKHNsaWRlLCBvcHRpb25zLmZvY3VzYWJsZU5vZGVzIHx8IFwiXCIpLCBUQUJfSU5ERVgsIGhpZGRlbiA/IC0xIDogXCJcIik7XG5cbiAgICBpZiAoc2xpZGVGb2N1cykge1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBUQUJfSU5ERVgsIGhpZGRlbiA/IC0xIDogMCk7XG4gICAgfVxuXG4gICAgaWYgKHZpc2libGUgIT09IGhhc0NsYXNzKHNsaWRlLCBDTEFTU19WSVNJQkxFKSkge1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX1ZJU0lCTEUsIHZpc2libGUpO1xuICAgICAgZW1pdCh2aXNpYmxlID8gRVZFTlRfVklTSUJMRSA6IEVWRU5UX0hJRERFTiwgc2VsZik7XG4gICAgfVxuXG4gICAgaWYgKCF2aXNpYmxlICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHNsaWRlKSB7XG4gICAgICB2YXIgU2xpZGUyID0gQ29tcG9uZW50cy5TbGlkZXMuZ2V0QXQoU3BsaWRlMi5pbmRleCk7XG4gICAgICBTbGlkZTIgJiYgZm9jdXMoU2xpZGUyLnNsaWRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZSQxKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpIHtcbiAgICBzdHlsZSh1c2VDb250YWluZXIgJiYgY29udGFpbmVyIHx8IHNsaWRlLCBwcm9wLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICB2YXIgY3VyciA9IFNwbGlkZTIuaW5kZXg7XG4gICAgcmV0dXJuIGN1cnIgPT09IGluZGV4IHx8IG9wdGlvbnMuY2xvbmVTdGF0dXMgJiYgY3VyciA9PT0gc2xpZGVJbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVmlzaWJsZSgpIHtcbiAgICBpZiAoU3BsaWRlMi5pcyhGQURFKSkge1xuICAgICAgcmV0dXJuIGlzQWN0aXZlKCk7XG4gICAgfVxuXG4gICAgdmFyIHRyYWNrUmVjdCA9IHJlY3QoQ29tcG9uZW50cy5FbGVtZW50cy50cmFjayk7XG4gICAgdmFyIHNsaWRlUmVjdCA9IHJlY3Qoc2xpZGUpO1xuICAgIHZhciBsZWZ0ID0gcmVzb2x2ZShcImxlZnRcIiwgdHJ1ZSk7XG4gICAgdmFyIHJpZ2h0ID0gcmVzb2x2ZShcInJpZ2h0XCIsIHRydWUpO1xuICAgIHJldHVybiBmbG9vcih0cmFja1JlY3RbbGVmdF0pIDw9IGNlaWwoc2xpZGVSZWN0W2xlZnRdKSAmJiBmbG9vcihzbGlkZVJlY3RbcmlnaHRdKSA8PSBjZWlsKHRyYWNrUmVjdFtyaWdodF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNXaXRoaW4oZnJvbSwgZGlzdGFuY2UpIHtcbiAgICB2YXIgZGlmZiA9IGFicyhmcm9tIC0gaW5kZXgpO1xuXG4gICAgaWYgKCFpc0Nsb25lICYmIChvcHRpb25zLnJld2luZCB8fCBTcGxpZGUyLmlzKExPT1ApKSkge1xuICAgICAgZGlmZiA9IG1pbihkaWZmLCBTcGxpZGUyLmxlbmd0aCAtIGRpZmYpO1xuICAgIH1cblxuICAgIHJldHVybiBkaWZmIDw9IGRpc3RhbmNlO1xuICB9XG5cbiAgdmFyIHNlbGYgPSB7XG4gICAgaW5kZXg6IGluZGV4LFxuICAgIHNsaWRlSW5kZXg6IHNsaWRlSW5kZXgsXG4gICAgc2xpZGU6IHNsaWRlLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGlzQ2xvbmU6IGlzQ2xvbmUsXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgc3R5bGU6IHN0eWxlJDEsXG4gICAgaXNXaXRoaW46IGlzV2l0aGluXG4gIH07XG4gIHJldHVybiBzZWxmO1xufVxuXG5mdW5jdGlvbiBTbGlkZXMoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTIgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMi5vbixcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2UyLmVtaXQsXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMi5iaW5kO1xuXG4gIHZhciBfQ29tcG9uZW50czIkRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIHNsaWRlcyA9IF9Db21wb25lbnRzMiRFbGVtZW50cy5zbGlkZXMsXG4gICAgICBsaXN0ID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzLmxpc3Q7XG4gIHZhciBTbGlkZXMyID0gW107XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIGRlc3Ryb3kpO1xuICAgIG9uKEVWRU5UX1JFRlJFU0gsIGluaXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGUsIGluZGV4KSB7XG4gICAgICByZWdpc3RlcihzbGlkZSwgaW5kZXgsIC0xKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZm9yRWFjaCQxKGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIFNsaWRlMi5kZXN0cm95KCk7XG4gICAgfSk7XG4gICAgZW1wdHkoU2xpZGVzMik7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgZm9yRWFjaCQxKGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIFNsaWRlMi51cGRhdGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKHNsaWRlLCBpbmRleCwgc2xpZGVJbmRleCkge1xuICAgIHZhciBvYmplY3QgPSBTbGlkZSQxKFNwbGlkZTIsIGluZGV4LCBzbGlkZUluZGV4LCBzbGlkZSk7XG4gICAgb2JqZWN0Lm1vdW50KCk7XG4gICAgU2xpZGVzMi5wdXNoKG9iamVjdCk7XG4gICAgU2xpZGVzMi5zb3J0KGZ1bmN0aW9uIChTbGlkZTEsIFNsaWRlMikge1xuICAgICAgcmV0dXJuIFNsaWRlMS5pbmRleCAtIFNsaWRlMi5pbmRleDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldChleGNsdWRlQ2xvbmVzKSB7XG4gICAgcmV0dXJuIGV4Y2x1ZGVDbG9uZXMgPyBmaWx0ZXIoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgcmV0dXJuICFTbGlkZTIuaXNDbG9uZTtcbiAgICB9KSA6IFNsaWRlczI7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbihwYWdlKSB7XG4gICAgdmFyIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyO1xuICAgIHZhciBpbmRleCA9IENvbnRyb2xsZXIudG9JbmRleChwYWdlKTtcbiAgICB2YXIgbWF4ID0gQ29udHJvbGxlci5oYXNGb2N1cygpID8gMSA6IG9wdGlvbnMucGVyUGFnZTtcbiAgICByZXR1cm4gZmlsdGVyKGZ1bmN0aW9uIChTbGlkZTIpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKFNsaWRlMi5pbmRleCwgaW5kZXgsIGluZGV4ICsgbWF4IC0gMSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdChpbmRleCkge1xuICAgIHJldHVybiBmaWx0ZXIoaW5kZXgpWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkKGl0ZW1zLCBpbmRleCkge1xuICAgIGZvckVhY2goaXRlbXMsIGZ1bmN0aW9uIChzbGlkZSkge1xuICAgICAgaWYgKGlzU3RyaW5nKHNsaWRlKSkge1xuICAgICAgICBzbGlkZSA9IHBhcnNlSHRtbChzbGlkZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0hUTUxFbGVtZW50KHNsaWRlKSkge1xuICAgICAgICB2YXIgcmVmID0gc2xpZGVzW2luZGV4XTtcbiAgICAgICAgcmVmID8gYmVmb3JlKHNsaWRlLCByZWYpIDogYXBwZW5kKGxpc3QsIHNsaWRlKTtcbiAgICAgICAgYWRkQ2xhc3Moc2xpZGUsIG9wdGlvbnMuY2xhc3Nlcy5zbGlkZSk7XG4gICAgICAgIG9ic2VydmVJbWFnZXMoc2xpZGUsIGFwcGx5KGVtaXQsIEVWRU5UX1JFU0laRSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGVtaXQoRVZFTlRfUkVGUkVTSCk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUkMShtYXRjaGVyKSB7XG4gICAgcmVtb3ZlKGZpbHRlcihtYXRjaGVyKS5tYXAoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgcmV0dXJuIFNsaWRlMi5zbGlkZTtcbiAgICB9KSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvckVhY2gkMShpdGVyYXRlZSwgZXhjbHVkZUNsb25lcykge1xuICAgIGdldChleGNsdWRlQ2xvbmVzKS5mb3JFYWNoKGl0ZXJhdGVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbHRlcihtYXRjaGVyKSB7XG4gICAgcmV0dXJuIFNsaWRlczIuZmlsdGVyKGlzRnVuY3Rpb24obWF0Y2hlcikgPyBtYXRjaGVyIDogZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgcmV0dXJuIGlzU3RyaW5nKG1hdGNoZXIpID8gbWF0Y2hlcyhTbGlkZTIuc2xpZGUsIG1hdGNoZXIpIDogaW5jbHVkZXModG9BcnJheShtYXRjaGVyKSwgU2xpZGUyLmluZGV4KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpIHtcbiAgICBmb3JFYWNoJDEoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgU2xpZGUyLnN0eWxlKHByb3AsIHZhbHVlLCB1c2VDb250YWluZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb2JzZXJ2ZUltYWdlcyhlbG0sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGltYWdlcyA9IHF1ZXJ5QWxsKGVsbSwgXCJpbWdcIik7XG4gICAgdmFyIGxlbmd0aCA9IGltYWdlcy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBpbWFnZXMuZm9yRWFjaChmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAgIGJpbmQoaW1nLCBcImxvYWQgZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghIC0tbGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMZW5ndGgoZXhjbHVkZUNsb25lcykge1xuICAgIHJldHVybiBleGNsdWRlQ2xvbmVzID8gc2xpZGVzLmxlbmd0aCA6IFNsaWRlczIubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNFbm91Z2goKSB7XG4gICAgcmV0dXJuIFNsaWRlczIubGVuZ3RoID4gb3B0aW9ucy5wZXJQYWdlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICByZWdpc3RlcjogcmVnaXN0ZXIsXG4gICAgZ2V0OiBnZXQsXG4gICAgZ2V0SW46IGdldEluLFxuICAgIGdldEF0OiBnZXRBdCxcbiAgICBhZGQ6IGFkZCxcbiAgICByZW1vdmU6IHJlbW92ZSQxLFxuICAgIGZvckVhY2g6IGZvckVhY2gkMSxcbiAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgZ2V0TGVuZ3RoOiBnZXRMZW5ndGgsXG4gICAgaXNFbm91Z2g6IGlzRW5vdWdoXG4gIH07XG59XG5cbmZ1bmN0aW9uIExheW91dChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMyA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UzLm9uLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTMuYmluZCxcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2UzLmVtaXQ7XG5cbiAgdmFyIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcztcbiAgdmFyIHJlc29sdmUgPSBDb21wb25lbnRzMi5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIF9Db21wb25lbnRzMiRFbGVtZW50czIgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIHJvb3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMyLnJvb3QsXG4gICAgICB0cmFjayA9IF9Db21wb25lbnRzMiRFbGVtZW50czIudHJhY2ssXG4gICAgICBsaXN0ID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzMi5saXN0O1xuICB2YXIgZ2V0QXQgPSBTbGlkZXMuZ2V0QXQsXG4gICAgICBzdHlsZVNsaWRlcyA9IFNsaWRlcy5zdHlsZTtcbiAgdmFyIHZlcnRpY2FsO1xuICB2YXIgcm9vdFJlY3Q7XG4gIHZhciBvdmVyZmxvdztcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgYmluZCh3aW5kb3csIFwicmVzaXplIGxvYWRcIiwgVGhyb3R0bGUoYXBwbHkoZW1pdCwgRVZFTlRfUkVTSVpFKSkpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgaW5pdCk7XG4gICAgb24oRVZFTlRfUkVTSVpFLCByZXNpemUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2ZXJ0aWNhbCA9IG9wdGlvbnMuZGlyZWN0aW9uID09PSBUVEI7XG4gICAgc3R5bGUocm9vdCwgXCJtYXhXaWR0aFwiLCB1bml0KG9wdGlvbnMud2lkdGgpKTtcbiAgICBzdHlsZSh0cmFjaywgcmVzb2x2ZShcInBhZGRpbmdMZWZ0XCIpLCBjc3NQYWRkaW5nKGZhbHNlKSk7XG4gICAgc3R5bGUodHJhY2ssIHJlc29sdmUoXCJwYWRkaW5nUmlnaHRcIiksIGNzc1BhZGRpbmcodHJ1ZSkpO1xuICAgIHJlc2l6ZSh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZShmb3JjZSkge1xuICAgIHZhciBuZXdSZWN0ID0gcmVjdChyb290KTtcblxuICAgIGlmIChmb3JjZSB8fCByb290UmVjdC53aWR0aCAhPT0gbmV3UmVjdC53aWR0aCB8fCByb290UmVjdC5oZWlnaHQgIT09IG5ld1JlY3QuaGVpZ2h0KSB7XG4gICAgICBzdHlsZSh0cmFjaywgXCJoZWlnaHRcIiwgY3NzVHJhY2tIZWlnaHQoKSk7XG4gICAgICBzdHlsZVNsaWRlcyhyZXNvbHZlKFwibWFyZ2luUmlnaHRcIiksIHVuaXQob3B0aW9ucy5nYXApKTtcbiAgICAgIHN0eWxlU2xpZGVzKFwid2lkdGhcIiwgY3NzU2xpZGVXaWR0aCgpKTtcbiAgICAgIHN0eWxlU2xpZGVzKFwiaGVpZ2h0XCIsIGNzc1NsaWRlSGVpZ2h0KCksIHRydWUpO1xuICAgICAgcm9vdFJlY3QgPSBuZXdSZWN0O1xuICAgICAgZW1pdChFVkVOVF9SRVNJWkVEKTtcblxuICAgICAgaWYgKG92ZXJmbG93ICE9PSAob3ZlcmZsb3cgPSBpc092ZXJmbG93KCkpKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKHJvb3QsIENMQVNTX09WRVJGTE9XLCBvdmVyZmxvdyk7XG4gICAgICAgIGVtaXQoRVZFTlRfT1ZFUkZMT1csIG92ZXJmbG93KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjc3NQYWRkaW5nKHJpZ2h0KSB7XG4gICAgdmFyIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmc7XG4gICAgdmFyIHByb3AgPSByZXNvbHZlKHJpZ2h0ID8gXCJyaWdodFwiIDogXCJsZWZ0XCIpO1xuICAgIHJldHVybiBwYWRkaW5nICYmIHVuaXQocGFkZGluZ1twcm9wXSB8fCAoaXNPYmplY3QocGFkZGluZykgPyAwIDogcGFkZGluZykpIHx8IFwiMHB4XCI7XG4gIH1cblxuICBmdW5jdGlvbiBjc3NUcmFja0hlaWdodCgpIHtcbiAgICB2YXIgaGVpZ2h0ID0gXCJcIjtcblxuICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgaGVpZ2h0ID0gY3NzSGVpZ2h0KCk7XG4gICAgICBhc3NlcnQoaGVpZ2h0LCBcImhlaWdodCBvciBoZWlnaHRSYXRpbyBpcyBtaXNzaW5nLlwiKTtcbiAgICAgIGhlaWdodCA9IFwiY2FsYyhcIiArIGhlaWdodCArIFwiIC0gXCIgKyBjc3NQYWRkaW5nKGZhbHNlKSArIFwiIC0gXCIgKyBjc3NQYWRkaW5nKHRydWUpICsgXCIpXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc0hlaWdodCgpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmhlaWdodCB8fCByZWN0KGxpc3QpLndpZHRoICogb3B0aW9ucy5oZWlnaHRSYXRpbyk7XG4gIH1cblxuICBmdW5jdGlvbiBjc3NTbGlkZVdpZHRoKCkge1xuICAgIHJldHVybiBvcHRpb25zLmF1dG9XaWR0aCA/IG51bGwgOiB1bml0KG9wdGlvbnMuZml4ZWRXaWR0aCkgfHwgKHZlcnRpY2FsID8gXCJcIiA6IGNzc1NsaWRlU2l6ZSgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1NsaWRlSGVpZ2h0KCkge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuZml4ZWRIZWlnaHQpIHx8ICh2ZXJ0aWNhbCA/IG9wdGlvbnMuYXV0b0hlaWdodCA/IG51bGwgOiBjc3NTbGlkZVNpemUoKSA6IGNzc0hlaWdodCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1NsaWRlU2l6ZSgpIHtcbiAgICB2YXIgZ2FwID0gdW5pdChvcHRpb25zLmdhcCk7XG4gICAgcmV0dXJuIFwiY2FsYygoMTAwJVwiICsgKGdhcCAmJiBcIiArIFwiICsgZ2FwKSArIFwiKS9cIiArIChvcHRpb25zLnBlclBhZ2UgfHwgMSkgKyAoZ2FwICYmIFwiIC0gXCIgKyBnYXApICsgXCIpXCI7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0U2l6ZSgpIHtcbiAgICByZXR1cm4gcmVjdChsaXN0KVtyZXNvbHZlKFwid2lkdGhcIildO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xpZGVTaXplKGluZGV4LCB3aXRob3V0R2FwKSB7XG4gICAgdmFyIFNsaWRlID0gZ2V0QXQoaW5kZXggfHwgMCk7XG4gICAgcmV0dXJuIFNsaWRlID8gcmVjdChTbGlkZS5zbGlkZSlbcmVzb2x2ZShcIndpZHRoXCIpXSArICh3aXRob3V0R2FwID8gMCA6IGdldEdhcCgpKSA6IDA7XG4gIH1cblxuICBmdW5jdGlvbiB0b3RhbFNpemUoaW5kZXgsIHdpdGhvdXRHYXApIHtcbiAgICB2YXIgU2xpZGUgPSBnZXRBdChpbmRleCk7XG5cbiAgICBpZiAoU2xpZGUpIHtcbiAgICAgIHZhciByaWdodCA9IHJlY3QoU2xpZGUuc2xpZGUpW3Jlc29sdmUoXCJyaWdodFwiKV07XG4gICAgICB2YXIgbGVmdCA9IHJlY3QobGlzdClbcmVzb2x2ZShcImxlZnRcIildO1xuICAgICAgcmV0dXJuIGFicyhyaWdodCAtIGxlZnQpICsgKHdpdGhvdXRHYXAgPyAwIDogZ2V0R2FwKCkpO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xpZGVyU2l6ZSh3aXRob3V0R2FwKSB7XG4gICAgcmV0dXJuIHRvdGFsU2l6ZShTcGxpZGUyLmxlbmd0aCAtIDEpIC0gdG90YWxTaXplKDApICsgc2xpZGVTaXplKDAsIHdpdGhvdXRHYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0R2FwKCkge1xuICAgIHZhciBTbGlkZSA9IGdldEF0KDApO1xuICAgIHJldHVybiBTbGlkZSAmJiBwYXJzZUZsb2F0KHN0eWxlKFNsaWRlLnNsaWRlLCByZXNvbHZlKFwibWFyZ2luUmlnaHRcIikpKSB8fCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFkZGluZyhyaWdodCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlKHRyYWNrLCByZXNvbHZlKFwicGFkZGluZ1wiICsgKHJpZ2h0ID8gXCJSaWdodFwiIDogXCJMZWZ0XCIpKSkpIHx8IDA7XG4gIH1cblxuICBmdW5jdGlvbiBpc092ZXJmbG93KCkge1xuICAgIHJldHVybiBTcGxpZGUyLmlzKEZBREUpIHx8IHNsaWRlclNpemUodHJ1ZSkgPiBsaXN0U2l6ZSgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgcmVzaXplOiByZXNpemUsXG4gICAgbGlzdFNpemU6IGxpc3RTaXplLFxuICAgIHNsaWRlU2l6ZTogc2xpZGVTaXplLFxuICAgIHNsaWRlclNpemU6IHNsaWRlclNpemUsXG4gICAgdG90YWxTaXplOiB0b3RhbFNpemUsXG4gICAgZ2V0UGFkZGluZzogZ2V0UGFkZGluZyxcbiAgICBpc092ZXJmbG93OiBpc092ZXJmbG93XG4gIH07XG59XG5cbnZhciBNVUxUSVBMSUVSID0gMjtcblxuZnVuY3Rpb24gQ2xvbmVzKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBldmVudCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICB2YXIgb24gPSBldmVudC5vbjtcbiAgdmFyIEVsZW1lbnRzID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXM7XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLnJlc29sdmU7XG4gIHZhciBjbG9uZXMgPSBbXTtcbiAgdmFyIGNsb25lQ291bnQ7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgcmVtb3VudCk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFU0laRV0sIG9ic2VydmUpO1xuXG4gICAgaWYgKGNsb25lQ291bnQgPSBjb21wdXRlQ2xvbmVDb3VudCgpKSB7XG4gICAgICBnZW5lcmF0ZShjbG9uZUNvdW50KTtcbiAgICAgIENvbXBvbmVudHMyLkxheW91dC5yZXNpemUodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgcmVtb3ZlKGNsb25lcyk7XG4gICAgZW1wdHkoY2xvbmVzKTtcbiAgICBldmVudC5kZXN0cm95KCk7XG4gIH1cblxuICBmdW5jdGlvbiBvYnNlcnZlKCkge1xuICAgIHZhciBjb3VudCA9IGNvbXB1dGVDbG9uZUNvdW50KCk7XG5cbiAgICBpZiAoY2xvbmVDb3VudCAhPT0gY291bnQpIHtcbiAgICAgIGlmIChjbG9uZUNvdW50IDwgY291bnQgfHwgIWNvdW50KSB7XG4gICAgICAgIGV2ZW50LmVtaXQoRVZFTlRfUkVGUkVTSCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGUoY291bnQpIHtcbiAgICB2YXIgc2xpZGVzID0gU2xpZGVzLmdldCgpLnNsaWNlKCk7XG4gICAgdmFyIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICB3aGlsZSAoc2xpZGVzLmxlbmd0aCA8IGNvdW50KSB7XG4gICAgICAgIHB1c2goc2xpZGVzLCBzbGlkZXMpO1xuICAgICAgfVxuXG4gICAgICBwdXNoKHNsaWRlcy5zbGljZSgtY291bnQpLCBzbGlkZXMuc2xpY2UoMCwgY291bnQpKS5mb3JFYWNoKGZ1bmN0aW9uIChTbGlkZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGlzSGVhZCA9IGluZGV4IDwgY291bnQ7XG4gICAgICAgIHZhciBjbG9uZSA9IGNsb25lRGVlcChTbGlkZS5zbGlkZSwgaW5kZXgpO1xuICAgICAgICBpc0hlYWQgPyBiZWZvcmUoY2xvbmUsIHNsaWRlc1swXS5zbGlkZSkgOiBhcHBlbmQoRWxlbWVudHMubGlzdCwgY2xvbmUpO1xuICAgICAgICBwdXNoKGNsb25lcywgY2xvbmUpO1xuICAgICAgICBTbGlkZXMucmVnaXN0ZXIoY2xvbmUsIGluZGV4IC0gY291bnQgKyAoaXNIZWFkID8gMCA6IGxlbmd0aCksIFNsaWRlLmluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb25lRGVlcChlbG0sIGluZGV4KSB7XG4gICAgdmFyIGNsb25lID0gZWxtLmNsb25lTm9kZSh0cnVlKTtcbiAgICBhZGRDbGFzcyhjbG9uZSwgb3B0aW9ucy5jbGFzc2VzLmNsb25lKTtcbiAgICBjbG9uZS5pZCA9IFNwbGlkZTIucm9vdC5pZCArIFwiLWNsb25lXCIgKyBwYWQoaW5kZXggKyAxKTtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlQ2xvbmVDb3VudCgpIHtcbiAgICB2YXIgY2xvbmVzMiA9IG9wdGlvbnMuY2xvbmVzO1xuXG4gICAgaWYgKCFTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICBjbG9uZXMyID0gMDtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWZpbmVkKGNsb25lczIpKSB7XG4gICAgICB2YXIgZml4ZWRTaXplID0gb3B0aW9uc1tyZXNvbHZlKFwiZml4ZWRXaWR0aFwiKV0gJiYgQ29tcG9uZW50czIuTGF5b3V0LnNsaWRlU2l6ZSgwKTtcbiAgICAgIHZhciBmaXhlZENvdW50ID0gZml4ZWRTaXplICYmIGNlaWwocmVjdChFbGVtZW50cy50cmFjaylbcmVzb2x2ZShcIndpZHRoXCIpXSAvIGZpeGVkU2l6ZSk7XG4gICAgICBjbG9uZXMyID0gZml4ZWRDb3VudCB8fCBvcHRpb25zW3Jlc29sdmUoXCJhdXRvV2lkdGhcIildICYmIFNwbGlkZTIubGVuZ3RoIHx8IG9wdGlvbnMucGVyUGFnZSAqIE1VTFRJUExJRVI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lczI7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH07XG59XG5cbmZ1bmN0aW9uIE1vdmUoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNC5vbixcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2U0LmVtaXQ7XG5cbiAgdmFyIHNldCA9IFNwbGlkZTIuc3RhdGUuc2V0O1xuICB2YXIgX0NvbXBvbmVudHMyJExheW91dCA9IENvbXBvbmVudHMyLkxheW91dCxcbiAgICAgIHNsaWRlU2l6ZSA9IF9Db21wb25lbnRzMiRMYXlvdXQuc2xpZGVTaXplLFxuICAgICAgZ2V0UGFkZGluZyA9IF9Db21wb25lbnRzMiRMYXlvdXQuZ2V0UGFkZGluZyxcbiAgICAgIHRvdGFsU2l6ZSA9IF9Db21wb25lbnRzMiRMYXlvdXQudG90YWxTaXplLFxuICAgICAgbGlzdFNpemUgPSBfQ29tcG9uZW50czIkTGF5b3V0Lmxpc3RTaXplLFxuICAgICAgc2xpZGVyU2l6ZSA9IF9Db21wb25lbnRzMiRMYXlvdXQuc2xpZGVyU2l6ZTtcbiAgdmFyIF9Db21wb25lbnRzMiREaXJlY3RpbyA9IENvbXBvbmVudHMyLkRpcmVjdGlvbixcbiAgICAgIHJlc29sdmUgPSBfQ29tcG9uZW50czIkRGlyZWN0aW8ucmVzb2x2ZSxcbiAgICAgIG9yaWVudCA9IF9Db21wb25lbnRzMiREaXJlY3Rpby5vcmllbnQ7XG4gIHZhciBfQ29tcG9uZW50czIkRWxlbWVudHMzID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICBsaXN0ID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzMy5saXN0LFxuICAgICAgdHJhY2sgPSBfQ29tcG9uZW50czIkRWxlbWVudHMzLnRyYWNrO1xuICB2YXIgVHJhbnNpdGlvbjtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBUcmFuc2l0aW9uID0gQ29tcG9uZW50czIuVHJhbnNpdGlvbjtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVTSVpFRCwgRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVGUkVTSF0sIHJlcG9zaXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwb3NpdGlvbigpIHtcbiAgICBpZiAoIUNvbXBvbmVudHMyLkNvbnRyb2xsZXIuaXNCdXN5KCkpIHtcbiAgICAgIENvbXBvbmVudHMyLlNjcm9sbC5jYW5jZWwoKTtcbiAgICAgIGp1bXAoU3BsaWRlMi5pbmRleCk7XG4gICAgICBDb21wb25lbnRzMi5TbGlkZXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW92ZShkZXN0LCBpbmRleCwgcHJldiwgY2FsbGJhY2spIHtcbiAgICBpZiAoZGVzdCAhPT0gaW5kZXggJiYgY2FuU2hpZnQoZGVzdCA+IHByZXYpKSB7XG4gICAgICBjYW5jZWwoKTtcbiAgICAgIHRyYW5zbGF0ZShzaGlmdChnZXRQb3NpdGlvbigpLCBkZXN0ID4gcHJldiksIHRydWUpO1xuICAgIH1cblxuICAgIHNldChNT1ZJTkcpO1xuICAgIGVtaXQoRVZFTlRfTU9WRSwgaW5kZXgsIHByZXYsIGRlc3QpO1xuICAgIFRyYW5zaXRpb24uc3RhcnQoaW5kZXgsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldChJRExFKTtcbiAgICAgIGVtaXQoRVZFTlRfTU9WRUQsIGluZGV4LCBwcmV2LCBkZXN0KTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1wKGluZGV4KSB7XG4gICAgdHJhbnNsYXRlKHRvUG9zaXRpb24oaW5kZXgsIHRydWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZShwb3NpdGlvbiwgcHJldmVudExvb3ApIHtcbiAgICBpZiAoIVNwbGlkZTIuaXMoRkFERSkpIHtcbiAgICAgIHZhciBkZXN0aW5hdGlvbiA9IHByZXZlbnRMb29wID8gcG9zaXRpb24gOiBsb29wKHBvc2l0aW9uKTtcbiAgICAgIHN0eWxlKGxpc3QsIFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlXCIgKyByZXNvbHZlKFwiWFwiKSArIFwiKFwiICsgZGVzdGluYXRpb24gKyBcInB4KVwiKTtcbiAgICAgIHBvc2l0aW9uICE9PSBkZXN0aW5hdGlvbiAmJiBlbWl0KEVWRU5UX1NISUZURUQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3AocG9zaXRpb24pIHtcbiAgICBpZiAoU3BsaWRlMi5pcyhMT09QKSkge1xuICAgICAgdmFyIGluZGV4ID0gdG9JbmRleChwb3NpdGlvbik7XG4gICAgICB2YXIgZXhjZWVkZWRNYXggPSBpbmRleCA+IENvbXBvbmVudHMyLkNvbnRyb2xsZXIuZ2V0RW5kKCk7XG4gICAgICB2YXIgZXhjZWVkZWRNaW4gPSBpbmRleCA8IDA7XG5cbiAgICAgIGlmIChleGNlZWRlZE1pbiB8fCBleGNlZWRlZE1heCkge1xuICAgICAgICBwb3NpdGlvbiA9IHNoaWZ0KHBvc2l0aW9uLCBleGNlZWRlZE1heCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hpZnQocG9zaXRpb24sIGJhY2t3YXJkcykge1xuICAgIHZhciBleGNlc3MgPSBwb3NpdGlvbiAtIGdldExpbWl0KGJhY2t3YXJkcyk7XG4gICAgdmFyIHNpemUgPSBzbGlkZXJTaXplKCk7XG4gICAgcG9zaXRpb24gLT0gb3JpZW50KHNpemUgKiAoY2VpbChhYnMoZXhjZXNzKSAvIHNpemUpIHx8IDEpKSAqIChiYWNrd2FyZHMgPyAxIDogLTEpO1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICB0cmFuc2xhdGUoZ2V0UG9zaXRpb24oKSwgdHJ1ZSk7XG4gICAgVHJhbnNpdGlvbi5jYW5jZWwoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSW5kZXgocG9zaXRpb24pIHtcbiAgICB2YXIgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzLmdldCgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIG1pbkRpc3RhbmNlID0gSW5maW5pdHk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IFNsaWRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNsaWRlSW5kZXggPSBTbGlkZXNbaV0uaW5kZXg7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBhYnModG9Qb3NpdGlvbihzbGlkZUluZGV4LCB0cnVlKSAtIHBvc2l0aW9uKTtcblxuICAgICAgaWYgKGRpc3RhbmNlIDw9IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgIGluZGV4ID0gc2xpZGVJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvUG9zaXRpb24oaW5kZXgsIHRyaW1taW5nKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gb3JpZW50KHRvdGFsU2l6ZShpbmRleCAtIDEpIC0gb2Zmc2V0KGluZGV4KSk7XG4gICAgcmV0dXJuIHRyaW1taW5nID8gdHJpbShwb3NpdGlvbikgOiBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBvc2l0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gcmVzb2x2ZShcImxlZnRcIik7XG4gICAgcmV0dXJuIHJlY3QobGlzdClbbGVmdF0gLSByZWN0KHRyYWNrKVtsZWZ0XSArIG9yaWVudChnZXRQYWRkaW5nKGZhbHNlKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmltKHBvc2l0aW9uKSB7XG4gICAgaWYgKG9wdGlvbnMudHJpbVNwYWNlICYmIFNwbGlkZTIuaXMoU0xJREUpKSB7XG4gICAgICBwb3NpdGlvbiA9IGNsYW1wKHBvc2l0aW9uLCAwLCBvcmllbnQoc2xpZGVyU2l6ZSh0cnVlKSAtIGxpc3RTaXplKCkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBvZmZzZXQoaW5kZXgpIHtcbiAgICB2YXIgZm9jdXMgPSBvcHRpb25zLmZvY3VzO1xuICAgIHJldHVybiBmb2N1cyA9PT0gXCJjZW50ZXJcIiA/IChsaXN0U2l6ZSgpIC0gc2xpZGVTaXplKGluZGV4LCB0cnVlKSkgLyAyIDogK2ZvY3VzICogc2xpZGVTaXplKGluZGV4KSB8fCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGltaXQobWF4KSB7XG4gICAgcmV0dXJuIHRvUG9zaXRpb24obWF4ID8gQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRFbmQoKSA6IDAsICEhb3B0aW9ucy50cmltU3BhY2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuU2hpZnQoYmFja3dhcmRzKSB7XG4gICAgdmFyIHNoaWZ0ZWQgPSBvcmllbnQoc2hpZnQoZ2V0UG9zaXRpb24oKSwgYmFja3dhcmRzKSk7XG4gICAgcmV0dXJuIGJhY2t3YXJkcyA/IHNoaWZ0ZWQgPj0gMCA6IHNoaWZ0ZWQgPD0gbGlzdFtyZXNvbHZlKFwic2Nyb2xsV2lkdGhcIildIC0gcmVjdCh0cmFjaylbcmVzb2x2ZShcIndpZHRoXCIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4Y2VlZGVkTGltaXQobWF4LCBwb3NpdGlvbikge1xuICAgIHBvc2l0aW9uID0gaXNVbmRlZmluZWQocG9zaXRpb24pID8gZ2V0UG9zaXRpb24oKSA6IHBvc2l0aW9uO1xuICAgIHZhciBleGNlZWRlZE1pbiA9IG1heCAhPT0gdHJ1ZSAmJiBvcmllbnQocG9zaXRpb24pIDwgb3JpZW50KGdldExpbWl0KGZhbHNlKSk7XG4gICAgdmFyIGV4Y2VlZGVkTWF4ID0gbWF4ICE9PSBmYWxzZSAmJiBvcmllbnQocG9zaXRpb24pID4gb3JpZW50KGdldExpbWl0KHRydWUpKTtcbiAgICByZXR1cm4gZXhjZWVkZWRNaW4gfHwgZXhjZWVkZWRNYXg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBtb3ZlOiBtb3ZlLFxuICAgIGp1bXA6IGp1bXAsXG4gICAgdHJhbnNsYXRlOiB0cmFuc2xhdGUsXG4gICAgc2hpZnQ6IHNoaWZ0LFxuICAgIGNhbmNlbDogY2FuY2VsLFxuICAgIHRvSW5kZXg6IHRvSW5kZXgsXG4gICAgdG9Qb3NpdGlvbjogdG9Qb3NpdGlvbixcbiAgICBnZXRQb3NpdGlvbjogZ2V0UG9zaXRpb24sXG4gICAgZ2V0TGltaXQ6IGdldExpbWl0LFxuICAgIGV4Y2VlZGVkTGltaXQ6IGV4Y2VlZGVkTGltaXQsXG4gICAgcmVwb3NpdGlvbjogcmVwb3NpdGlvblxuICB9O1xufVxuXG5mdW5jdGlvbiBDb250cm9sbGVyKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U1ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTUub24sXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlNS5lbWl0O1xuXG4gIHZhciBNb3ZlID0gQ29tcG9uZW50czIuTW92ZTtcbiAgdmFyIGdldFBvc2l0aW9uID0gTW92ZS5nZXRQb3NpdGlvbixcbiAgICAgIGdldExpbWl0ID0gTW92ZS5nZXRMaW1pdCxcbiAgICAgIHRvUG9zaXRpb24gPSBNb3ZlLnRvUG9zaXRpb247XG4gIHZhciBfQ29tcG9uZW50czIkU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzLFxuICAgICAgaXNFbm91Z2ggPSBfQ29tcG9uZW50czIkU2xpZGVzLmlzRW5vdWdoLFxuICAgICAgZ2V0TGVuZ3RoID0gX0NvbXBvbmVudHMyJFNsaWRlcy5nZXRMZW5ndGg7XG4gIHZhciBvbWl0RW5kID0gb3B0aW9ucy5vbWl0RW5kO1xuICB2YXIgaXNMb29wID0gU3BsaWRlMi5pcyhMT09QKTtcbiAgdmFyIGlzU2xpZGUgPSBTcGxpZGUyLmlzKFNMSURFKTtcbiAgdmFyIGdldE5leHQgPSBhcHBseShnZXRBZGphY2VudCwgZmFsc2UpO1xuICB2YXIgZ2V0UHJldiA9IGFwcGx5KGdldEFkamFjZW50LCB0cnVlKTtcbiAgdmFyIGN1cnJJbmRleCA9IG9wdGlvbnMuc3RhcnQgfHwgMDtcbiAgdmFyIGVuZEluZGV4O1xuICB2YXIgcHJldkluZGV4ID0gY3VyckluZGV4O1xuICB2YXIgc2xpZGVDb3VudDtcbiAgdmFyIHBlck1vdmU7XG4gIHZhciBwZXJQYWdlO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihbRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVGUkVTSCwgRVZFTlRfRU5EX0lOREVYX0NIQU5HRURdLCBpbml0KTtcbiAgICBvbihFVkVOVF9SRVNJWkVELCBvblJlc2l6ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzbGlkZUNvdW50ID0gZ2V0TGVuZ3RoKHRydWUpO1xuICAgIHBlck1vdmUgPSBvcHRpb25zLnBlck1vdmU7XG4gICAgcGVyUGFnZSA9IG9wdGlvbnMucGVyUGFnZTtcbiAgICBlbmRJbmRleCA9IGdldEVuZCgpO1xuICAgIHZhciBpbmRleCA9IGNsYW1wKGN1cnJJbmRleCwgMCwgb21pdEVuZCA/IGVuZEluZGV4IDogc2xpZGVDb3VudCAtIDEpO1xuXG4gICAgaWYgKGluZGV4ICE9PSBjdXJySW5kZXgpIHtcbiAgICAgIGN1cnJJbmRleCA9IGluZGV4O1xuICAgICAgTW92ZS5yZXBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXNpemVkKCkge1xuICAgIGlmIChlbmRJbmRleCAhPT0gZ2V0RW5kKCkpIHtcbiAgICAgIGVtaXQoRVZFTlRfRU5EX0lOREVYX0NIQU5HRUQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGNvbnRyb2wsIGFsbG93U2FtZUluZGV4LCBjYWxsYmFjaykge1xuICAgIGlmICghaXNCdXN5KCkpIHtcbiAgICAgIHZhciBkZXN0ID0gcGFyc2UoY29udHJvbCk7XG4gICAgICB2YXIgaW5kZXggPSBsb29wKGRlc3QpO1xuXG4gICAgICBpZiAoaW5kZXggPiAtMSAmJiAoYWxsb3dTYW1lSW5kZXggfHwgaW5kZXggIT09IGN1cnJJbmRleCkpIHtcbiAgICAgICAgc2V0SW5kZXgoaW5kZXgpO1xuICAgICAgICBNb3ZlLm1vdmUoZGVzdCwgaW5kZXgsIHByZXZJbmRleCwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbChkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNuYXAsIGNhbGxiYWNrKSB7XG4gICAgQ29tcG9uZW50czIuU2Nyb2xsLnNjcm9sbChkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNuYXAsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbmRleCA9IGxvb3AoTW92ZS50b0luZGV4KGdldFBvc2l0aW9uKCkpKTtcbiAgICAgIHNldEluZGV4KG9taXRFbmQgPyBtaW4oaW5kZXgsIGVuZEluZGV4KSA6IGluZGV4KTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZShjb250cm9sKSB7XG4gICAgdmFyIGluZGV4ID0gY3VyckluZGV4O1xuXG4gICAgaWYgKGlzU3RyaW5nKGNvbnRyb2wpKSB7XG4gICAgICB2YXIgX3JlZiA9IGNvbnRyb2wubWF0Y2goLyhbK1xcLTw+XSkoXFxkKyk/LykgfHwgW10sXG4gICAgICAgICAgaW5kaWNhdG9yID0gX3JlZlsxXSxcbiAgICAgICAgICBudW1iZXIgPSBfcmVmWzJdO1xuXG4gICAgICBpZiAoaW5kaWNhdG9yID09PSBcIitcIiB8fCBpbmRpY2F0b3IgPT09IFwiLVwiKSB7XG4gICAgICAgIGluZGV4ID0gY29tcHV0ZURlc3RJbmRleChjdXJySW5kZXggKyArKFwiXCIgKyBpbmRpY2F0b3IgKyAoK251bWJlciB8fCAxKSksIGN1cnJJbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKGluZGljYXRvciA9PT0gXCI+XCIpIHtcbiAgICAgICAgaW5kZXggPSBudW1iZXIgPyB0b0luZGV4KCtudW1iZXIpIDogZ2V0TmV4dCh0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNhdG9yID09PSBcIjxcIikge1xuICAgICAgICBpbmRleCA9IGdldFByZXYodHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gaXNMb29wID8gY29udHJvbCA6IGNsYW1wKGNvbnRyb2wsIDAsIGVuZEluZGV4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBZGphY2VudChwcmV2LCBkZXN0aW5hdGlvbikge1xuICAgIHZhciBudW1iZXIgPSBwZXJNb3ZlIHx8IChoYXNGb2N1cygpID8gMSA6IHBlclBhZ2UpO1xuICAgIHZhciBkZXN0ID0gY29tcHV0ZURlc3RJbmRleChjdXJySW5kZXggKyBudW1iZXIgKiAocHJldiA/IC0xIDogMSksIGN1cnJJbmRleCwgIShwZXJNb3ZlIHx8IGhhc0ZvY3VzKCkpKTtcblxuICAgIGlmIChkZXN0ID09PSAtMSAmJiBpc1NsaWRlKSB7XG4gICAgICBpZiAoIWFwcHJveGltYXRlbHlFcXVhbChnZXRQb3NpdGlvbigpLCBnZXRMaW1pdCghcHJldiksIDEpKSB7XG4gICAgICAgIHJldHVybiBwcmV2ID8gMCA6IGVuZEluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZXN0aW5hdGlvbiA/IGRlc3QgOiBsb29wKGRlc3QpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZURlc3RJbmRleChkZXN0LCBmcm9tLCBzbmFwUGFnZSkge1xuICAgIGlmIChpc0Vub3VnaCgpIHx8IGhhc0ZvY3VzKCkpIHtcbiAgICAgIHZhciBpbmRleCA9IGNvbXB1dGVNb3ZhYmxlRGVzdEluZGV4KGRlc3QpO1xuXG4gICAgICBpZiAoaW5kZXggIT09IGRlc3QpIHtcbiAgICAgICAgZnJvbSA9IGRlc3Q7XG4gICAgICAgIGRlc3QgPSBpbmRleDtcbiAgICAgICAgc25hcFBhZ2UgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlc3QgPCAwIHx8IGRlc3QgPiBlbmRJbmRleCkge1xuICAgICAgICBpZiAoIXBlck1vdmUgJiYgKGJldHdlZW4oMCwgZGVzdCwgZnJvbSwgdHJ1ZSkgfHwgYmV0d2VlbihlbmRJbmRleCwgZnJvbSwgZGVzdCwgdHJ1ZSkpKSB7XG4gICAgICAgICAgZGVzdCA9IHRvSW5kZXgodG9QYWdlKGRlc3QpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNMb29wKSB7XG4gICAgICAgICAgICBkZXN0ID0gc25hcFBhZ2UgPyBkZXN0IDwgMCA/IC0oc2xpZGVDb3VudCAlIHBlclBhZ2UgfHwgcGVyUGFnZSkgOiBzbGlkZUNvdW50IDogZGVzdDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucmV3aW5kKSB7XG4gICAgICAgICAgICBkZXN0ID0gZGVzdCA8IDAgPyBlbmRJbmRleCA6IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3QgPSAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzbmFwUGFnZSAmJiBkZXN0ICE9PSBmcm9tKSB7XG4gICAgICAgICAgZGVzdCA9IHRvSW5kZXgodG9QYWdlKGZyb20pICsgKGRlc3QgPCBmcm9tID8gLTEgOiAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdCA9IC0xO1xuICAgIH1cblxuICAgIHJldHVybiBkZXN0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZU1vdmFibGVEZXN0SW5kZXgoZGVzdCkge1xuICAgIGlmIChpc1NsaWRlICYmIG9wdGlvbnMudHJpbVNwYWNlID09PSBcIm1vdmVcIiAmJiBkZXN0ICE9PSBjdXJySW5kZXgpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKCk7XG5cbiAgICAgIHdoaWxlIChwb3NpdGlvbiA9PT0gdG9Qb3NpdGlvbihkZXN0LCB0cnVlKSAmJiBiZXR3ZWVuKGRlc3QsIDAsIFNwbGlkZTIubGVuZ3RoIC0gMSwgIW9wdGlvbnMucmV3aW5kKSkge1xuICAgICAgICBkZXN0IDwgY3VyckluZGV4ID8gLS1kZXN0IDogKytkZXN0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZXN0O1xuICB9XG5cbiAgZnVuY3Rpb24gbG9vcChpbmRleCkge1xuICAgIHJldHVybiBpc0xvb3AgPyAoaW5kZXggKyBzbGlkZUNvdW50KSAlIHNsaWRlQ291bnQgfHwgMCA6IGluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RW5kKCkge1xuICAgIHZhciBlbmQgPSBzbGlkZUNvdW50IC0gKGhhc0ZvY3VzKCkgfHwgaXNMb29wICYmIHBlck1vdmUgPyAxIDogcGVyUGFnZSk7XG5cbiAgICB3aGlsZSAob21pdEVuZCAmJiBlbmQtLSA+IDApIHtcbiAgICAgIGlmICh0b1Bvc2l0aW9uKHNsaWRlQ291bnQgLSAxLCB0cnVlKSAhPT0gdG9Qb3NpdGlvbihlbmQsIHRydWUpKSB7XG4gICAgICAgIGVuZCsrO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xhbXAoZW5kLCAwLCBzbGlkZUNvdW50IC0gMSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b0luZGV4KHBhZ2UpIHtcbiAgICByZXR1cm4gY2xhbXAoaGFzRm9jdXMoKSA/IHBhZ2UgOiBwZXJQYWdlICogcGFnZSwgMCwgZW5kSW5kZXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9QYWdlKGluZGV4KSB7XG4gICAgcmV0dXJuIGhhc0ZvY3VzKCkgPyBtaW4oaW5kZXgsIGVuZEluZGV4KSA6IGZsb29yKChpbmRleCA+PSBlbmRJbmRleCA/IHNsaWRlQ291bnQgLSAxIDogaW5kZXgpIC8gcGVyUGFnZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b0Rlc3QoZGVzdGluYXRpb24pIHtcbiAgICB2YXIgY2xvc2VzdCA9IE1vdmUudG9JbmRleChkZXN0aW5hdGlvbik7XG4gICAgcmV0dXJuIGlzU2xpZGUgPyBjbGFtcChjbG9zZXN0LCAwLCBlbmRJbmRleCkgOiBjbG9zZXN0O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5kZXgoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggIT09IGN1cnJJbmRleCkge1xuICAgICAgcHJldkluZGV4ID0gY3VyckluZGV4O1xuICAgICAgY3VyckluZGV4ID0gaW5kZXg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXgocHJldikge1xuICAgIHJldHVybiBwcmV2ID8gcHJldkluZGV4IDogY3VyckluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzRm9jdXMoKSB7XG4gICAgcmV0dXJuICFpc1VuZGVmaW5lZChvcHRpb25zLmZvY3VzKSB8fCBvcHRpb25zLmlzTmF2aWdhdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQnVzeSgpIHtcbiAgICByZXR1cm4gU3BsaWRlMi5zdGF0ZS5pcyhbTU9WSU5HLCBTQ1JPTExJTkddKSAmJiAhIW9wdGlvbnMud2FpdEZvclRyYW5zaXRpb247XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBnbzogZ28sXG4gICAgc2Nyb2xsOiBzY3JvbGwsXG4gICAgZ2V0TmV4dDogZ2V0TmV4dCxcbiAgICBnZXRQcmV2OiBnZXRQcmV2LFxuICAgIGdldEFkamFjZW50OiBnZXRBZGphY2VudCxcbiAgICBnZXRFbmQ6IGdldEVuZCxcbiAgICBzZXRJbmRleDogc2V0SW5kZXgsXG4gICAgZ2V0SW5kZXg6IGdldEluZGV4LFxuICAgIHRvSW5kZXg6IHRvSW5kZXgsXG4gICAgdG9QYWdlOiB0b1BhZ2UsXG4gICAgdG9EZXN0OiB0b0Rlc3QsXG4gICAgaGFzRm9jdXM6IGhhc0ZvY3VzLFxuICAgIGlzQnVzeTogaXNCdXN5XG4gIH07XG59XG5cbnZhciBYTUxfTkFNRV9TUEFDRSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbnZhciBQQVRIID0gXCJtMTUuNSAwLjkzMi00LjMgNC4zOCAxNC41IDE0LjYtMTQuNSAxNC41IDQuMyA0LjQgMTQuNi0xNC42IDQuNC00LjMtNC40LTQuNC0xNC42LTE0LjZ6XCI7XG52YXIgU0laRSA9IDQwO1xuXG5mdW5jdGlvbiBBcnJvd3MoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIHZhciBvbiA9IGV2ZW50Lm9uLFxuICAgICAgYmluZCA9IGV2ZW50LmJpbmQsXG4gICAgICBlbWl0ID0gZXZlbnQuZW1pdDtcbiAgdmFyIGNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXMsXG4gICAgICBpMThuID0gb3B0aW9ucy5pMThuO1xuICB2YXIgRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBFbGVtZW50cy5hcnJvd3MsXG4gICAgICB0cmFjayA9IEVsZW1lbnRzLnRyYWNrO1xuICB2YXIgd3JhcHBlciA9IHBsYWNlaG9sZGVyO1xuICB2YXIgcHJldiA9IEVsZW1lbnRzLnByZXY7XG4gIHZhciBuZXh0ID0gRWxlbWVudHMubmV4dDtcbiAgdmFyIGNyZWF0ZWQ7XG4gIHZhciB3cmFwcGVyQ2xhc3NlcztcbiAgdmFyIGFycm93cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBvbihFVkVOVF9VUERBVEVELCByZW1vdW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW91bnQoKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIG1vdW50KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBlbmFibGVkID0gb3B0aW9ucy5hcnJvd3M7XG5cbiAgICBpZiAoZW5hYmxlZCAmJiAhKHByZXYgJiYgbmV4dCkpIHtcbiAgICAgIGNyZWF0ZUFycm93cygpO1xuICAgIH1cblxuICAgIGlmIChwcmV2ICYmIG5leHQpIHtcbiAgICAgIGFzc2lnbihhcnJvd3MsIHtcbiAgICAgICAgcHJldjogcHJldixcbiAgICAgICAgbmV4dDogbmV4dFxuICAgICAgfSk7XG4gICAgICBkaXNwbGF5KHdyYXBwZXIsIGVuYWJsZWQgPyBcIlwiIDogXCJub25lXCIpO1xuICAgICAgYWRkQ2xhc3Mod3JhcHBlciwgd3JhcHBlckNsYXNzZXMgPSBDTEFTU19BUlJPV1MgKyBcIi0tXCIgKyBvcHRpb25zLmRpcmVjdGlvbik7XG5cbiAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgIGxpc3RlbigpO1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgc2V0QXR0cmlidXRlKFtwcmV2LCBuZXh0XSwgQVJJQV9DT05UUk9MUywgdHJhY2suaWQpO1xuICAgICAgICBlbWl0KEVWRU5UX0FSUk9XU19NT1VOVEVELCBwcmV2LCBuZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgICByZW1vdmVDbGFzcyh3cmFwcGVyLCB3cmFwcGVyQ2xhc3Nlcyk7XG5cbiAgICBpZiAoY3JlYXRlZCkge1xuICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyID8gW3ByZXYsIG5leHRdIDogd3JhcHBlcik7XG4gICAgICBwcmV2ID0gbmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZUF0dHJpYnV0ZShbcHJldiwgbmV4dF0sIEFMTF9BVFRSSUJVVEVTKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4oKSB7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX01PVkVELCBFVkVOVF9SRUZSRVNILCBFVkVOVF9TQ1JPTExFRCwgRVZFTlRfRU5EX0lOREVYX0NIQU5HRURdLCB1cGRhdGUpO1xuICAgIGJpbmQobmV4dCwgXCJjbGlja1wiLCBhcHBseShnbywgXCI+XCIpKTtcbiAgICBiaW5kKHByZXYsIFwiY2xpY2tcIiwgYXBwbHkoZ28sIFwiPFwiKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhjb250cm9sKSB7XG4gICAgQ29udHJvbGxlci5nbyhjb250cm9sLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycm93cygpIHtcbiAgICB3cmFwcGVyID0gcGxhY2Vob2xkZXIgfHwgY3JlYXRlKFwiZGl2XCIsIGNsYXNzZXMuYXJyb3dzKTtcbiAgICBwcmV2ID0gY3JlYXRlQXJyb3codHJ1ZSk7XG4gICAgbmV4dCA9IGNyZWF0ZUFycm93KGZhbHNlKTtcbiAgICBjcmVhdGVkID0gdHJ1ZTtcbiAgICBhcHBlbmQod3JhcHBlciwgW3ByZXYsIG5leHRdKTtcbiAgICAhcGxhY2Vob2xkZXIgJiYgYmVmb3JlKHdyYXBwZXIsIHRyYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFycm93KHByZXYyKSB7XG4gICAgdmFyIGFycm93ID0gXCI8YnV0dG9uIGNsYXNzPVxcXCJcIiArIGNsYXNzZXMuYXJyb3cgKyBcIiBcIiArIChwcmV2MiA/IGNsYXNzZXMucHJldiA6IGNsYXNzZXMubmV4dCkgKyBcIlxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIj48c3ZnIHhtbG5zPVxcXCJcIiArIFhNTF9OQU1FX1NQQUNFICsgXCJcXFwiIHZpZXdCb3g9XFxcIjAgMCBcIiArIFNJWkUgKyBcIiBcIiArIFNJWkUgKyBcIlxcXCIgd2lkdGg9XFxcIlwiICsgU0laRSArIFwiXFxcIiBoZWlnaHQ9XFxcIlwiICsgU0laRSArIFwiXFxcIiBmb2N1c2FibGU9XFxcImZhbHNlXFxcIj48cGF0aCBkPVxcXCJcIiArIChvcHRpb25zLmFycm93UGF0aCB8fCBQQVRIKSArIFwiXFxcIiAvPlwiO1xuICAgIHJldHVybiBwYXJzZUh0bWwoYXJyb3cpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGlmIChwcmV2ICYmIG5leHQpIHtcbiAgICAgIHZhciBpbmRleCA9IFNwbGlkZTIuaW5kZXg7XG4gICAgICB2YXIgcHJldkluZGV4ID0gQ29udHJvbGxlci5nZXRQcmV2KCk7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gQ29udHJvbGxlci5nZXROZXh0KCk7XG4gICAgICB2YXIgcHJldkxhYmVsID0gcHJldkluZGV4ID4gLTEgJiYgaW5kZXggPCBwcmV2SW5kZXggPyBpMThuLmxhc3QgOiBpMThuLnByZXY7XG4gICAgICB2YXIgbmV4dExhYmVsID0gbmV4dEluZGV4ID4gLTEgJiYgaW5kZXggPiBuZXh0SW5kZXggPyBpMThuLmZpcnN0IDogaTE4bi5uZXh0O1xuICAgICAgcHJldi5kaXNhYmxlZCA9IHByZXZJbmRleCA8IDA7XG4gICAgICBuZXh0LmRpc2FibGVkID0gbmV4dEluZGV4IDwgMDtcbiAgICAgIHNldEF0dHJpYnV0ZShwcmV2LCBBUklBX0xBQkVMLCBwcmV2TGFiZWwpO1xuICAgICAgc2V0QXR0cmlidXRlKG5leHQsIEFSSUFfTEFCRUwsIG5leHRMYWJlbCk7XG4gICAgICBlbWl0KEVWRU5UX0FSUk9XU19VUERBVEVELCBwcmV2LCBuZXh0LCBwcmV2SW5kZXgsIG5leHRJbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhcnJvd3M6IGFycm93cyxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICB1cGRhdGU6IHVwZGF0ZVxuICB9O1xufVxuXG52YXIgSU5URVJWQUxfREFUQV9BVFRSSUJVVEUgPSBEQVRBX0FUVFJJQlVURSArIFwiLWludGVydmFsXCI7XG5cbmZ1bmN0aW9uIEF1dG9wbGF5KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U2ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTYub24sXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlNi5iaW5kLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTYuZW1pdDtcblxuICB2YXIgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwob3B0aW9ucy5pbnRlcnZhbCwgU3BsaWRlMi5nby5iaW5kKFNwbGlkZTIsIFwiPlwiKSwgb25BbmltYXRpb25GcmFtZSk7XG4gIHZhciBpc1BhdXNlZCA9IGludGVydmFsLmlzUGF1c2VkO1xuICB2YXIgRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIF9Db21wb25lbnRzMiRFbGVtZW50czQgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIHJvb3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHM0LnJvb3QsXG4gICAgICB0b2dnbGUgPSBfQ29tcG9uZW50czIkRWxlbWVudHM0LnRvZ2dsZTtcbiAgdmFyIGF1dG9wbGF5ID0gb3B0aW9ucy5hdXRvcGxheTtcbiAgdmFyIGhvdmVyZWQ7XG4gIHZhciBmb2N1c2VkO1xuICB2YXIgc3RvcHBlZCA9IGF1dG9wbGF5ID09PSBcInBhdXNlXCI7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKGF1dG9wbGF5KSB7XG4gICAgICBsaXN0ZW4oKTtcbiAgICAgIHRvZ2dsZSAmJiBzZXRBdHRyaWJ1dGUodG9nZ2xlLCBBUklBX0NPTlRST0xTLCBFbGVtZW50cy50cmFjay5pZCk7XG4gICAgICBzdG9wcGVkIHx8IHBsYXkoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICBpZiAob3B0aW9ucy5wYXVzZU9uSG92ZXIpIHtcbiAgICAgIGJpbmQocm9vdCwgXCJtb3VzZWVudGVyIG1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaG92ZXJlZCA9IGUudHlwZSA9PT0gXCJtb3VzZWVudGVyXCI7XG4gICAgICAgIGF1dG9Ub2dnbGUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnBhdXNlT25Gb2N1cykge1xuICAgICAgYmluZChyb290LCBcImZvY3VzaW4gZm9jdXNvdXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZm9jdXNlZCA9IGUudHlwZSA9PT0gXCJmb2N1c2luXCI7XG4gICAgICAgIGF1dG9Ub2dnbGUoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0b2dnbGUpIHtcbiAgICAgIGJpbmQodG9nZ2xlLCBcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RvcHBlZCA/IHBsYXkoKSA6IHBhdXNlKHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgb24oW0VWRU5UX01PVkUsIEVWRU5UX1NDUk9MTCwgRVZFTlRfUkVGUkVTSF0sIGludGVydmFsLnJld2luZCk7XG4gICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgaWYgKGlzUGF1c2VkKCkgJiYgQ29tcG9uZW50czIuU2xpZGVzLmlzRW5vdWdoKCkpIHtcbiAgICAgIGludGVydmFsLnN0YXJ0KCFvcHRpb25zLnJlc2V0UHJvZ3Jlc3MpO1xuICAgICAgZm9jdXNlZCA9IGhvdmVyZWQgPSBzdG9wcGVkID0gZmFsc2U7XG4gICAgICB1cGRhdGUoKTtcbiAgICAgIGVtaXQoRVZFTlRfQVVUT1BMQVlfUExBWSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2Uoc3RvcCkge1xuICAgIGlmIChzdG9wID09PSB2b2lkIDApIHtcbiAgICAgIHN0b3AgPSB0cnVlO1xuICAgIH1cblxuICAgIHN0b3BwZWQgPSAhIXN0b3A7XG4gICAgdXBkYXRlKCk7XG5cbiAgICBpZiAoIWlzUGF1c2VkKCkpIHtcbiAgICAgIGludGVydmFsLnBhdXNlKCk7XG4gICAgICBlbWl0KEVWRU5UX0FVVE9QTEFZX1BBVVNFKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdXRvVG9nZ2xlKCkge1xuICAgIGlmICghc3RvcHBlZCkge1xuICAgICAgaG92ZXJlZCB8fCBmb2N1c2VkID8gcGF1c2UoZmFsc2UpIDogcGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAodG9nZ2xlKSB7XG4gICAgICB0b2dnbGVDbGFzcyh0b2dnbGUsIENMQVNTX0FDVElWRSwgIXN0b3BwZWQpO1xuICAgICAgc2V0QXR0cmlidXRlKHRvZ2dsZSwgQVJJQV9MQUJFTCwgb3B0aW9ucy5pMThuW3N0b3BwZWQgPyBcInBsYXlcIiA6IFwicGF1c2VcIl0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUocmF0ZSkge1xuICAgIHZhciBiYXIgPSBFbGVtZW50cy5iYXI7XG4gICAgYmFyICYmIHN0eWxlKGJhciwgXCJ3aWR0aFwiLCByYXRlICogMTAwICsgXCIlXCIpO1xuICAgIGVtaXQoRVZFTlRfQVVUT1BMQVlfUExBWUlORywgcmF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoaW5kZXgpIHtcbiAgICB2YXIgU2xpZGUgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0QXQoaW5kZXgpO1xuICAgIGludGVydmFsLnNldChTbGlkZSAmJiArZ2V0QXR0cmlidXRlKFNsaWRlLnNsaWRlLCBJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSkgfHwgb3B0aW9ucy5pbnRlcnZhbCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBpbnRlcnZhbC5jYW5jZWwsXG4gICAgcGxheTogcGxheSxcbiAgICBwYXVzZTogcGF1c2UsXG4gICAgaXNQYXVzZWQ6IGlzUGF1c2VkXG4gIH07XG59XG5cbmZ1bmN0aW9uIENvdmVyKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U3ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTcub247XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKG9wdGlvbnMuY292ZXIpIHtcbiAgICAgIG9uKEVWRU5UX0xBWllMT0FEX0xPQURFRCwgYXBwbHkodG9nZ2xlLCB0cnVlKSk7XG4gICAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVGUkVTSF0sIGFwcGx5KGNvdmVyLCB0cnVlKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY292ZXIoY292ZXIyKSB7XG4gICAgQ29tcG9uZW50czIuU2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKFNsaWRlKSB7XG4gICAgICB2YXIgaW1nID0gY2hpbGQoU2xpZGUuY29udGFpbmVyIHx8IFNsaWRlLnNsaWRlLCBcImltZ1wiKTtcblxuICAgICAgaWYgKGltZyAmJiBpbWcuc3JjKSB7XG4gICAgICAgIHRvZ2dsZShjb3ZlcjIsIGltZywgU2xpZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlKGNvdmVyMiwgaW1nLCBTbGlkZSkge1xuICAgIFNsaWRlLnN0eWxlKFwiYmFja2dyb3VuZFwiLCBjb3ZlcjIgPyBcImNlbnRlci9jb3ZlciBuby1yZXBlYXQgdXJsKFxcXCJcIiArIGltZy5zcmMgKyBcIlxcXCIpXCIgOiBcIlwiLCB0cnVlKTtcbiAgICBkaXNwbGF5KGltZywgY292ZXIyID8gXCJub25lXCIgOiBcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGFwcGx5KGNvdmVyLCBmYWxzZSlcbiAgfTtcbn1cblxudmFyIEJPVU5DRV9ESUZGX1RIUkVTSE9MRCA9IDEwO1xudmFyIEJPVU5DRV9EVVJBVElPTiA9IDYwMDtcbnZhciBGUklDVElPTl9GQUNUT1IgPSAwLjY7XG52YXIgQkFTRV9WRUxPQ0lUWSA9IDEuNTtcbnZhciBNSU5fRFVSQVRJT04gPSA4MDA7XG5cbmZ1bmN0aW9uIFNjcm9sbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlOCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U4Lm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTguZW1pdDtcblxuICB2YXIgc2V0ID0gU3BsaWRlMi5zdGF0ZS5zZXQ7XG4gIHZhciBNb3ZlID0gQ29tcG9uZW50czIuTW92ZTtcbiAgdmFyIGdldFBvc2l0aW9uID0gTW92ZS5nZXRQb3NpdGlvbixcbiAgICAgIGdldExpbWl0ID0gTW92ZS5nZXRMaW1pdCxcbiAgICAgIGV4Y2VlZGVkTGltaXQgPSBNb3ZlLmV4Y2VlZGVkTGltaXQsXG4gICAgICB0cmFuc2xhdGUgPSBNb3ZlLnRyYW5zbGF0ZTtcbiAgdmFyIGlzU2xpZGUgPSBTcGxpZGUyLmlzKFNMSURFKTtcbiAgdmFyIGludGVydmFsO1xuICB2YXIgY2FsbGJhY2s7XG4gIHZhciBmcmljdGlvbiA9IDE7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgb24oRVZFTlRfTU9WRSwgY2xlYXIpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgY2FuY2VsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbChkZXN0aW5hdGlvbiwgZHVyYXRpb24sIHNuYXAsIG9uU2Nyb2xsZWQsIG5vQ29uc3RyYWluKSB7XG4gICAgdmFyIGZyb20gPSBnZXRQb3NpdGlvbigpO1xuICAgIGNsZWFyKCk7XG5cbiAgICBpZiAoc25hcCAmJiAoIWlzU2xpZGUgfHwgIWV4Y2VlZGVkTGltaXQoKSkpIHtcbiAgICAgIHZhciBzaXplID0gQ29tcG9uZW50czIuTGF5b3V0LnNsaWRlclNpemUoKTtcbiAgICAgIHZhciBvZmZzZXQgPSBzaWduKGRlc3RpbmF0aW9uKSAqIHNpemUgKiBmbG9vcihhYnMoZGVzdGluYXRpb24pIC8gc2l6ZSkgfHwgMDtcbiAgICAgIGRlc3RpbmF0aW9uID0gTW92ZS50b1Bvc2l0aW9uKENvbXBvbmVudHMyLkNvbnRyb2xsZXIudG9EZXN0KGRlc3RpbmF0aW9uICUgc2l6ZSkpICsgb2Zmc2V0O1xuICAgIH1cblxuICAgIHZhciBub0Rpc3RhbmNlID0gYXBwcm94aW1hdGVseUVxdWFsKGZyb20sIGRlc3RpbmF0aW9uLCAxKTtcbiAgICBmcmljdGlvbiA9IDE7XG4gICAgZHVyYXRpb24gPSBub0Rpc3RhbmNlID8gMCA6IGR1cmF0aW9uIHx8IG1heChhYnMoZGVzdGluYXRpb24gLSBmcm9tKSAvIEJBU0VfVkVMT0NJVFksIE1JTl9EVVJBVElPTik7XG4gICAgY2FsbGJhY2sgPSBvblNjcm9sbGVkO1xuICAgIGludGVydmFsID0gUmVxdWVzdEludGVydmFsKGR1cmF0aW9uLCBvbkVuZCwgYXBwbHkodXBkYXRlLCBmcm9tLCBkZXN0aW5hdGlvbiwgbm9Db25zdHJhaW4pLCAxKTtcbiAgICBzZXQoU0NST0xMSU5HKTtcbiAgICBlbWl0KEVWRU5UX1NDUk9MTCk7XG4gICAgaW50ZXJ2YWwuc3RhcnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRW5kKCkge1xuICAgIHNldChJRExFKTtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIGVtaXQoRVZFTlRfU0NST0xMRUQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKGZyb20sIHRvLCBub0NvbnN0cmFpbiwgcmF0ZSkge1xuICAgIHZhciBwb3NpdGlvbiA9IGdldFBvc2l0aW9uKCk7XG4gICAgdmFyIHRhcmdldCA9IGZyb20gKyAodG8gLSBmcm9tKSAqIGVhc2luZyhyYXRlKTtcbiAgICB2YXIgZGlmZiA9ICh0YXJnZXQgLSBwb3NpdGlvbikgKiBmcmljdGlvbjtcbiAgICB0cmFuc2xhdGUocG9zaXRpb24gKyBkaWZmKTtcblxuICAgIGlmIChpc1NsaWRlICYmICFub0NvbnN0cmFpbiAmJiBleGNlZWRlZExpbWl0KCkpIHtcbiAgICAgIGZyaWN0aW9uICo9IEZSSUNUSU9OX0ZBQ1RPUjtcblxuICAgICAgaWYgKGFicyhkaWZmKSA8IEJPVU5DRV9ESUZGX1RIUkVTSE9MRCkge1xuICAgICAgICBzY3JvbGwoZ2V0TGltaXQoZXhjZWVkZWRMaW1pdCh0cnVlKSksIEJPVU5DRV9EVVJBVElPTiwgZmFsc2UsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgIGludGVydmFsLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAoaW50ZXJ2YWwgJiYgIWludGVydmFsLmlzUGF1c2VkKCkpIHtcbiAgICAgIGNsZWFyKCk7XG4gICAgICBvbkVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVhc2luZyh0KSB7XG4gICAgdmFyIGVhc2luZ0Z1bmMgPSBvcHRpb25zLmVhc2luZ0Z1bmM7XG4gICAgcmV0dXJuIGVhc2luZ0Z1bmMgPyBlYXNpbmdGdW5jKHQpIDogMSAtIE1hdGgucG93KDEgLSB0LCA0KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGNsZWFyLFxuICAgIHNjcm9sbDogc2Nyb2xsLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59XG5cbnZhciBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyA9IHtcbiAgcGFzc2l2ZTogZmFsc2UsXG4gIGNhcHR1cmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIERyYWcoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTkgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlOS5vbixcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2U5LmVtaXQsXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlOS5iaW5kLFxuICAgICAgdW5iaW5kID0gX0V2ZW50SW50ZXJmYWNlOS51bmJpbmQ7XG5cbiAgdmFyIHN0YXRlID0gU3BsaWRlMi5zdGF0ZTtcbiAgdmFyIE1vdmUgPSBDb21wb25lbnRzMi5Nb3ZlLFxuICAgICAgU2Nyb2xsID0gQ29tcG9uZW50czIuU2Nyb2xsLFxuICAgICAgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXIsXG4gICAgICB0cmFjayA9IENvbXBvbmVudHMyLkVsZW1lbnRzLnRyYWNrLFxuICAgICAgcmVkdWNlID0gQ29tcG9uZW50czIuTWVkaWEucmVkdWNlO1xuICB2YXIgX0NvbXBvbmVudHMyJERpcmVjdGlvMiA9IENvbXBvbmVudHMyLkRpcmVjdGlvbixcbiAgICAgIHJlc29sdmUgPSBfQ29tcG9uZW50czIkRGlyZWN0aW8yLnJlc29sdmUsXG4gICAgICBvcmllbnQgPSBfQ29tcG9uZW50czIkRGlyZWN0aW8yLm9yaWVudDtcbiAgdmFyIGdldFBvc2l0aW9uID0gTW92ZS5nZXRQb3NpdGlvbixcbiAgICAgIGV4Y2VlZGVkTGltaXQgPSBNb3ZlLmV4Y2VlZGVkTGltaXQ7XG4gIHZhciBiYXNlUG9zaXRpb247XG4gIHZhciBiYXNlRXZlbnQ7XG4gIHZhciBwcmV2QmFzZUV2ZW50O1xuICB2YXIgaXNGcmVlO1xuICB2YXIgZHJhZ2dpbmc7XG4gIHZhciBleGNlZWRlZCA9IGZhbHNlO1xuICB2YXIgY2xpY2tQcmV2ZW50ZWQ7XG4gIHZhciBkaXNhYmxlZDtcbiAgdmFyIHRhcmdldDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX01PVkVfRVZFTlRTLCBub29wLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgUE9JTlRFUl9VUF9FVkVOVFMsIG5vb3AsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX0RPV05fRVZFTlRTLCBvblBvaW50ZXJEb3duLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgYmluZCh0cmFjaywgXCJjbGlja1wiLCBvbkNsaWNrLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gICAgYmluZCh0cmFjaywgXCJkcmFnc3RhcnRcIiwgcHJldmVudCk7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCBpbml0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGRyYWcgPSBvcHRpb25zLmRyYWc7XG4gICAgZGlzYWJsZSghZHJhZyk7XG4gICAgaXNGcmVlID0gZHJhZyA9PT0gXCJmcmVlXCI7XG4gIH1cblxuICBmdW5jdGlvbiBvblBvaW50ZXJEb3duKGUpIHtcbiAgICBjbGlja1ByZXZlbnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgdmFyIGlzVG91Y2ggPSBpc1RvdWNoRXZlbnQoZSk7XG5cbiAgICAgIGlmIChpc0RyYWdnYWJsZShlLnRhcmdldCkgJiYgKGlzVG91Y2ggfHwgIWUuYnV0dG9uKSkge1xuICAgICAgICBpZiAoIUNvbnRyb2xsZXIuaXNCdXN5KCkpIHtcbiAgICAgICAgICB0YXJnZXQgPSBpc1RvdWNoID8gdHJhY2sgOiB3aW5kb3c7XG4gICAgICAgICAgZHJhZ2dpbmcgPSBzdGF0ZS5pcyhbTU9WSU5HLCBTQ1JPTExJTkddKTtcbiAgICAgICAgICBwcmV2QmFzZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICBiaW5kKHRhcmdldCwgUE9JTlRFUl9NT1ZFX0VWRU5UUywgb25Qb2ludGVyTW92ZSwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgICAgICAgIGJpbmQodGFyZ2V0LCBQT0lOVEVSX1VQX0VWRU5UUywgb25Qb2ludGVyVXAsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICAgICAgICBNb3ZlLmNhbmNlbCgpO1xuICAgICAgICAgIFNjcm9sbC5jYW5jZWwoKTtcbiAgICAgICAgICBzYXZlKGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZlbnQoZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblBvaW50ZXJNb3ZlKGUpIHtcbiAgICBpZiAoIXN0YXRlLmlzKERSQUdHSU5HKSkge1xuICAgICAgc3RhdGUuc2V0KERSQUdHSU5HKTtcbiAgICAgIGVtaXQoRVZFTlRfRFJBRyk7XG4gICAgfVxuXG4gICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgaWYgKGRyYWdnaW5nKSB7XG4gICAgICAgIE1vdmUudHJhbnNsYXRlKGJhc2VQb3NpdGlvbiArIGNvbnN0cmFpbihkaWZmQ29vcmQoZSkpKTtcbiAgICAgICAgdmFyIGV4cGlyZWQgPSBkaWZmVGltZShlKSA+IExPR19JTlRFUlZBTDtcbiAgICAgICAgdmFyIGhhc0V4Y2VlZGVkID0gZXhjZWVkZWQgIT09IChleGNlZWRlZCA9IGV4Y2VlZGVkTGltaXQoKSk7XG5cbiAgICAgICAgaWYgKGV4cGlyZWQgfHwgaGFzRXhjZWVkZWQpIHtcbiAgICAgICAgICBzYXZlKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpY2tQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBlbWl0KEVWRU5UX0RSQUdHSU5HKTtcbiAgICAgICAgcHJldmVudChlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTbGlkZXJEaXJlY3Rpb24oZSkpIHtcbiAgICAgICAgZHJhZ2dpbmcgPSBzaG91bGRTdGFydChlKTtcbiAgICAgICAgcHJldmVudChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblBvaW50ZXJVcChlKSB7XG4gICAgaWYgKHN0YXRlLmlzKERSQUdHSU5HKSkge1xuICAgICAgc3RhdGUuc2V0KElETEUpO1xuICAgICAgZW1pdChFVkVOVF9EUkFHR0VEKTtcbiAgICB9XG5cbiAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgIG1vdmUoZSk7XG4gICAgICBwcmV2ZW50KGUpO1xuICAgIH1cblxuICAgIHVuYmluZCh0YXJnZXQsIFBPSU5URVJfTU9WRV9FVkVOVFMsIG9uUG9pbnRlck1vdmUpO1xuICAgIHVuYmluZCh0YXJnZXQsIFBPSU5URVJfVVBfRVZFTlRTLCBvblBvaW50ZXJVcCk7XG4gICAgZHJhZ2dpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgIGlmICghZGlzYWJsZWQgJiYgY2xpY2tQcmV2ZW50ZWQpIHtcbiAgICAgIHByZXZlbnQoZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZShlKSB7XG4gICAgcHJldkJhc2VFdmVudCA9IGJhc2VFdmVudDtcbiAgICBiYXNlRXZlbnQgPSBlO1xuICAgIGJhc2VQb3NpdGlvbiA9IGdldFBvc2l0aW9uKCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKGUpIHtcbiAgICB2YXIgdmVsb2NpdHkgPSBjb21wdXRlVmVsb2NpdHkoZSk7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gY29tcHV0ZURlc3RpbmF0aW9uKHZlbG9jaXR5KTtcbiAgICB2YXIgcmV3aW5kID0gb3B0aW9ucy5yZXdpbmQgJiYgb3B0aW9ucy5yZXdpbmRCeURyYWc7XG4gICAgcmVkdWNlKGZhbHNlKTtcblxuICAgIGlmIChpc0ZyZWUpIHtcbiAgICAgIENvbnRyb2xsZXIuc2Nyb2xsKGRlc3RpbmF0aW9uLCAwLCBvcHRpb25zLnNuYXApO1xuICAgIH0gZWxzZSBpZiAoU3BsaWRlMi5pcyhGQURFKSkge1xuICAgICAgQ29udHJvbGxlci5nbyhvcmllbnQoc2lnbih2ZWxvY2l0eSkpIDwgMCA/IHJld2luZCA/IFwiPFwiIDogXCItXCIgOiByZXdpbmQgPyBcIj5cIiA6IFwiK1wiKTtcbiAgICB9IGVsc2UgaWYgKFNwbGlkZTIuaXMoU0xJREUpICYmIGV4Y2VlZGVkICYmIHJld2luZCkge1xuICAgICAgQ29udHJvbGxlci5nbyhleGNlZWRlZExpbWl0KHRydWUpID8gXCI+XCIgOiBcIjxcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIENvbnRyb2xsZXIuZ28oQ29udHJvbGxlci50b0Rlc3QoZGVzdGluYXRpb24pLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZWR1Y2UodHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRTdGFydChlKSB7XG4gICAgdmFyIHRocmVzaG9sZHMgPSBvcHRpb25zLmRyYWdNaW5UaHJlc2hvbGQ7XG4gICAgdmFyIGlzT2JqID0gaXNPYmplY3QodGhyZXNob2xkcyk7XG4gICAgdmFyIG1vdXNlID0gaXNPYmogJiYgdGhyZXNob2xkcy5tb3VzZSB8fCAwO1xuICAgIHZhciB0b3VjaCA9IChpc09iaiA/IHRocmVzaG9sZHMudG91Y2ggOiArdGhyZXNob2xkcykgfHwgMTA7XG4gICAgcmV0dXJuIGFicyhkaWZmQ29vcmQoZSkpID4gKGlzVG91Y2hFdmVudChlKSA/IHRvdWNoIDogbW91c2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTbGlkZXJEaXJlY3Rpb24oZSkge1xuICAgIHJldHVybiBhYnMoZGlmZkNvb3JkKGUpKSA+IGFicyhkaWZmQ29vcmQoZSwgdHJ1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcHV0ZVZlbG9jaXR5KGUpIHtcbiAgICBpZiAoU3BsaWRlMi5pcyhMT09QKSB8fCAhZXhjZWVkZWQpIHtcbiAgICAgIHZhciB0aW1lID0gZGlmZlRpbWUoZSk7XG5cbiAgICAgIGlmICh0aW1lICYmIHRpbWUgPCBMT0dfSU5URVJWQUwpIHtcbiAgICAgICAgcmV0dXJuIGRpZmZDb29yZChlKSAvIHRpbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpIHtcbiAgICByZXR1cm4gZ2V0UG9zaXRpb24oKSArIHNpZ24odmVsb2NpdHkpICogbWluKGFicyh2ZWxvY2l0eSkgKiAob3B0aW9ucy5mbGlja1Bvd2VyIHx8IDYwMCksIGlzRnJlZSA/IEluZmluaXR5IDogQ29tcG9uZW50czIuTGF5b3V0Lmxpc3RTaXplKCkgKiAob3B0aW9ucy5mbGlja01heFBhZ2VzIHx8IDEpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpZmZDb29yZChlLCBvcnRob2dvbmFsKSB7XG4gICAgcmV0dXJuIGNvb3JkT2YoZSwgb3J0aG9nb25hbCkgLSBjb29yZE9mKGdldEJhc2VFdmVudChlKSwgb3J0aG9nb25hbCk7XG4gIH1cblxuICBmdW5jdGlvbiBkaWZmVGltZShlKSB7XG4gICAgcmV0dXJuIHRpbWVPZihlKSAtIHRpbWVPZihnZXRCYXNlRXZlbnQoZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QmFzZUV2ZW50KGUpIHtcbiAgICByZXR1cm4gYmFzZUV2ZW50ID09PSBlICYmIHByZXZCYXNlRXZlbnQgfHwgYmFzZUV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gY29vcmRPZihlLCBvcnRob2dvbmFsKSB7XG4gICAgcmV0dXJuIChpc1RvdWNoRXZlbnQoZSkgPyBlLmNoYW5nZWRUb3VjaGVzWzBdIDogZSlbXCJwYWdlXCIgKyByZXNvbHZlKG9ydGhvZ29uYWwgPyBcIllcIiA6IFwiWFwiKV07XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdHJhaW4oZGlmZikge1xuICAgIHJldHVybiBkaWZmIC8gKGV4Y2VlZGVkICYmIFNwbGlkZTIuaXMoU0xJREUpID8gRlJJQ1RJT04gOiAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRHJhZ2dhYmxlKHRhcmdldDIpIHtcbiAgICB2YXIgbm9EcmFnID0gb3B0aW9ucy5ub0RyYWc7XG4gICAgcmV0dXJuICFtYXRjaGVzKHRhcmdldDIsIFwiLlwiICsgQ0xBU1NfUEFHSU5BVElPTl9QQUdFICsgXCIsIC5cIiArIENMQVNTX0FSUk9XKSAmJiAoIW5vRHJhZyB8fCAhbWF0Y2hlcyh0YXJnZXQyLCBub0RyYWcpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVG91Y2hFdmVudChlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBUb3VjaEV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGUgaW5zdGFuY2VvZiBUb3VjaEV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNEcmFnZ2luZygpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhYmxlKHZhbHVlKSB7XG4gICAgZGlzYWJsZWQgPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRpc2FibGU6IGRpc2FibGUsXG4gICAgaXNEcmFnZ2luZzogaXNEcmFnZ2luZ1xuICB9O1xufVxuXG52YXIgTk9STUFMSVpBVElPTl9NQVAgPSB7XG4gIFNwYWNlYmFyOiBcIiBcIixcbiAgUmlnaHQ6IEFSUk9XX1JJR0hULFxuICBMZWZ0OiBBUlJPV19MRUZULFxuICBVcDogQVJST1dfVVAsXG4gIERvd246IEFSUk9XX0RPV05cbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleShrZXkpIHtcbiAga2V5ID0gaXNTdHJpbmcoa2V5KSA/IGtleSA6IGtleS5rZXk7XG4gIHJldHVybiBOT1JNQUxJWkFUSU9OX01BUFtrZXldIHx8IGtleTtcbn1cblxudmFyIEtFWUJPQVJEX0VWRU5UID0gXCJrZXlkb3duXCI7XG5cbmZ1bmN0aW9uIEtleWJvYXJkKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UxMCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UxMC5vbixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UxMC5iaW5kLFxuICAgICAgdW5iaW5kID0gX0V2ZW50SW50ZXJmYWNlMTAudW5iaW5kO1xuXG4gIHZhciByb290ID0gU3BsaWRlMi5yb290O1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgdGFyZ2V0O1xuICB2YXIgZGlzYWJsZWQ7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIGRlc3Ryb3kpO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIGluaXQpO1xuICAgIG9uKEVWRU5UX01PVkUsIG9uTW92ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBrZXlib2FyZCA9IG9wdGlvbnMua2V5Ym9hcmQ7XG5cbiAgICBpZiAoa2V5Ym9hcmQpIHtcbiAgICAgIHRhcmdldCA9IGtleWJvYXJkID09PSBcImdsb2JhbFwiID8gd2luZG93IDogcm9vdDtcbiAgICAgIGJpbmQodGFyZ2V0LCBLRVlCT0FSRF9FVkVOVCwgb25LZXlkb3duKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHVuYmluZCh0YXJnZXQsIEtFWUJPQVJEX0VWRU5UKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUodmFsdWUpIHtcbiAgICBkaXNhYmxlZCA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3ZlKCkge1xuICAgIHZhciBfZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICBkaXNhYmxlZCA9IHRydWU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgZGlzYWJsZWQgPSBfZGlzYWJsZWQ7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbktleWRvd24oZSkge1xuICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXkoZSk7XG5cbiAgICAgIGlmIChrZXkgPT09IHJlc29sdmUoQVJST1dfTEVGVCkpIHtcbiAgICAgICAgU3BsaWRlMi5nbyhcIjxcIik7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gcmVzb2x2ZShBUlJPV19SSUdIVCkpIHtcbiAgICAgICAgU3BsaWRlMi5nbyhcIj5cIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBkaXNhYmxlOiBkaXNhYmxlXG4gIH07XG59XG5cbnZhciBTUkNfREFUQV9BVFRSSUJVVEUgPSBEQVRBX0FUVFJJQlVURSArIFwiLWxhenlcIjtcbnZhciBTUkNTRVRfREFUQV9BVFRSSUJVVEUgPSBTUkNfREFUQV9BVFRSSUJVVEUgKyBcIi1zcmNzZXRcIjtcbnZhciBJTUFHRV9TRUxFQ1RPUiA9IFwiW1wiICsgU1JDX0RBVEFfQVRUUklCVVRFICsgXCJdLCBbXCIgKyBTUkNTRVRfREFUQV9BVFRSSUJVVEUgKyBcIl1cIjtcblxuZnVuY3Rpb24gTGF6eUxvYWQoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTExID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTExLm9uLFxuICAgICAgb2ZmID0gX0V2ZW50SW50ZXJmYWNlMTEub2ZmLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTExLmJpbmQsXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlMTEuZW1pdDtcblxuICB2YXIgaXNTZXF1ZW50aWFsID0gb3B0aW9ucy5sYXp5TG9hZCA9PT0gXCJzZXF1ZW50aWFsXCI7XG4gIHZhciBldmVudHMgPSBbRVZFTlRfTU9WRUQsIEVWRU5UX1NDUk9MTEVEXTtcbiAgdmFyIGVudHJpZXMgPSBbXTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5sYXp5TG9hZCkge1xuICAgICAgaW5pdCgpO1xuICAgICAgb24oRVZFTlRfUkVGUkVTSCwgaW5pdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBlbXB0eShlbnRyaWVzKTtcbiAgICByZWdpc3RlcigpO1xuXG4gICAgaWYgKGlzU2VxdWVudGlhbCkge1xuICAgICAgbG9hZE5leHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2ZmKGV2ZW50cyk7XG4gICAgICBvbihldmVudHMsIGNoZWNrKTtcbiAgICAgIGNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgQ29tcG9uZW50czIuU2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKFNsaWRlKSB7XG4gICAgICBxdWVyeUFsbChTbGlkZS5zbGlkZSwgSU1BR0VfU0VMRUNUT1IpLmZvckVhY2goZnVuY3Rpb24gKGltZykge1xuICAgICAgICB2YXIgc3JjID0gZ2V0QXR0cmlidXRlKGltZywgU1JDX0RBVEFfQVRUUklCVVRFKTtcbiAgICAgICAgdmFyIHNyY3NldCA9IGdldEF0dHJpYnV0ZShpbWcsIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSk7XG5cbiAgICAgICAgaWYgKHNyYyAhPT0gaW1nLnNyYyB8fCBzcmNzZXQgIT09IGltZy5zcmNzZXQpIHtcbiAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc2VzLnNwaW5uZXI7XG4gICAgICAgICAgdmFyIHBhcmVudCA9IGltZy5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgIHZhciBzcGlubmVyID0gY2hpbGQocGFyZW50LCBcIi5cIiArIGNsYXNzTmFtZSkgfHwgY3JlYXRlKFwic3BhblwiLCBjbGFzc05hbWUsIHBhcmVudCk7XG4gICAgICAgICAgZW50cmllcy5wdXNoKFtpbWcsIFNsaWRlLCBzcGlubmVyXSk7XG4gICAgICAgICAgaW1nLnNyYyB8fCBkaXNwbGF5KGltZywgXCJub25lXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrKCkge1xuICAgIGVudHJpZXMgPSBlbnRyaWVzLmZpbHRlcihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdmFyIGRpc3RhbmNlID0gb3B0aW9ucy5wZXJQYWdlICogKChvcHRpb25zLnByZWxvYWRQYWdlcyB8fCAxKSArIDEpIC0gMTtcbiAgICAgIHJldHVybiBkYXRhWzFdLmlzV2l0aGluKFNwbGlkZTIuaW5kZXgsIGRpc3RhbmNlKSA/IGxvYWQoZGF0YSkgOiB0cnVlO1xuICAgIH0pO1xuICAgIGVudHJpZXMubGVuZ3RoIHx8IG9mZihldmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZChkYXRhKSB7XG4gICAgdmFyIGltZyA9IGRhdGFbMF07XG4gICAgYWRkQ2xhc3MoZGF0YVsxXS5zbGlkZSwgQ0xBU1NfTE9BRElORyk7XG4gICAgYmluZChpbWcsIFwibG9hZCBlcnJvclwiLCBhcHBseShvbkxvYWQsIGRhdGEpKTtcbiAgICBzZXRBdHRyaWJ1dGUoaW1nLCBcInNyY1wiLCBnZXRBdHRyaWJ1dGUoaW1nLCBTUkNfREFUQV9BVFRSSUJVVEUpKTtcbiAgICBzZXRBdHRyaWJ1dGUoaW1nLCBcInNyY3NldFwiLCBnZXRBdHRyaWJ1dGUoaW1nLCBTUkNTRVRfREFUQV9BVFRSSUJVVEUpKTtcbiAgICByZW1vdmVBdHRyaWJ1dGUoaW1nLCBTUkNfREFUQV9BVFRSSUJVVEUpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShpbWcsIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkxvYWQoZGF0YSwgZSkge1xuICAgIHZhciBpbWcgPSBkYXRhWzBdLFxuICAgICAgICBTbGlkZSA9IGRhdGFbMV07XG4gICAgcmVtb3ZlQ2xhc3MoU2xpZGUuc2xpZGUsIENMQVNTX0xPQURJTkcpO1xuXG4gICAgaWYgKGUudHlwZSAhPT0gXCJlcnJvclwiKSB7XG4gICAgICByZW1vdmUoZGF0YVsyXSk7XG4gICAgICBkaXNwbGF5KGltZywgXCJcIik7XG4gICAgICBlbWl0KEVWRU5UX0xBWllMT0FEX0xPQURFRCwgaW1nLCBTbGlkZSk7XG4gICAgICBlbWl0KEVWRU5UX1JFU0laRSk7XG4gICAgfVxuXG4gICAgaXNTZXF1ZW50aWFsICYmIGxvYWROZXh0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkTmV4dCgpIHtcbiAgICBlbnRyaWVzLmxlbmd0aCAmJiBsb2FkKGVudHJpZXMuc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBhcHBseShlbXB0eSwgZW50cmllcyksXG4gICAgY2hlY2s6IGNoZWNrXG4gIH07XG59XG5cbmZ1bmN0aW9uIFBhZ2luYXRpb24oU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIHZhciBvbiA9IGV2ZW50Lm9uLFxuICAgICAgZW1pdCA9IGV2ZW50LmVtaXQsXG4gICAgICBiaW5kID0gZXZlbnQuYmluZDtcbiAgdmFyIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcyxcbiAgICAgIEVsZW1lbnRzID0gQ29tcG9uZW50czIuRWxlbWVudHMsXG4gICAgICBDb250cm9sbGVyID0gQ29tcG9uZW50czIuQ29udHJvbGxlcjtcbiAgdmFyIGhhc0ZvY3VzID0gQ29udHJvbGxlci5oYXNGb2N1cyxcbiAgICAgIGdldEluZGV4ID0gQ29udHJvbGxlci5nZXRJbmRleCxcbiAgICAgIGdvID0gQ29udHJvbGxlci5nbztcbiAgdmFyIHJlc29sdmUgPSBDb21wb25lbnRzMi5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIHBsYWNlaG9sZGVyID0gRWxlbWVudHMucGFnaW5hdGlvbjtcbiAgdmFyIGl0ZW1zID0gW107XG4gIHZhciBsaXN0O1xuICB2YXIgcGFnaW5hdGlvbkNsYXNzZXM7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNILCBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRF0sIG1vdW50KTtcbiAgICB2YXIgZW5hYmxlZCA9IG9wdGlvbnMucGFnaW5hdGlvbjtcbiAgICBwbGFjZWhvbGRlciAmJiBkaXNwbGF5KHBsYWNlaG9sZGVyLCBlbmFibGVkID8gXCJcIiA6IFwibm9uZVwiKTtcblxuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBvbihbRVZFTlRfTU9WRSwgRVZFTlRfU0NST0xMLCBFVkVOVF9TQ1JPTExFRF0sIHVwZGF0ZSk7XG4gICAgICBjcmVhdGVQYWdpbmF0aW9uKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICAgIGVtaXQoRVZFTlRfUEFHSU5BVElPTl9NT1VOVEVELCB7XG4gICAgICAgIGxpc3Q6IGxpc3QsXG4gICAgICAgIGl0ZW1zOiBpdGVtc1xuICAgICAgfSwgZ2V0QXQoU3BsaWRlMi5pbmRleCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKGxpc3QpIHtcbiAgICAgIHJlbW92ZShwbGFjZWhvbGRlciA/IHNsaWNlKGxpc3QuY2hpbGRyZW4pIDogbGlzdCk7XG4gICAgICByZW1vdmVDbGFzcyhsaXN0LCBwYWdpbmF0aW9uQ2xhc3Nlcyk7XG4gICAgICBlbXB0eShpdGVtcyk7XG4gICAgICBsaXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBldmVudC5kZXN0cm95KCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQYWdpbmF0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSBTcGxpZGUyLmxlbmd0aDtcbiAgICB2YXIgY2xhc3NlcyA9IG9wdGlvbnMuY2xhc3NlcyxcbiAgICAgICAgaTE4biA9IG9wdGlvbnMuaTE4bixcbiAgICAgICAgcGVyUGFnZSA9IG9wdGlvbnMucGVyUGFnZTtcbiAgICB2YXIgbWF4ID0gaGFzRm9jdXMoKSA/IENvbnRyb2xsZXIuZ2V0RW5kKCkgKyAxIDogY2VpbChsZW5ndGggLyBwZXJQYWdlKTtcbiAgICBsaXN0ID0gcGxhY2Vob2xkZXIgfHwgY3JlYXRlKFwidWxcIiwgY2xhc3Nlcy5wYWdpbmF0aW9uLCBFbGVtZW50cy50cmFjay5wYXJlbnRFbGVtZW50KTtcbiAgICBhZGRDbGFzcyhsaXN0LCBwYWdpbmF0aW9uQ2xhc3NlcyA9IENMQVNTX1BBR0lOQVRJT04gKyBcIi0tXCIgKyBnZXREaXJlY3Rpb24oKSk7XG4gICAgc2V0QXR0cmlidXRlKGxpc3QsIFJPTEUsIFwidGFibGlzdFwiKTtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgQVJJQV9MQUJFTCwgaTE4bi5zZWxlY3QpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBBUklBX09SSUVOVEFUSU9OLCBnZXREaXJlY3Rpb24oKSA9PT0gVFRCID8gXCJ2ZXJ0aWNhbFwiIDogXCJcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICB2YXIgbGkgPSBjcmVhdGUoXCJsaVwiLCBudWxsLCBsaXN0KTtcbiAgICAgIHZhciBidXR0b24gPSBjcmVhdGUoXCJidXR0b25cIiwge1xuICAgICAgICBjbGFzczogY2xhc3Nlcy5wYWdlLFxuICAgICAgICB0eXBlOiBcImJ1dHRvblwiXG4gICAgICB9LCBsaSk7XG4gICAgICB2YXIgY29udHJvbHMgPSBTbGlkZXMuZ2V0SW4oaSkubWFwKGZ1bmN0aW9uIChTbGlkZSkge1xuICAgICAgICByZXR1cm4gU2xpZGUuc2xpZGUuaWQ7XG4gICAgICB9KTtcbiAgICAgIHZhciB0ZXh0ID0gIWhhc0ZvY3VzKCkgJiYgcGVyUGFnZSA+IDEgPyBpMThuLnBhZ2VYIDogaTE4bi5zbGlkZVg7XG4gICAgICBiaW5kKGJ1dHRvbiwgXCJjbGlja1wiLCBhcHBseShvbkNsaWNrLCBpKSk7XG5cbiAgICAgIGlmIChvcHRpb25zLnBhZ2luYXRpb25LZXlib2FyZCkge1xuICAgICAgICBiaW5kKGJ1dHRvbiwgXCJrZXlkb3duXCIsIGFwcGx5KG9uS2V5ZG93biwgaSkpO1xuICAgICAgfVxuXG4gICAgICBzZXRBdHRyaWJ1dGUobGksIFJPTEUsIFwicHJlc2VudGF0aW9uXCIpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgUk9MRSwgXCJ0YWJcIik7XG4gICAgICBzZXRBdHRyaWJ1dGUoYnV0dG9uLCBBUklBX0NPTlRST0xTLCBjb250cm9scy5qb2luKFwiIFwiKSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoYnV0dG9uLCBBUklBX0xBQkVMLCBmb3JtYXQodGV4dCwgaSArIDEpKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIFRBQl9JTkRFWCwgLTEpO1xuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIGxpOiBsaSxcbiAgICAgICAgYnV0dG9uOiBidXR0b24sXG4gICAgICAgIHBhZ2U6IGlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2socGFnZSkge1xuICAgIGdvKFwiPlwiICsgcGFnZSwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbktleWRvd24ocGFnZSwgZSkge1xuICAgIHZhciBsZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleShlKTtcbiAgICB2YXIgZGlyID0gZ2V0RGlyZWN0aW9uKCk7XG4gICAgdmFyIG5leHRQYWdlID0gLTE7XG5cbiAgICBpZiAoa2V5ID09PSByZXNvbHZlKEFSUk9XX1JJR0hULCBmYWxzZSwgZGlyKSkge1xuICAgICAgbmV4dFBhZ2UgPSArK3BhZ2UgJSBsZW5ndGg7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IHJlc29sdmUoQVJST1dfTEVGVCwgZmFsc2UsIGRpcikpIHtcbiAgICAgIG5leHRQYWdlID0gKC0tcGFnZSArIGxlbmd0aCkgJSBsZW5ndGg7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiSG9tZVwiKSB7XG4gICAgICBuZXh0UGFnZSA9IDA7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiRW5kXCIpIHtcbiAgICAgIG5leHRQYWdlID0gbGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICB2YXIgaXRlbSA9IGl0ZW1zW25leHRQYWdlXTtcblxuICAgIGlmIChpdGVtKSB7XG4gICAgICBmb2N1cyhpdGVtLmJ1dHRvbik7XG4gICAgICBnbyhcIj5cIiArIG5leHRQYWdlKTtcbiAgICAgIHByZXZlbnQoZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uKCkge1xuICAgIHJldHVybiBvcHRpb25zLnBhZ2luYXRpb25EaXJlY3Rpb24gfHwgb3B0aW9ucy5kaXJlY3Rpb247XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdChpbmRleCkge1xuICAgIHJldHVybiBpdGVtc1tDb250cm9sbGVyLnRvUGFnZShpbmRleCldO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBwcmV2ID0gZ2V0QXQoZ2V0SW5kZXgodHJ1ZSkpO1xuICAgIHZhciBjdXJyID0gZ2V0QXQoZ2V0SW5kZXgoKSk7XG5cbiAgICBpZiAocHJldikge1xuICAgICAgdmFyIGJ1dHRvbiA9IHByZXYuYnV0dG9uO1xuICAgICAgcmVtb3ZlQ2xhc3MoYnV0dG9uLCBDTEFTU19BQ1RJVkUpO1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKGJ1dHRvbiwgQVJJQV9TRUxFQ1RFRCk7XG4gICAgICBzZXRBdHRyaWJ1dGUoYnV0dG9uLCBUQUJfSU5ERVgsIC0xKTtcbiAgICB9XG5cbiAgICBpZiAoY3Vycikge1xuICAgICAgdmFyIF9idXR0b24gPSBjdXJyLmJ1dHRvbjtcbiAgICAgIGFkZENsYXNzKF9idXR0b24sIENMQVNTX0FDVElWRSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoX2J1dHRvbiwgQVJJQV9TRUxFQ1RFRCwgdHJ1ZSk7XG4gICAgICBzZXRBdHRyaWJ1dGUoX2J1dHRvbiwgVEFCX0lOREVYLCBcIlwiKTtcbiAgICB9XG5cbiAgICBlbWl0KEVWRU5UX1BBR0lOQVRJT05fVVBEQVRFRCwge1xuICAgICAgbGlzdDogbGlzdCxcbiAgICAgIGl0ZW1zOiBpdGVtc1xuICAgIH0sIHByZXYsIGN1cnIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpdGVtczogaXRlbXMsXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgZ2V0QXQ6IGdldEF0LFxuICAgIHVwZGF0ZTogdXBkYXRlXG4gIH07XG59XG5cbnZhciBUUklHR0VSX0tFWVMgPSBbXCIgXCIsIFwiRW50ZXJcIl07XG5cbmZ1bmN0aW9uIFN5bmMoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIGlzTmF2aWdhdGlvbiA9IG9wdGlvbnMuaXNOYXZpZ2F0aW9uLFxuICAgICAgc2xpZGVGb2N1cyA9IG9wdGlvbnMuc2xpZGVGb2N1cztcbiAgdmFyIGV2ZW50cyA9IFtdO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIFNwbGlkZTIuc3BsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIGlmICghdGFyZ2V0LmlzUGFyZW50KSB7XG4gICAgICAgIHN5bmMoU3BsaWRlMiwgdGFyZ2V0LnNwbGlkZSk7XG4gICAgICAgIHN5bmModGFyZ2V0LnNwbGlkZSwgU3BsaWRlMik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNOYXZpZ2F0aW9uKSB7XG4gICAgICBuYXZpZ2F0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5kZXN0cm95KCk7XG4gICAgfSk7XG4gICAgZW1wdHkoZXZlbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW91bnQoKSB7XG4gICAgZGVzdHJveSgpO1xuICAgIG1vdW50KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzeW5jKHNwbGlkZSwgdGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2Uoc3BsaWRlKTtcbiAgICBldmVudC5vbihFVkVOVF9NT1ZFLCBmdW5jdGlvbiAoaW5kZXgsIHByZXYsIGRlc3QpIHtcbiAgICAgIHRhcmdldC5nbyh0YXJnZXQuaXMoTE9PUCkgPyBkZXN0IDogaW5kZXgpO1xuICAgIH0pO1xuICAgIGV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgIHZhciBldmVudCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpO1xuICAgIHZhciBvbiA9IGV2ZW50Lm9uO1xuICAgIG9uKEVWRU5UX0NMSUNLLCBvbkNsaWNrKTtcbiAgICBvbihFVkVOVF9TTElERV9LRVlET1dOLCBvbktleWRvd24pO1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9VUERBVEVEXSwgdXBkYXRlKTtcbiAgICBldmVudHMucHVzaChldmVudCk7XG4gICAgZXZlbnQuZW1pdChFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIFNwbGlkZTIuc3BsaWRlcyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgc2V0QXR0cmlidXRlKENvbXBvbmVudHMyLkVsZW1lbnRzLmxpc3QsIEFSSUFfT1JJRU5UQVRJT04sIG9wdGlvbnMuZGlyZWN0aW9uID09PSBUVEIgPyBcInZlcnRpY2FsXCIgOiBcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2soU2xpZGUpIHtcbiAgICBTcGxpZGUyLmdvKFNsaWRlLmluZGV4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihTbGlkZSwgZSkge1xuICAgIGlmIChpbmNsdWRlcyhUUklHR0VSX0tFWVMsIG5vcm1hbGl6ZUtleShlKSkpIHtcbiAgICAgIG9uQ2xpY2soU2xpZGUpO1xuICAgICAgcHJldmVudChlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldHVwOiBhcHBseShDb21wb25lbnRzMi5NZWRpYS5zZXQsIHtcbiAgICAgIHNsaWRlRm9jdXM6IGlzVW5kZWZpbmVkKHNsaWRlRm9jdXMpID8gaXNOYXZpZ2F0aW9uIDogc2xpZGVGb2N1c1xuICAgIH0sIHRydWUpLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHJlbW91bnQ6IHJlbW91bnRcbiAgfTtcbn1cblxuZnVuY3Rpb24gV2hlZWwoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTEyID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMTIuYmluZDtcblxuICB2YXIgbGFzdFRpbWUgPSAwO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChvcHRpb25zLndoZWVsKSB7XG4gICAgICBiaW5kKENvbXBvbmVudHMyLkVsZW1lbnRzLnRyYWNrLCBcIndoZWVsXCIsIG9uV2hlZWwsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbldoZWVsKGUpIHtcbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICB2YXIgZGVsdGFZID0gZS5kZWx0YVk7XG4gICAgICB2YXIgYmFja3dhcmRzID0gZGVsdGFZIDwgMDtcbiAgICAgIHZhciB0aW1lU3RhbXAgPSB0aW1lT2YoZSk7XG5cbiAgICAgIHZhciBfbWluID0gb3B0aW9ucy53aGVlbE1pblRocmVzaG9sZCB8fCAwO1xuXG4gICAgICB2YXIgc2xlZXAgPSBvcHRpb25zLndoZWVsU2xlZXAgfHwgMDtcblxuICAgICAgaWYgKGFicyhkZWx0YVkpID4gX21pbiAmJiB0aW1lU3RhbXAgLSBsYXN0VGltZSA+IHNsZWVwKSB7XG4gICAgICAgIFNwbGlkZTIuZ28oYmFja3dhcmRzID8gXCI8XCIgOiBcIj5cIik7XG4gICAgICAgIGxhc3RUaW1lID0gdGltZVN0YW1wO1xuICAgICAgfVxuXG4gICAgICBzaG91bGRQcmV2ZW50KGJhY2t3YXJkcykgJiYgcHJldmVudChlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRQcmV2ZW50KGJhY2t3YXJkcykge1xuICAgIHJldHVybiAhb3B0aW9ucy5yZWxlYXNlV2hlZWwgfHwgU3BsaWRlMi5zdGF0ZS5pcyhNT1ZJTkcpIHx8IENvbXBvbmVudHMyLkNvbnRyb2xsZXIuZ2V0QWRqYWNlbnQoYmFja3dhcmRzKSAhPT0gLTE7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudFxuICB9O1xufVxuXG52YXIgU1JfUkVNT1ZBTF9ERUxBWSA9IDkwO1xuXG5mdW5jdGlvbiBMaXZlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UxMyA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UxMy5vbjtcblxuICB2YXIgdHJhY2sgPSBDb21wb25lbnRzMi5FbGVtZW50cy50cmFjaztcbiAgdmFyIGVuYWJsZWQgPSBvcHRpb25zLmxpdmUgJiYgIW9wdGlvbnMuaXNOYXZpZ2F0aW9uO1xuICB2YXIgc3IgPSBjcmVhdGUoXCJzcGFuXCIsIENMQVNTX1NSKTtcbiAgdmFyIGludGVydmFsID0gUmVxdWVzdEludGVydmFsKFNSX1JFTU9WQUxfREVMQVksIGFwcGx5KHRvZ2dsZSwgZmFsc2UpKTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgZGlzYWJsZSghQ29tcG9uZW50czIuQXV0b3BsYXkuaXNQYXVzZWQoKSk7XG4gICAgICBzZXRBdHRyaWJ1dGUodHJhY2ssIEFSSUFfQVRPTUlDLCB0cnVlKTtcbiAgICAgIHNyLnRleHRDb250ZW50ID0gXCJcXHUyMDI2XCI7XG4gICAgICBvbihFVkVOVF9BVVRPUExBWV9QTEFZLCBhcHBseShkaXNhYmxlLCB0cnVlKSk7XG4gICAgICBvbihFVkVOVF9BVVRPUExBWV9QQVVTRSwgYXBwbHkoZGlzYWJsZSwgZmFsc2UpKTtcbiAgICAgIG9uKFtFVkVOVF9NT1ZFRCwgRVZFTlRfU0NST0xMRURdLCBhcHBseSh0b2dnbGUsIHRydWUpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGUoYWN0aXZlKSB7XG4gICAgc2V0QXR0cmlidXRlKHRyYWNrLCBBUklBX0JVU1ksIGFjdGl2ZSk7XG5cbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICBhcHBlbmQodHJhY2ssIHNyKTtcbiAgICAgIGludGVydmFsLnN0YXJ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZShzcik7XG4gICAgICBpbnRlcnZhbC5jYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHJlbW92ZUF0dHJpYnV0ZSh0cmFjaywgW0FSSUFfTElWRSwgQVJJQV9BVE9NSUMsIEFSSUFfQlVTWV0pO1xuICAgIHJlbW92ZShzcik7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhYmxlKGRpc2FibGVkKSB7XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIHNldEF0dHJpYnV0ZSh0cmFjaywgQVJJQV9MSVZFLCBkaXNhYmxlZCA/IFwib2ZmXCIgOiBcInBvbGl0ZVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkaXNhYmxlOiBkaXNhYmxlLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfTtcbn1cblxudmFyIENvbXBvbmVudENvbnN0cnVjdG9ycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBNZWRpYTogTWVkaWEsXG4gIERpcmVjdGlvbjogRGlyZWN0aW9uLFxuICBFbGVtZW50czogRWxlbWVudHMsXG4gIFNsaWRlczogU2xpZGVzLFxuICBMYXlvdXQ6IExheW91dCxcbiAgQ2xvbmVzOiBDbG9uZXMsXG4gIE1vdmU6IE1vdmUsXG4gIENvbnRyb2xsZXI6IENvbnRyb2xsZXIsXG4gIEFycm93czogQXJyb3dzLFxuICBBdXRvcGxheTogQXV0b3BsYXksXG4gIENvdmVyOiBDb3ZlcixcbiAgU2Nyb2xsOiBTY3JvbGwsXG4gIERyYWc6IERyYWcsXG4gIEtleWJvYXJkOiBLZXlib2FyZCxcbiAgTGF6eUxvYWQ6IExhenlMb2FkLFxuICBQYWdpbmF0aW9uOiBQYWdpbmF0aW9uLFxuICBTeW5jOiBTeW5jLFxuICBXaGVlbDogV2hlZWwsXG4gIExpdmU6IExpdmVcbn0pO1xudmFyIEkxOE4gPSB7XG4gIHByZXY6IFwiUHJldmlvdXMgc2xpZGVcIixcbiAgbmV4dDogXCJOZXh0IHNsaWRlXCIsXG4gIGZpcnN0OiBcIkdvIHRvIGZpcnN0IHNsaWRlXCIsXG4gIGxhc3Q6IFwiR28gdG8gbGFzdCBzbGlkZVwiLFxuICBzbGlkZVg6IFwiR28gdG8gc2xpZGUgJXNcIixcbiAgcGFnZVg6IFwiR28gdG8gcGFnZSAlc1wiLFxuICBwbGF5OiBcIlN0YXJ0IGF1dG9wbGF5XCIsXG4gIHBhdXNlOiBcIlBhdXNlIGF1dG9wbGF5XCIsXG4gIGNhcm91c2VsOiBcImNhcm91c2VsXCIsXG4gIHNsaWRlOiBcInNsaWRlXCIsXG4gIHNlbGVjdDogXCJTZWxlY3QgYSBzbGlkZSB0byBzaG93XCIsXG4gIHNsaWRlTGFiZWw6IFwiJXMgb2YgJXNcIlxufTtcbnZhciBERUZBVUxUUyA9IHtcbiAgdHlwZTogXCJzbGlkZVwiLFxuICByb2xlOiBcInJlZ2lvblwiLFxuICBzcGVlZDogNDAwLFxuICBwZXJQYWdlOiAxLFxuICBjbG9uZVN0YXR1czogdHJ1ZSxcbiAgYXJyb3dzOiB0cnVlLFxuICBwYWdpbmF0aW9uOiB0cnVlLFxuICBwYWdpbmF0aW9uS2V5Ym9hcmQ6IHRydWUsXG4gIGludGVydmFsOiA1ZTMsXG4gIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICByZXNldFByb2dyZXNzOiB0cnVlLFxuICBlYXNpbmc6IFwiY3ViaWMtYmV6aWVyKDAuMjUsIDEsIDAuNSwgMSlcIixcbiAgZHJhZzogdHJ1ZSxcbiAgZGlyZWN0aW9uOiBcImx0clwiLFxuICB0cmltU3BhY2U6IHRydWUsXG4gIGZvY3VzYWJsZU5vZGVzOiBcImEsIGJ1dHRvbiwgdGV4dGFyZWEsIGlucHV0LCBzZWxlY3QsIGlmcmFtZVwiLFxuICBsaXZlOiB0cnVlLFxuICBjbGFzc2VzOiBDTEFTU0VTLFxuICBpMThuOiBJMThOLFxuICByZWR1Y2VkTW90aW9uOiB7XG4gICAgc3BlZWQ6IDAsXG4gICAgcmV3aW5kU3BlZWQ6IDAsXG4gICAgYXV0b3BsYXk6IFwicGF1c2VcIlxuICB9XG59O1xuXG5mdW5jdGlvbiBGYWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXM7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgRXZlbnRJbnRlcmZhY2UoU3BsaWRlMikub24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1JFRlJFU0hdLCBpbml0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgU2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKFNsaWRlKSB7XG4gICAgICBTbGlkZS5zdHlsZShcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZVgoLVwiICsgMTAwICogU2xpZGUuaW5kZXggKyBcIiUpXCIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoaW5kZXgsIGRvbmUpIHtcbiAgICBTbGlkZXMuc3R5bGUoXCJ0cmFuc2l0aW9uXCIsIFwib3BhY2l0eSBcIiArIG9wdGlvbnMuc3BlZWQgKyBcIm1zIFwiICsgb3B0aW9ucy5lYXNpbmcpO1xuICAgIG5leHRUaWNrKGRvbmUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGNhbmNlbDogbm9vcFxuICB9O1xufVxuXG5mdW5jdGlvbiBTbGlkZShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgTW92ZSA9IENvbXBvbmVudHMyLk1vdmUsXG4gICAgICBDb250cm9sbGVyID0gQ29tcG9uZW50czIuQ29udHJvbGxlcixcbiAgICAgIFNjcm9sbCA9IENvbXBvbmVudHMyLlNjcm9sbDtcbiAgdmFyIGxpc3QgPSBDb21wb25lbnRzMi5FbGVtZW50cy5saXN0O1xuICB2YXIgdHJhbnNpdGlvbiA9IGFwcGx5KHN0eWxlLCBsaXN0LCBcInRyYW5zaXRpb25cIik7XG4gIHZhciBlbmRDYWxsYmFjaztcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBFdmVudEludGVyZmFjZShTcGxpZGUyKS5iaW5kKGxpc3QsIFwidHJhbnNpdGlvbmVuZFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSBsaXN0ICYmIGVuZENhbGxiYWNrKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICBlbmRDYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoaW5kZXgsIGRvbmUpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSBNb3ZlLnRvUG9zaXRpb24oaW5kZXgsIHRydWUpO1xuICAgIHZhciBwb3NpdGlvbiA9IE1vdmUuZ2V0UG9zaXRpb24oKTtcbiAgICB2YXIgc3BlZWQgPSBnZXRTcGVlZChpbmRleCk7XG5cbiAgICBpZiAoYWJzKGRlc3RpbmF0aW9uIC0gcG9zaXRpb24pID49IDEgJiYgc3BlZWQgPj0gMSkge1xuICAgICAgaWYgKG9wdGlvbnMudXNlU2Nyb2xsKSB7XG4gICAgICAgIFNjcm9sbC5zY3JvbGwoZGVzdGluYXRpb24sIHNwZWVkLCBmYWxzZSwgZG9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uKFwidHJhbnNmb3JtIFwiICsgc3BlZWQgKyBcIm1zIFwiICsgb3B0aW9ucy5lYXNpbmcpO1xuICAgICAgICBNb3ZlLnRyYW5zbGF0ZShkZXN0aW5hdGlvbiwgdHJ1ZSk7XG4gICAgICAgIGVuZENhbGxiYWNrID0gZG9uZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgTW92ZS5qdW1wKGluZGV4KTtcbiAgICAgIGRvbmUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgdHJhbnNpdGlvbihcIlwiKTtcbiAgICBTY3JvbGwuY2FuY2VsKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTcGVlZChpbmRleCkge1xuICAgIHZhciByZXdpbmRTcGVlZCA9IG9wdGlvbnMucmV3aW5kU3BlZWQ7XG5cbiAgICBpZiAoU3BsaWRlMi5pcyhTTElERSkgJiYgcmV3aW5kU3BlZWQpIHtcbiAgICAgIHZhciBwcmV2ID0gQ29udHJvbGxlci5nZXRJbmRleCh0cnVlKTtcbiAgICAgIHZhciBlbmQgPSBDb250cm9sbGVyLmdldEVuZCgpO1xuXG4gICAgICBpZiAocHJldiA9PT0gMCAmJiBpbmRleCA+PSBlbmQgfHwgcHJldiA+PSBlbmQgJiYgaW5kZXggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJld2luZFNwZWVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zLnNwZWVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59XG5cbnZhciBfU3BsaWRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gX1NwbGlkZSh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoKTtcbiAgICB0aGlzLkNvbXBvbmVudHMgPSB7fTtcbiAgICB0aGlzLnN0YXRlID0gU3RhdGUoQ1JFQVRFRCk7XG4gICAgdGhpcy5zcGxpZGVzID0gW107XG4gICAgdGhpcy5fbyA9IHt9O1xuICAgIHRoaXMuX0UgPSB7fTtcbiAgICB2YXIgcm9vdCA9IGlzU3RyaW5nKHRhcmdldCkgPyBxdWVyeShkb2N1bWVudCwgdGFyZ2V0KSA6IHRhcmdldDtcbiAgICBhc3NlcnQocm9vdCwgcm9vdCArIFwiIGlzIGludmFsaWQuXCIpO1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgb3B0aW9ucyA9IG1lcmdlKHtcbiAgICAgIGxhYmVsOiBnZXRBdHRyaWJ1dGUocm9vdCwgQVJJQV9MQUJFTCkgfHwgXCJcIixcbiAgICAgIGxhYmVsbGVkYnk6IGdldEF0dHJpYnV0ZShyb290LCBBUklBX0xBQkVMTEVEQlkpIHx8IFwiXCJcbiAgICB9LCBERUZBVUxUUywgX1NwbGlkZS5kZWZhdWx0cywgb3B0aW9ucyB8fCB7fSk7XG5cbiAgICB0cnkge1xuICAgICAgbWVyZ2Uob3B0aW9ucywgSlNPTi5wYXJzZShnZXRBdHRyaWJ1dGUocm9vdCwgREFUQV9BVFRSSUJVVEUpKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYXNzZXJ0KGZhbHNlLCBcIkludmFsaWQgSlNPTlwiKTtcbiAgICB9XG5cbiAgICB0aGlzLl9vID0gT2JqZWN0LmNyZWF0ZShtZXJnZSh7fSwgb3B0aW9ucykpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IF9TcGxpZGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5tb3VudCA9IGZ1bmN0aW9uIG1vdW50KEV4dGVuc2lvbnMsIFRyYW5zaXRpb24pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgQ29tcG9uZW50czIgPSB0aGlzLkNvbXBvbmVudHM7XG4gICAgYXNzZXJ0KHN0YXRlLmlzKFtDUkVBVEVELCBERVNUUk9ZRURdKSwgXCJBbHJlYWR5IG1vdW50ZWQhXCIpO1xuICAgIHN0YXRlLnNldChDUkVBVEVEKTtcbiAgICB0aGlzLl9DID0gQ29tcG9uZW50czI7XG4gICAgdGhpcy5fVCA9IFRyYW5zaXRpb24gfHwgdGhpcy5fVCB8fCAodGhpcy5pcyhGQURFKSA/IEZhZGUgOiBTbGlkZSk7XG4gICAgdGhpcy5fRSA9IEV4dGVuc2lvbnMgfHwgdGhpcy5fRTtcbiAgICB2YXIgQ29uc3RydWN0b3JzID0gYXNzaWduKHt9LCBDb21wb25lbnRDb25zdHJ1Y3RvcnMsIHRoaXMuX0UsIHtcbiAgICAgIFRyYW5zaXRpb246IHRoaXMuX1RcbiAgICB9KTtcbiAgICBmb3JPd24oQ29uc3RydWN0b3JzLCBmdW5jdGlvbiAoQ29tcG9uZW50LCBrZXkpIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSBDb21wb25lbnQoX3RoaXMsIENvbXBvbmVudHMyLCBfdGhpcy5fbyk7XG4gICAgICBDb21wb25lbnRzMltrZXldID0gY29tcG9uZW50O1xuICAgICAgY29tcG9uZW50LnNldHVwICYmIGNvbXBvbmVudC5zZXR1cCgpO1xuICAgIH0pO1xuICAgIGZvck93bihDb21wb25lbnRzMiwgZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgY29tcG9uZW50Lm1vdW50ICYmIGNvbXBvbmVudC5tb3VudCgpO1xuICAgIH0pO1xuICAgIHRoaXMuZW1pdChFVkVOVF9NT1VOVEVEKTtcbiAgICBhZGRDbGFzcyh0aGlzLnJvb3QsIENMQVNTX0lOSVRJQUxJWkVEKTtcbiAgICBzdGF0ZS5zZXQoSURMRSk7XG4gICAgdGhpcy5lbWl0KEVWRU5UX1JFQURZKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uc3luYyA9IGZ1bmN0aW9uIHN5bmMoc3BsaWRlKSB7XG4gICAgdGhpcy5zcGxpZGVzLnB1c2goe1xuICAgICAgc3BsaWRlOiBzcGxpZGVcbiAgICB9KTtcbiAgICBzcGxpZGUuc3BsaWRlcy5wdXNoKHtcbiAgICAgIHNwbGlkZTogdGhpcyxcbiAgICAgIGlzUGFyZW50OiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5pcyhJRExFKSkge1xuICAgICAgdGhpcy5fQy5TeW5jLnJlbW91bnQoKTtcblxuICAgICAgc3BsaWRlLkNvbXBvbmVudHMuU3luYy5yZW1vdW50KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmdvID0gZnVuY3Rpb24gZ28oY29udHJvbCkge1xuICAgIHRoaXMuX0MuQ29udHJvbGxlci5nbyhjb250cm9sKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5vbiA9IGZ1bmN0aW9uIG9uKGV2ZW50cywgY2FsbGJhY2spIHtcbiAgICB0aGlzLmV2ZW50Lm9uKGV2ZW50cywgY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5vZmYgPSBmdW5jdGlvbiBvZmYoZXZlbnRzKSB7XG4gICAgdGhpcy5ldmVudC5vZmYoZXZlbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMkZXZlbnQ7XG5cbiAgICAoX3RoaXMkZXZlbnQgPSB0aGlzLmV2ZW50KS5lbWl0LmFwcGx5KF90aGlzJGV2ZW50LCBbZXZlbnRdLmNvbmNhdChzbGljZShhcmd1bWVudHMsIDEpKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKHNsaWRlcywgaW5kZXgpIHtcbiAgICB0aGlzLl9DLlNsaWRlcy5hZGQoc2xpZGVzLCBpbmRleCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG1hdGNoZXIpIHtcbiAgICB0aGlzLl9DLlNsaWRlcy5yZW1vdmUobWF0Y2hlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uaXMgPSBmdW5jdGlvbiBpcyh0eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuX28udHlwZSA9PT0gdHlwZTtcbiAgfTtcblxuICBfcHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgdGhpcy5lbWl0KEVWRU5UX1JFRlJFU0gpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveShjb21wbGV0ZWx5KSB7XG4gICAgaWYgKGNvbXBsZXRlbHkgPT09IHZvaWQgMCkge1xuICAgICAgY29tcGxldGVseSA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50ID0gdGhpcy5ldmVudCxcbiAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKHN0YXRlLmlzKENSRUFURUQpKSB7XG4gICAgICBFdmVudEludGVyZmFjZSh0aGlzKS5vbihFVkVOVF9SRUFEWSwgdGhpcy5kZXN0cm95LmJpbmQodGhpcywgY29tcGxldGVseSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JPd24odGhpcy5fQywgZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICBjb21wb25lbnQuZGVzdHJveSAmJiBjb21wb25lbnQuZGVzdHJveShjb21wbGV0ZWx5KTtcbiAgICAgIH0sIHRydWUpO1xuICAgICAgZXZlbnQuZW1pdChFVkVOVF9ERVNUUk9ZKTtcbiAgICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgICAgIGNvbXBsZXRlbHkgJiYgZW1wdHkodGhpcy5zcGxpZGVzKTtcbiAgICAgIHN0YXRlLnNldChERVNUUk9ZRUQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhfU3BsaWRlLCBbe1xuICAgIGtleTogXCJvcHRpb25zXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX0MuTWVkaWEuc2V0KG9wdGlvbnMsIHRydWUsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsZW5ndGhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9DLlNsaWRlcy5nZXRMZW5ndGgodHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImluZGV4XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fQy5Db250cm9sbGVyLmdldEluZGV4KCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIF9TcGxpZGU7XG59KCk7XG5cbnZhciBTcGxpZGUgPSBfU3BsaWRlO1xuU3BsaWRlLmRlZmF1bHRzID0ge307XG5TcGxpZGUuU1RBVEVTID0gU1RBVEVTO1xudmFyIENMQVNTX1JFTkRFUkVEID0gXCJpcy1yZW5kZXJlZFwiO1xudmFyIFJFTkRFUkVSX0RFRkFVTFRfQ09ORklHID0ge1xuICBsaXN0VGFnOiBcInVsXCIsXG4gIHNsaWRlVGFnOiBcImxpXCJcbn07XG5cbnZhciBTdHlsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlKGlkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5zdHlsZXMgPSB7fTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIucnVsZSA9IGZ1bmN0aW9uIHJ1bGUoc2VsZWN0b3IsIHByb3AsIHZhbHVlLCBicmVha3BvaW50KSB7XG4gICAgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnQgfHwgXCJkZWZhdWx0XCI7XG4gICAgdmFyIHNlbGVjdG9ycyA9IHRoaXMuc3R5bGVzW2JyZWFrcG9pbnRdID0gdGhpcy5zdHlsZXNbYnJlYWtwb2ludF0gfHwge307XG4gICAgdmFyIHN0eWxlcyA9IHNlbGVjdG9yc1tzZWxlY3Rvcl0gPSBzZWxlY3RvcnNbc2VsZWN0b3JdIHx8IHt9O1xuICAgIHN0eWxlc1twcm9wXSA9IHZhbHVlO1xuICB9O1xuXG4gIF9wcm90bzIuYnVpbGQgPSBmdW5jdGlvbiBidWlsZCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBjc3MgPSBcIlwiO1xuXG4gICAgaWYgKHRoaXMuc3R5bGVzLmRlZmF1bHQpIHtcbiAgICAgIGNzcyArPSB0aGlzLmJ1aWxkU2VsZWN0b3JzKHRoaXMuc3R5bGVzLmRlZmF1bHQpO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHRoaXMuc3R5bGVzKS5zb3J0KGZ1bmN0aW9uIChuLCBtKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLm9wdGlvbnMubWVkaWFRdWVyeSA9PT0gXCJtaW5cIiA/ICtuIC0gK20gOiArbSAtICtuO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGJyZWFrcG9pbnQpIHtcbiAgICAgIGlmIChicmVha3BvaW50ICE9PSBcImRlZmF1bHRcIikge1xuICAgICAgICBjc3MgKz0gXCJAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiBcIiArIGJyZWFrcG9pbnQgKyBcInB4KSB7XCI7XG4gICAgICAgIGNzcyArPSBfdGhpczIuYnVpbGRTZWxlY3RvcnMoX3RoaXMyLnN0eWxlc1ticmVha3BvaW50XSk7XG4gICAgICAgIGNzcyArPSBcIn1cIjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY3NzO1xuICB9O1xuXG4gIF9wcm90bzIuYnVpbGRTZWxlY3RvcnMgPSBmdW5jdGlvbiBidWlsZFNlbGVjdG9ycyhzZWxlY3RvcnMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBjc3MgPSBcIlwiO1xuICAgIGZvck93bihzZWxlY3RvcnMsIGZ1bmN0aW9uIChzdHlsZXMsIHNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9IChcIiNcIiArIF90aGlzMy5pZCArIFwiIFwiICsgc2VsZWN0b3IpLnRyaW0oKTtcbiAgICAgIGNzcyArPSBzZWxlY3RvciArIFwiIHtcIjtcbiAgICAgIGZvck93bihzdHlsZXMsIGZ1bmN0aW9uICh2YWx1ZSwgcHJvcCkge1xuICAgICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgICBjc3MgKz0gcHJvcCArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY3NzICs9IFwifVwiO1xuICAgIH0pO1xuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlO1xufSgpO1xuXG52YXIgU3BsaWRlUmVuZGVyZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTcGxpZGVSZW5kZXJlcihjb250ZW50cywgb3B0aW9ucywgY29uZmlnLCBkZWZhdWx0cykge1xuICAgIHRoaXMuc2xpZGVzID0gW107XG4gICAgdGhpcy5vcHRpb25zID0ge307XG4gICAgdGhpcy5icmVha3BvaW50cyA9IFtdO1xuICAgIG1lcmdlKERFRkFVTFRTLCBkZWZhdWx0cyB8fCB7fSk7XG4gICAgbWVyZ2UobWVyZ2UodGhpcy5vcHRpb25zLCBERUZBVUxUUyksIG9wdGlvbnMgfHwge30pO1xuICAgIHRoaXMuY29udGVudHMgPSBjb250ZW50cztcbiAgICB0aGlzLmNvbmZpZyA9IGFzc2lnbih7fSwgUkVOREVSRVJfREVGQVVMVF9DT05GSUcsIGNvbmZpZyB8fCB7fSk7XG4gICAgdGhpcy5pZCA9IHRoaXMuY29uZmlnLmlkIHx8IHVuaXF1ZUlkKFwic3BsaWRlXCIpO1xuICAgIHRoaXMuU3R5bGUgPSBuZXcgU3R5bGUodGhpcy5pZCwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLkRpcmVjdGlvbiA9IERpcmVjdGlvbihudWxsLCBudWxsLCB0aGlzLm9wdGlvbnMpO1xuICAgIGFzc2VydCh0aGlzLmNvbnRlbnRzLmxlbmd0aCwgXCJQcm92aWRlIGF0IGxlYXN0IDEgY29udGVudC5cIik7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBTcGxpZGVSZW5kZXJlci5jbGVhbiA9IGZ1bmN0aW9uIGNsZWFuKHNwbGlkZSkge1xuICAgIHZhciBfRXZlbnRJbnRlcmZhY2UxNCA9IEV2ZW50SW50ZXJmYWNlKHNwbGlkZSksXG4gICAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMTQub247XG5cbiAgICB2YXIgcm9vdCA9IHNwbGlkZS5yb290O1xuICAgIHZhciBjbG9uZXMgPSBxdWVyeUFsbChyb290LCBcIi5cIiArIENMQVNTX0NMT05FKTtcbiAgICBvbihFVkVOVF9NT1VOVEVELCBmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmUoY2hpbGQocm9vdCwgXCJzdHlsZVwiKSk7XG4gICAgfSk7XG4gICAgcmVtb3ZlKGNsb25lcyk7XG4gIH07XG5cbiAgdmFyIF9wcm90bzMgPSBTcGxpZGVSZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMy5pbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB0aGlzLnBhcnNlQnJlYWtwb2ludHMoKTtcbiAgICB0aGlzLmluaXRTbGlkZXMoKTtcbiAgICB0aGlzLnJlZ2lzdGVyUm9vdFN0eWxlcygpO1xuICAgIHRoaXMucmVnaXN0ZXJUcmFja1N0eWxlcygpO1xuICAgIHRoaXMucmVnaXN0ZXJTbGlkZVN0eWxlcygpO1xuICAgIHRoaXMucmVnaXN0ZXJMaXN0U3R5bGVzKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5pbml0U2xpZGVzID0gZnVuY3Rpb24gaW5pdFNsaWRlcygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHB1c2godGhpcy5zbGlkZXMsIHRoaXMuY29udGVudHMubWFwKGZ1bmN0aW9uIChjb250ZW50LCBpbmRleCkge1xuICAgICAgY29udGVudCA9IGlzU3RyaW5nKGNvbnRlbnQpID8ge1xuICAgICAgICBodG1sOiBjb250ZW50XG4gICAgICB9IDogY29udGVudDtcbiAgICAgIGNvbnRlbnQuc3R5bGVzID0gY29udGVudC5zdHlsZXMgfHwge307XG4gICAgICBjb250ZW50LmF0dHJzID0gY29udGVudC5hdHRycyB8fCB7fTtcblxuICAgICAgX3RoaXM0LmNvdmVyKGNvbnRlbnQpO1xuXG4gICAgICB2YXIgY2xhc3NlcyA9IF90aGlzNC5vcHRpb25zLmNsYXNzZXMuc2xpZGUgKyBcIiBcIiArIChpbmRleCA9PT0gMCA/IENMQVNTX0FDVElWRSA6IFwiXCIpO1xuICAgICAgYXNzaWduKGNvbnRlbnQuYXR0cnMsIHtcbiAgICAgICAgY2xhc3M6IChjbGFzc2VzICsgXCIgXCIgKyAoY29udGVudC5hdHRycy5jbGFzcyB8fCBcIlwiKSkudHJpbSgpLFxuICAgICAgICBzdHlsZTogX3RoaXM0LmJ1aWxkU3R5bGVzKGNvbnRlbnQuc3R5bGVzKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KSk7XG5cbiAgICBpZiAodGhpcy5pc0xvb3AoKSkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUNsb25lcyh0aGlzLnNsaWRlcyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzMucmVnaXN0ZXJSb290U3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJSb290U3R5bGVzKCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHdpZHRoID0gX3JlZjJbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWYyWzFdO1xuXG4gICAgICBfdGhpczUuU3R5bGUucnVsZShcIiBcIiwgXCJtYXgtd2lkdGhcIiwgdW5pdChvcHRpb25zLndpZHRoKSwgd2lkdGgpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMucmVnaXN0ZXJUcmFja1N0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyVHJhY2tTdHlsZXMoKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgU3R5bGUyID0gdGhpcy5TdHlsZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBcIi5cIiArIENMQVNTX1RSQUNLO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWYzWzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmM1sxXTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBfdGhpczYucmVzb2x2ZShcInBhZGRpbmdMZWZ0XCIpLCBfdGhpczYuY3NzUGFkZGluZyhvcHRpb25zLCBmYWxzZSksIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBfdGhpczYucmVzb2x2ZShcInBhZGRpbmdSaWdodFwiKSwgX3RoaXM2LmNzc1BhZGRpbmcob3B0aW9ucywgdHJ1ZSksIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcImhlaWdodFwiLCBfdGhpczYuY3NzVHJhY2tIZWlnaHQob3B0aW9ucyksIHdpZHRoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlZ2lzdGVyTGlzdFN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdFN0eWxlcygpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHZhciBTdHlsZTIgPSB0aGlzLlN0eWxlO1xuICAgIHZhciBzZWxlY3RvciA9IFwiLlwiICsgQ0xBU1NfTElTVDtcbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgICB2YXIgd2lkdGggPSBfcmVmNFswXSxcbiAgICAgICAgICBvcHRpb25zID0gX3JlZjRbMV07XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJ0cmFuc2Zvcm1cIiwgX3RoaXM3LmJ1aWxkVHJhbnNsYXRlKG9wdGlvbnMpLCB3aWR0aCk7XG5cbiAgICAgIGlmICghX3RoaXM3LmNzc1NsaWRlSGVpZ2h0KG9wdGlvbnMpKSB7XG4gICAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcImFzcGVjdC1yYXRpb1wiLCBfdGhpczcuY3NzQXNwZWN0UmF0aW8ob3B0aW9ucyksIHdpZHRoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8zLnJlZ2lzdGVyU2xpZGVTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclNsaWRlU3R5bGVzKCkge1xuICAgIHZhciBfdGhpczggPSB0aGlzO1xuXG4gICAgdmFyIFN0eWxlMiA9IHRoaXMuU3R5bGU7XG4gICAgdmFyIHNlbGVjdG9yID0gXCIuXCIgKyBDTEFTU19TTElERTtcbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWY1KSB7XG4gICAgICB2YXIgd2lkdGggPSBfcmVmNVswXSxcbiAgICAgICAgICBvcHRpb25zID0gX3JlZjVbMV07XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJ3aWR0aFwiLCBfdGhpczguY3NzU2xpZGVXaWR0aChvcHRpb25zKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwiaGVpZ2h0XCIsIF90aGlzOC5jc3NTbGlkZUhlaWdodChvcHRpb25zKSB8fCBcIjEwMCVcIiwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIF90aGlzOC5yZXNvbHZlKFwibWFyZ2luUmlnaHRcIiksIHVuaXQob3B0aW9ucy5nYXApIHx8IFwiMHB4XCIsIHdpZHRoKTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yICsgXCIgPiBpbWdcIiwgXCJkaXNwbGF5XCIsIG9wdGlvbnMuY292ZXIgPyBcIm5vbmVcIiA6IFwiaW5saW5lXCIsIHdpZHRoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8zLmJ1aWxkVHJhbnNsYXRlID0gZnVuY3Rpb24gYnVpbGRUcmFuc2xhdGUob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyREaXJlY3Rpb24gPSB0aGlzLkRpcmVjdGlvbixcbiAgICAgICAgcmVzb2x2ZSA9IF90aGlzJERpcmVjdGlvbi5yZXNvbHZlLFxuICAgICAgICBvcmllbnQgPSBfdGhpcyREaXJlY3Rpb24ub3JpZW50O1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YWx1ZXMucHVzaCh0aGlzLmNzc09mZnNldENsb25lcyhvcHRpb25zKSk7XG4gICAgdmFsdWVzLnB1c2godGhpcy5jc3NPZmZzZXRHYXBzKG9wdGlvbnMpKTtcblxuICAgIGlmICh0aGlzLmlzQ2VudGVyKG9wdGlvbnMpKSB7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KC01MCksIFwiJVwiKSk7XG4gICAgICB2YWx1ZXMucHVzaC5hcHBseSh2YWx1ZXMsIHRoaXMuY3NzT2Zmc2V0Q2VudGVyKG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLmZpbHRlcihCb29sZWFuKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gXCJ0cmFuc2xhdGVcIiArIHJlc29sdmUoXCJYXCIpICsgXCIoXCIgKyB2YWx1ZSArIFwiKVwiO1xuICAgIH0pLmpvaW4oXCIgXCIpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzT2Zmc2V0Q2xvbmVzID0gZnVuY3Rpb24gY3NzT2Zmc2V0Q2xvbmVzKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkRGlyZWN0aW9uMiA9IHRoaXMuRGlyZWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3RoaXMkRGlyZWN0aW9uMi5yZXNvbHZlLFxuICAgICAgICBvcmllbnQgPSBfdGhpcyREaXJlY3Rpb24yLm9yaWVudDtcbiAgICB2YXIgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuXG4gICAgaWYgKHRoaXMuaXNGaXhlZFdpZHRoKG9wdGlvbnMpKSB7XG4gICAgICB2YXIgX3RoaXMkcGFyc2VDc3NWYWx1ZSA9IHRoaXMucGFyc2VDc3NWYWx1ZShvcHRpb25zW3Jlc29sdmUoXCJmaXhlZFdpZHRoXCIpXSksXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlLnZhbHVlLFxuICAgICAgICAgIHVuaXQyID0gX3RoaXMkcGFyc2VDc3NWYWx1ZS51bml0O1xuXG4gICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSkgKiBjbG9uZUNvdW50LCB1bml0Mik7XG4gICAgfVxuXG4gICAgdmFyIHBlcmNlbnQgPSAxMDAgKiBjbG9uZUNvdW50IC8gb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBvcmllbnQocGVyY2VudCkgKyBcIiVcIjtcbiAgfTtcblxuICBfcHJvdG8zLmNzc09mZnNldENlbnRlciA9IGZ1bmN0aW9uIGNzc09mZnNldENlbnRlcihvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJERpcmVjdGlvbjMgPSB0aGlzLkRpcmVjdGlvbixcbiAgICAgICAgcmVzb2x2ZSA9IF90aGlzJERpcmVjdGlvbjMucmVzb2x2ZSxcbiAgICAgICAgb3JpZW50ID0gX3RoaXMkRGlyZWN0aW9uMy5vcmllbnQ7XG5cbiAgICBpZiAodGhpcy5pc0ZpeGVkV2lkdGgob3B0aW9ucykpIHtcbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlMiA9IHRoaXMucGFyc2VDc3NWYWx1ZShvcHRpb25zW3Jlc29sdmUoXCJmaXhlZFdpZHRoXCIpXSksXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlMi52YWx1ZSxcbiAgICAgICAgICB1bml0MiA9IF90aGlzJHBhcnNlQ3NzVmFsdWUyLnVuaXQ7XG5cbiAgICAgIHJldHVybiBbdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAvIDIpLCB1bml0MildO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YXIgcGVyUGFnZSA9IG9wdGlvbnMucGVyUGFnZSxcbiAgICAgICAgZ2FwID0gb3B0aW9ucy5nYXA7XG4gICAgdmFsdWVzLnB1c2gob3JpZW50KDUwIC8gcGVyUGFnZSkgKyBcIiVcIik7XG5cbiAgICBpZiAoZ2FwKSB7XG4gICAgICB2YXIgX3RoaXMkcGFyc2VDc3NWYWx1ZTMgPSB0aGlzLnBhcnNlQ3NzVmFsdWUoZ2FwKSxcbiAgICAgICAgICBfdmFsdWUgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlMy52YWx1ZSxcbiAgICAgICAgICBfdW5pdCA9IF90aGlzJHBhcnNlQ3NzVmFsdWUzLnVuaXQ7XG5cbiAgICAgIHZhciBnYXBPZmZzZXQgPSAoX3ZhbHVlIC8gcGVyUGFnZSAtIF92YWx1ZSkgLyAyO1xuICAgICAgdmFsdWVzLnB1c2godGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudChnYXBPZmZzZXQpLCBfdW5pdCkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NPZmZzZXRHYXBzID0gZnVuY3Rpb24gY3NzT2Zmc2V0R2FwcyhvcHRpb25zKSB7XG4gICAgdmFyIGNsb25lQ291bnQgPSB0aGlzLmdldENsb25lQ291bnQoKTtcblxuICAgIGlmIChjbG9uZUNvdW50ICYmIG9wdGlvbnMuZ2FwKSB7XG4gICAgICB2YXIgb3JpZW50ID0gdGhpcy5EaXJlY3Rpb24ub3JpZW50O1xuXG4gICAgICB2YXIgX3RoaXMkcGFyc2VDc3NWYWx1ZTQgPSB0aGlzLnBhcnNlQ3NzVmFsdWUob3B0aW9ucy5nYXApLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTQudmFsdWUsXG4gICAgICAgICAgdW5pdDIgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlNC51bml0O1xuXG4gICAgICBpZiAodGhpcy5pc0ZpeGVkV2lkdGgob3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQodmFsdWUgKiBjbG9uZUNvdW50KSwgdW5pdDIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGVyUGFnZSA9IG9wdGlvbnMucGVyUGFnZTtcbiAgICAgIHZhciBnYXBzID0gY2xvbmVDb3VudCAvIHBlclBhZ2U7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudChnYXBzICogdmFsdWUpLCB1bml0Mik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCI7XG4gIH07XG5cbiAgX3Byb3RvMy5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShwcm9wKSB7XG4gICAgcmV0dXJuIGNhbWVsVG9LZWJhYih0aGlzLkRpcmVjdGlvbi5yZXNvbHZlKHByb3ApKTtcbiAgfTtcblxuICBfcHJvdG8zLmNzc1BhZGRpbmcgPSBmdW5jdGlvbiBjc3NQYWRkaW5nKG9wdGlvbnMsIHJpZ2h0KSB7XG4gICAgdmFyIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmc7XG4gICAgdmFyIHByb3AgPSB0aGlzLkRpcmVjdGlvbi5yZXNvbHZlKHJpZ2h0ID8gXCJyaWdodFwiIDogXCJsZWZ0XCIsIHRydWUpO1xuICAgIHJldHVybiBwYWRkaW5nICYmIHVuaXQocGFkZGluZ1twcm9wXSB8fCAoaXNPYmplY3QocGFkZGluZykgPyAwIDogcGFkZGluZykpIHx8IFwiMHB4XCI7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NUcmFja0hlaWdodCA9IGZ1bmN0aW9uIGNzc1RyYWNrSGVpZ2h0KG9wdGlvbnMpIHtcbiAgICB2YXIgaGVpZ2h0ID0gXCJcIjtcblxuICAgIGlmICh0aGlzLmlzVmVydGljYWwoKSkge1xuICAgICAgaGVpZ2h0ID0gdGhpcy5jc3NIZWlnaHQob3B0aW9ucyk7XG4gICAgICBhc3NlcnQoaGVpZ2h0LCAnXCJoZWlnaHRcIiBpcyBtaXNzaW5nLicpO1xuICAgICAgaGVpZ2h0ID0gXCJjYWxjKFwiICsgaGVpZ2h0ICsgXCIgLSBcIiArIHRoaXMuY3NzUGFkZGluZyhvcHRpb25zLCBmYWxzZSkgKyBcIiAtIFwiICsgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIHRydWUpICsgXCIpXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlaWdodDtcbiAgfTtcblxuICBfcHJvdG8zLmNzc0hlaWdodCA9IGZ1bmN0aW9uIGNzc0hlaWdodChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHVuaXQob3B0aW9ucy5oZWlnaHQpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzU2xpZGVXaWR0aCA9IGZ1bmN0aW9uIGNzc1NsaWRlV2lkdGgob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmF1dG9XaWR0aCA/IFwiXCIgOiB1bml0KG9wdGlvbnMuZml4ZWRXaWR0aCkgfHwgKHRoaXMuaXNWZXJ0aWNhbCgpID8gXCJcIiA6IHRoaXMuY3NzU2xpZGVTaXplKG9wdGlvbnMpKTtcbiAgfTtcblxuICBfcHJvdG8zLmNzc1NsaWRlSGVpZ2h0ID0gZnVuY3Rpb24gY3NzU2xpZGVIZWlnaHQob3B0aW9ucykge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuZml4ZWRIZWlnaHQpIHx8ICh0aGlzLmlzVmVydGljYWwoKSA/IG9wdGlvbnMuYXV0b0hlaWdodCA/IFwiXCIgOiB0aGlzLmNzc1NsaWRlU2l6ZShvcHRpb25zKSA6IHRoaXMuY3NzSGVpZ2h0KG9wdGlvbnMpKTtcbiAgfTtcblxuICBfcHJvdG8zLmNzc1NsaWRlU2l6ZSA9IGZ1bmN0aW9uIGNzc1NsaWRlU2l6ZShvcHRpb25zKSB7XG4gICAgdmFyIGdhcCA9IHVuaXQob3B0aW9ucy5nYXApO1xuICAgIHJldHVybiBcImNhbGMoKDEwMCVcIiArIChnYXAgJiYgXCIgKyBcIiArIGdhcCkgKyBcIikvXCIgKyAob3B0aW9ucy5wZXJQYWdlIHx8IDEpICsgKGdhcCAmJiBcIiAtIFwiICsgZ2FwKSArIFwiKVwiO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzQXNwZWN0UmF0aW8gPSBmdW5jdGlvbiBjc3NBc3BlY3RSYXRpbyhvcHRpb25zKSB7XG4gICAgdmFyIGhlaWdodFJhdGlvID0gb3B0aW9ucy5oZWlnaHRSYXRpbztcbiAgICByZXR1cm4gaGVpZ2h0UmF0aW8gPyBcIlwiICsgMSAvIGhlaWdodFJhdGlvIDogXCJcIjtcbiAgfTtcblxuICBfcHJvdG8zLmJ1aWxkQ3NzVmFsdWUgPSBmdW5jdGlvbiBidWlsZENzc1ZhbHVlKHZhbHVlLCB1bml0Mikge1xuICAgIHJldHVybiBcIlwiICsgdmFsdWUgKyB1bml0MjtcbiAgfTtcblxuICBfcHJvdG8zLnBhcnNlQ3NzVmFsdWUgPSBmdW5jdGlvbiBwYXJzZUNzc1ZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFyIG51bWJlciA9IHBhcnNlRmxvYXQodmFsdWUpIHx8IDA7XG4gICAgICB2YXIgdW5pdDIgPSB2YWx1ZS5yZXBsYWNlKC9cXGQqKFxcLlxcZCopPy8sIFwiXCIpIHx8IFwicHhcIjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBudW1iZXIsXG4gICAgICAgIHVuaXQ6IHVuaXQyXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICB1bml0OiBcInB4XCJcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90bzMucGFyc2VCcmVha3BvaW50cyA9IGZ1bmN0aW9uIHBhcnNlQnJlYWtwb2ludHMoKSB7XG4gICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICB2YXIgYnJlYWtwb2ludHMgPSB0aGlzLm9wdGlvbnMuYnJlYWtwb2ludHM7XG4gICAgdGhpcy5icmVha3BvaW50cy5wdXNoKFtcImRlZmF1bHRcIiwgdGhpcy5vcHRpb25zXSk7XG5cbiAgICBpZiAoYnJlYWtwb2ludHMpIHtcbiAgICAgIGZvck93bihicmVha3BvaW50cywgZnVuY3Rpb24gKG9wdGlvbnMsIHdpZHRoKSB7XG4gICAgICAgIF90aGlzOS5icmVha3BvaW50cy5wdXNoKFt3aWR0aCwgbWVyZ2UobWVyZ2Uoe30sIF90aGlzOS5vcHRpb25zKSwgb3B0aW9ucyldKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8zLmlzRml4ZWRXaWR0aCA9IGZ1bmN0aW9uIGlzRml4ZWRXaWR0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuICEhb3B0aW9uc1t0aGlzLkRpcmVjdGlvbi5yZXNvbHZlKFwiZml4ZWRXaWR0aFwiKV07XG4gIH07XG5cbiAgX3Byb3RvMy5pc0xvb3AgPSBmdW5jdGlvbiBpc0xvb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy50eXBlID09PSBMT09QO1xuICB9O1xuXG4gIF9wcm90bzMuaXNDZW50ZXIgPSBmdW5jdGlvbiBpc0NlbnRlcihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZm9jdXMgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnR5cGUgPT09IFNMSURFKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5vcHRpb25zLnRyaW1TcGFjZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvMy5pc1ZlcnRpY2FsID0gZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmRpcmVjdGlvbiA9PT0gVFRCO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRDbGFzc2VzID0gZnVuY3Rpb24gYnVpbGRDbGFzc2VzKCkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHJldHVybiBbQ0xBU1NfUk9PVCwgQ0xBU1NfUk9PVCArIFwiLS1cIiArIG9wdGlvbnMudHlwZSwgQ0xBU1NfUk9PVCArIFwiLS1cIiArIG9wdGlvbnMuZGlyZWN0aW9uLCBvcHRpb25zLmRyYWcgJiYgQ0xBU1NfUk9PVCArIFwiLS1kcmFnZ2FibGVcIiwgb3B0aW9ucy5pc05hdmlnYXRpb24gJiYgQ0xBU1NfUk9PVCArIFwiLS1uYXZcIiwgQ0xBU1NfQUNUSVZFLCAhdGhpcy5jb25maWcuaGlkZGVuICYmIENMQVNTX1JFTkRFUkVEXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH07XG5cbiAgX3Byb3RvMy5idWlsZEF0dHJzID0gZnVuY3Rpb24gYnVpbGRBdHRycyhhdHRycykge1xuICAgIHZhciBhdHRyID0gXCJcIjtcbiAgICBmb3JPd24oYXR0cnMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBhdHRyICs9IHZhbHVlID8gXCIgXCIgKyBjYW1lbFRvS2ViYWIoa2V5KSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIgOiBcIlwiO1xuICAgIH0pO1xuICAgIHJldHVybiBhdHRyLnRyaW0oKTtcbiAgfTtcblxuICBfcHJvdG8zLmJ1aWxkU3R5bGVzID0gZnVuY3Rpb24gYnVpbGRTdHlsZXMoc3R5bGVzKSB7XG4gICAgdmFyIHN0eWxlID0gXCJcIjtcbiAgICBmb3JPd24oc3R5bGVzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgc3R5bGUgKz0gXCIgXCIgKyBjYW1lbFRvS2ViYWIoa2V5KSArIFwiOlwiICsgdmFsdWUgKyBcIjtcIjtcbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGUudHJpbSgpO1xuICB9O1xuXG4gIF9wcm90bzMucmVuZGVyU2xpZGVzID0gZnVuY3Rpb24gcmVuZGVyU2xpZGVzKCkge1xuICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgIHZhciB0YWcgPSB0aGlzLmNvbmZpZy5zbGlkZVRhZztcbiAgICByZXR1cm4gdGhpcy5zbGlkZXMubWFwKGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICByZXR1cm4gXCI8XCIgKyB0YWcgKyBcIiBcIiArIF90aGlzMTAuYnVpbGRBdHRycyhjb250ZW50LmF0dHJzKSArIFwiPlwiICsgKGNvbnRlbnQuaHRtbCB8fCBcIlwiKSArIFwiPC9cIiArIHRhZyArIFwiPlwiO1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgX3Byb3RvMy5jb3ZlciA9IGZ1bmN0aW9uIGNvdmVyKGNvbnRlbnQpIHtcbiAgICB2YXIgc3R5bGVzID0gY29udGVudC5zdHlsZXMsXG4gICAgICAgIF9jb250ZW50JGh0bWwgPSBjb250ZW50Lmh0bWwsXG4gICAgICAgIGh0bWwgPSBfY29udGVudCRodG1sID09PSB2b2lkIDAgPyBcIlwiIDogX2NvbnRlbnQkaHRtbDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY292ZXIgJiYgIXRoaXMub3B0aW9ucy5sYXp5TG9hZCkge1xuICAgICAgdmFyIHNyYyA9IGh0bWwubWF0Y2goLzxpbWcuKj9zcmNcXHMqPVxccyooWydcIl0pKC4rPylcXDEuKj8+Lyk7XG5cbiAgICAgIGlmIChzcmMgJiYgc3JjWzJdKSB7XG4gICAgICAgIHN0eWxlcy5iYWNrZ3JvdW5kID0gXCJjZW50ZXIvY292ZXIgbm8tcmVwZWF0IHVybCgnXCIgKyBzcmNbMl0gKyBcIicpXCI7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzMuZ2VuZXJhdGVDbG9uZXMgPSBmdW5jdGlvbiBnZW5lcmF0ZUNsb25lcyhjb250ZW50cykge1xuICAgIHZhciBjbGFzc2VzID0gdGhpcy5vcHRpb25zLmNsYXNzZXM7XG4gICAgdmFyIGNvdW50ID0gdGhpcy5nZXRDbG9uZUNvdW50KCk7XG4gICAgdmFyIHNsaWRlcyA9IGNvbnRlbnRzLnNsaWNlKCk7XG5cbiAgICB3aGlsZSAoc2xpZGVzLmxlbmd0aCA8IGNvdW50KSB7XG4gICAgICBwdXNoKHNsaWRlcywgc2xpZGVzKTtcbiAgICB9XG5cbiAgICBwdXNoKHNsaWRlcy5zbGljZSgtY291bnQpLnJldmVyc2UoKSwgc2xpZGVzLnNsaWNlKDAsIGNvdW50KSkuZm9yRWFjaChmdW5jdGlvbiAoY29udGVudCwgaW5kZXgpIHtcbiAgICAgIHZhciBhdHRycyA9IGFzc2lnbih7fSwgY29udGVudC5hdHRycywge1xuICAgICAgICBjbGFzczogY29udGVudC5hdHRycy5jbGFzcyArIFwiIFwiICsgY2xhc3Nlcy5jbG9uZVxuICAgICAgfSk7XG4gICAgICB2YXIgY2xvbmUgPSBhc3NpZ24oe30sIGNvbnRlbnQsIHtcbiAgICAgICAgYXR0cnM6IGF0dHJzXG4gICAgICB9KTtcbiAgICAgIGluZGV4IDwgY291bnQgPyBjb250ZW50cy51bnNoaWZ0KGNsb25lKSA6IGNvbnRlbnRzLnB1c2goY2xvbmUpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0Q2xvbmVDb3VudCA9IGZ1bmN0aW9uIGdldENsb25lQ291bnQoKSB7XG4gICAgaWYgKHRoaXMuaXNMb29wKCkpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAob3B0aW9ucy5jbG9uZXMpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuY2xvbmVzO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGVyUGFnZSA9IG1heC5hcHBseSh2b2lkIDAsIHRoaXMuYnJlYWtwb2ludHMubWFwKGZ1bmN0aW9uIChfcmVmNikge1xuICAgICAgICB2YXIgb3B0aW9uczIgPSBfcmVmNlsxXTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMyLnBlclBhZ2U7XG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gcGVyUGFnZSAqICgob3B0aW9ucy5mbGlja01heFBhZ2VzIHx8IDEpICsgMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH07XG5cbiAgX3Byb3RvMy5yZW5kZXJBcnJvd3MgPSBmdW5jdGlvbiByZW5kZXJBcnJvd3MoKSB7XG4gICAgdmFyIGh0bWwgPSBcIlwiO1xuICAgIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPVxcXCJcIiArIHRoaXMub3B0aW9ucy5jbGFzc2VzLmFycm93cyArIFwiXFxcIj5cIjtcbiAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3codHJ1ZSk7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlckFycm93KGZhbHNlKTtcbiAgICBodG1sICs9IFwiPC9kaXY+XCI7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH07XG5cbiAgX3Byb3RvMy5yZW5kZXJBcnJvdyA9IGZ1bmN0aW9uIHJlbmRlckFycm93KHByZXYpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgY2xhc3NlcyA9IF90aGlzJG9wdGlvbnMuY2xhc3NlcyxcbiAgICAgICAgaTE4biA9IF90aGlzJG9wdGlvbnMuaTE4bjtcbiAgICB2YXIgYXR0cnMgPSB7XG4gICAgICBjbGFzczogY2xhc3Nlcy5hcnJvdyArIFwiIFwiICsgKHByZXYgPyBjbGFzc2VzLnByZXYgOiBjbGFzc2VzLm5leHQpLFxuICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgIGFyaWFMYWJlbDogcHJldiA/IGkxOG4ucHJldiA6IGkxOG4ubmV4dFxuICAgIH07XG4gICAgcmV0dXJuIFwiPGJ1dHRvbiBcIiArIHRoaXMuYnVpbGRBdHRycyhhdHRycykgKyBcIj48c3ZnIHhtbG5zPVxcXCJcIiArIFhNTF9OQU1FX1NQQUNFICsgXCJcXFwiIHZpZXdCb3g9XFxcIjAgMCBcIiArIFNJWkUgKyBcIiBcIiArIFNJWkUgKyBcIlxcXCIgd2lkdGg9XFxcIlwiICsgU0laRSArIFwiXFxcIiBoZWlnaHQ9XFxcIlwiICsgU0laRSArIFwiXFxcIj48cGF0aCBkPVxcXCJcIiArICh0aGlzLm9wdGlvbnMuYXJyb3dQYXRoIHx8IFBBVEgpICsgXCJcXFwiIC8+PC9zdmc+PC9idXR0b24+XCI7XG4gIH07XG5cbiAgX3Byb3RvMy5odG1sID0gZnVuY3Rpb24gaHRtbCgpIHtcbiAgICB2YXIgX3RoaXMkY29uZmlnID0gdGhpcy5jb25maWcsXG4gICAgICAgIHJvb3RDbGFzcyA9IF90aGlzJGNvbmZpZy5yb290Q2xhc3MsXG4gICAgICAgIGxpc3RUYWcgPSBfdGhpcyRjb25maWcubGlzdFRhZyxcbiAgICAgICAgYXJyb3dzID0gX3RoaXMkY29uZmlnLmFycm93cyxcbiAgICAgICAgYmVmb3JlVHJhY2sgPSBfdGhpcyRjb25maWcuYmVmb3JlVHJhY2ssXG4gICAgICAgIGFmdGVyVHJhY2sgPSBfdGhpcyRjb25maWcuYWZ0ZXJUcmFjayxcbiAgICAgICAgc2xpZGVyID0gX3RoaXMkY29uZmlnLnNsaWRlcixcbiAgICAgICAgYmVmb3JlU2xpZGVyID0gX3RoaXMkY29uZmlnLmJlZm9yZVNsaWRlcixcbiAgICAgICAgYWZ0ZXJTbGlkZXIgPSBfdGhpcyRjb25maWcuYWZ0ZXJTbGlkZXI7XG4gICAgdmFyIGh0bWwgPSBcIlwiO1xuICAgIGh0bWwgKz0gXCI8ZGl2IGlkPVxcXCJcIiArIHRoaXMuaWQgKyBcIlxcXCIgY2xhc3M9XFxcIlwiICsgdGhpcy5idWlsZENsYXNzZXMoKSArIFwiIFwiICsgKHJvb3RDbGFzcyB8fCBcIlwiKSArIFwiXFxcIj5cIjtcbiAgICBodG1sICs9IFwiPHN0eWxlPlwiICsgdGhpcy5TdHlsZS5idWlsZCgpICsgXCI8L3N0eWxlPlwiO1xuXG4gICAgaWYgKHNsaWRlcikge1xuICAgICAgaHRtbCArPSBiZWZvcmVTbGlkZXIgfHwgXCJcIjtcbiAgICAgIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPVxcXCJzcGxpZGVfX3NsaWRlclxcXCI+XCI7XG4gICAgfVxuXG4gICAgaHRtbCArPSBiZWZvcmVUcmFjayB8fCBcIlwiO1xuXG4gICAgaWYgKGFycm93cykge1xuICAgICAgaHRtbCArPSB0aGlzLnJlbmRlckFycm93cygpO1xuICAgIH1cblxuICAgIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPVxcXCJzcGxpZGVfX3RyYWNrXFxcIj5cIjtcbiAgICBodG1sICs9IFwiPFwiICsgbGlzdFRhZyArIFwiIGNsYXNzPVxcXCJzcGxpZGVfX2xpc3RcXFwiPlwiO1xuICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJTbGlkZXMoKTtcbiAgICBodG1sICs9IFwiPC9cIiArIGxpc3RUYWcgKyBcIj5cIjtcbiAgICBodG1sICs9IFwiPC9kaXY+XCI7XG4gICAgaHRtbCArPSBhZnRlclRyYWNrIHx8IFwiXCI7XG5cbiAgICBpZiAoc2xpZGVyKSB7XG4gICAgICBodG1sICs9IFwiPC9kaXY+XCI7XG4gICAgICBodG1sICs9IGFmdGVyU2xpZGVyIHx8IFwiXCI7XG4gICAgfVxuXG4gICAgaHRtbCArPSBcIjwvZGl2PlwiO1xuICAgIHJldHVybiBodG1sO1xuICB9O1xuXG4gIHJldHVybiBTcGxpZGVSZW5kZXJlcjtcbn0oKTtcblxuZXhwb3J0IHsgQ0xBU1NFUywgQ0xBU1NfQUNUSVZFLCBDTEFTU19BUlJPVywgQ0xBU1NfQVJST1dTLCBDTEFTU19BUlJPV19ORVhULCBDTEFTU19BUlJPV19QUkVWLCBDTEFTU19DTE9ORSwgQ0xBU1NfQ09OVEFJTkVSLCBDTEFTU19GT0NVU19JTiwgQ0xBU1NfSU5JVElBTElaRUQsIENMQVNTX0xJU1QsIENMQVNTX0xPQURJTkcsIENMQVNTX05FWFQsIENMQVNTX09WRVJGTE9XLCBDTEFTU19QQUdJTkFUSU9OLCBDTEFTU19QQUdJTkFUSU9OX1BBR0UsIENMQVNTX1BSRVYsIENMQVNTX1BST0dSRVNTLCBDTEFTU19QUk9HUkVTU19CQVIsIENMQVNTX1JPT1QsIENMQVNTX1NMSURFLCBDTEFTU19TUElOTkVSLCBDTEFTU19TUiwgQ0xBU1NfVE9HR0xFLCBDTEFTU19UT0dHTEVfUEFVU0UsIENMQVNTX1RPR0dMRV9QTEFZLCBDTEFTU19UUkFDSywgQ0xBU1NfVklTSUJMRSwgREVGQVVMVFMsIEVWRU5UX0FDVElWRSwgRVZFTlRfQVJST1dTX01PVU5URUQsIEVWRU5UX0FSUk9XU19VUERBVEVELCBFVkVOVF9BVVRPUExBWV9QQVVTRSwgRVZFTlRfQVVUT1BMQVlfUExBWSwgRVZFTlRfQVVUT1BMQVlfUExBWUlORywgRVZFTlRfQ0xJQ0ssIEVWRU5UX0RFU1RST1ksIEVWRU5UX0RSQUcsIEVWRU5UX0RSQUdHRUQsIEVWRU5UX0RSQUdHSU5HLCBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRCwgRVZFTlRfSElEREVOLCBFVkVOVF9JTkFDVElWRSwgRVZFTlRfTEFaWUxPQURfTE9BREVELCBFVkVOVF9NT1VOVEVELCBFVkVOVF9NT1ZFLCBFVkVOVF9NT1ZFRCwgRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVELCBFVkVOVF9PVkVSRkxPVywgRVZFTlRfUEFHSU5BVElPTl9NT1VOVEVELCBFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQsIEVWRU5UX1JFQURZLCBFVkVOVF9SRUZSRVNILCBFVkVOVF9SRVNJWkUsIEVWRU5UX1JFU0laRUQsIEVWRU5UX1NDUk9MTCwgRVZFTlRfU0NST0xMRUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX1NMSURFX0tFWURPV04sIEVWRU5UX1VQREFURUQsIEVWRU5UX1ZJU0lCTEUsIEV2ZW50QmluZGVyLCBFdmVudEludGVyZmFjZSwgRkFERSwgTE9PUCwgTFRSLCBSVEwsIFJlcXVlc3RJbnRlcnZhbCwgU0xJREUsIFNUQVRVU19DTEFTU0VTLCBTcGxpZGUsIFNwbGlkZVJlbmRlcmVyLCBTdGF0ZSwgVFRCLCBUaHJvdHRsZSwgU3BsaWRlIGFzIGRlZmF1bHQgfTtcbiIsIi8vIENsYXNzIHRoYXQgaGFuZGxlcyB0aGUgcGxheWJhY2sgb2YgdGhlIHdob2xlIGJvb2tcclxuaW1wb3J0IHtcclxuICAgIEJvb2ssXHJcbiAgICBCb29rVHlwZSxcclxuICAgIFBhZ2UsXHJcbiAgICBUZXh0RWxlbWVudCxcclxuICAgIEltYWdlRWxlbWVudCxcclxuICAgIEF1ZGlvRWxlbWVudCxcclxuICAgIEF1ZGlvVGltZXN0YW1wcyxcclxuICAgIFdvcmRUaW1lc3RhbXBFbGVtZW50LFxyXG59IGZyb20gXCIuLi9Nb2RlbHMvTW9kZWxzXCI7XHJcbmltcG9ydCB7IEVWRU5UX0FDVElWRSwgU3BsaWRlIH0gZnJvbSBcIkBzcGxpZGVqcy9zcGxpZGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5QmFja0VuZ2luZSB7XHJcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyO1xyXG4gICAgbnVtYmVyT2ZQYWdlczogbnVtYmVyO1xyXG4gICAgdHJhbnNpdGlvbmluZ1RvUGFnZTogYm9vbGVhbjtcclxuXHJcbiAgICBpbWFnZXNQYXRoOiBzdHJpbmc7XHJcbiAgICBhdWRpb1BhdGg6IHN0cmluZztcclxuXHJcbiAgICBlbXB0eUdsb3dJbWFnZVRhZzogc3RyaW5nID0gXCJlbXB0eV9nbG93X2ltYWdlXCI7XHJcblxyXG4gICAgc3BsaWRlSGFuZGxlOiBTcGxpZGU7XHJcblxyXG4gICAgY3VycmVudEJvb2tUeXBlOiBCb29rVHlwZTtcclxuXHJcbiAgICBib29rOiBCb29rO1xyXG5cclxuICAgIGN1cnJlbnRQYWdlQXV0b1BsYXllckludGVydmFsOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaW1hZ2VzUGF0aDogc3RyaW5nLCBhdWRpb1BhdGg6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzUGF0aCA9IGltYWdlc1BhdGg7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BhdGggPSBhdWRpb1BhdGg7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XHJcbiAgICAgICAgdGhpcy5zcGxpZGVIYW5kbGUgPSBuZXcgU3BsaWRlKFwiLnNwbGlkZVwiLCB7XHJcbiAgICAgICAgICAgIGZpeGVkSGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAyMCxcclxuICAgICAgICB9KS5tb3VudCgpO1xyXG5cclxuICAgICAgICB0aGlzLnNwbGlkZUhhbmRsZS5vbihcIm1vdmVcIiwgKG5ld0luZGV4LCBvbGRJbmRleCwgZGVzdEluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudHJhbnNpdGlvbmluZ1RvUGFnZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcFBhZ2VBdWRpbyh0aGlzLmJvb2sucGFnZXNbb2xkSW5kZXhdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zcGxpZGVIYW5kbGUub24oXCJtb3ZlZFwiLCAoY3VycmVudEluZGV4LCBwcmV2SW5kZXgsIGRlc3RJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gY3VycmVudEluZGV4O1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25pbmdUb1BhZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5UGFnZUF1ZGlvKHRoaXMuYm9vay5wYWdlc1tjdXJyZW50SW5kZXhdKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRQYWdlUmVzaXplTGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdG9wUGFnZUF1ZGlvKHBhZ2U6IFBhZ2UpIHtcclxuICAgICAgICAvLyBsb29wIHRocm91Z2ggcGFnZSdzIHZpc3VhbCBlbGVtZW50cywgaWYgd2UgZmluZCBhbiBhdWRpbyBvYmplY3QgZ2V0IGl0IGJ5IGlkIGFuZCBzdG9wIGl0XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWdlLnZpc3VhbEVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB2aXN1YWxFbGVtZW50ID0gcGFnZS52aXN1YWxFbGVtZW50c1tpXTtcclxuICAgICAgICAgICAgaWYgKHZpc3VhbEVsZW1lbnQudHlwZSA9PT0gXCJhdWRpb1wiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXVkaW9FbGVtZW50OiBBdWRpb0VsZW1lbnQgPSB2aXN1YWxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGlvRWxlbWVudERvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGF1ZGlvRWxlbWVudC5kb21JRCkgYXMgSFRNTEF1ZGlvRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGF1ZGlvRWxlbWVudERvbS5wYXVzZSgpO1xyXG4gICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50RG9tLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jdXJyZW50UGFnZUF1dG9QbGF5ZXJJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMudGltZXN0YW1wcy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB3b3JkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGF1ZGlvRWxlbWVudC5kb21JRCArIFwiX3dvcmRfXCIgKyBqKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICB3b3JkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiY3ItY2xpY2thYmxlLXdvcmQtYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlQYWdlQXVkaW8ocGFnZTogUGFnZSkge1xyXG4gICAgICAgIC8vIGxvb3AgdGhyb3VnaCBwYWdlJ3MgdmlzdWFsIGVsZW1lbnRzLCBpZiB3ZSBmaW5kIGFuIGF1ZGlvIG9iamVjdCBnZXQgaXQgYnkgaWQgYW5kIHBsYXkgaXRcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2UudmlzdWFsRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHZpc3VhbEVsZW1lbnQgPSBwYWdlLnZpc3VhbEVsZW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC50eXBlID09PSBcImF1ZGlvXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBhdWRpb0VsZW1lbnQ6IEF1ZGlvRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXVkaW9FbGVtZW50RG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50LmRvbUlEXHJcbiAgICAgICAgICAgICAgICApIGFzIEhUTUxBdWRpb0VsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBhdWRpb0VsZW1lbnREb20ucGxheSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBsYXN0V29yZEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50SW5kZXggPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2VBdXRvUGxheWVySW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFRpbWUgPSBhdWRpb0VsZW1lbnREb20uY3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXVkaW9FbGVtZW50LmF1ZGlvVGltZXN0YW1wcy50aW1lc3RhbXBzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPj0gYXVkaW9FbGVtZW50LmF1ZGlvVGltZXN0YW1wcy50aW1lc3RhbXBzW2pdLnN0YXJ0VGltZXN0YW1wICYmIGN1cnJlbnRUaW1lIDw9IGF1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMudGltZXN0YW1wc1tqXS5lbmRUaW1lc3RhbXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3b3JkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGF1ZGlvRWxlbWVudC5kb21JRCArIFwiX3dvcmRfXCIgKyBjdXJyZW50SW5kZXgpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjci1jbGlja2FibGUtd29yZC1hY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZEVsZW1lbnQuc3R5bGUuY29sb3IgPSBhdWRpb0VsZW1lbnQuZ2xvd0NvbG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0V29yZEluZGV4IDwgY3VycmVudEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJDdXJyZW50IGluZGV4OiBcIiArIGN1cnJlbnRJbmRleCArIFwiIGxhc3QgaW5kZXg6IFwiICsgbGFzdFdvcmRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdvcmRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYXVkaW9FbGVtZW50LmRvbUlEICsgXCJfd29yZF9cIiArIGxhc3RXb3JkSW5kZXgpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjci1jbGlja2FibGUtd29yZC1hY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZEVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFdvcmRJbmRleCA9IGN1cnJlbnRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRpbWUgPj0gYXVkaW9FbGVtZW50LmF1ZGlvVGltZXN0YW1wcy50aW1lc3RhbXBzW2F1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMudGltZXN0YW1wcy5sZW5ndGggLSAxXS5lbmRUaW1lc3RhbXAgLSAwLjEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiRmluaXNoZWQgSGlnaGxpZ2h0aW5nISBDdXJyZW50IGluZGV4OiBcIiArIGN1cnJlbnRJbmRleCArIFwiIGxhc3QgaW5kZXg6IFwiICsgbGFzdFdvcmRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd29yZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhdWRpb0VsZW1lbnQuZG9tSUQgKyBcIl93b3JkX1wiICsgY3VycmVudEluZGV4KSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjci1jbGlja2FibGUtd29yZC1hY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkRWxlbWVudC5zdHlsZS5jb2xvciA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jdXJyZW50UGFnZUF1dG9QbGF5ZXJJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCA2MCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUGFnZVJlc2l6ZUxpc3RlbmVyKCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zcGxpZGVIYW5kbGUub3B0aW9ucy5maXhlZEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIDIwO1xyXG4gICAgICAgICAgICB0aGlzLnNwbGlkZUhhbmRsZS5yZWZyZXNoKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZUJvb2soYm9vazogQm9vaykge1xyXG4gICAgICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Qm9va1R5cGUgPSBib29rLmJvb2tUeXBlO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZQYWdlcyA9IGJvb2sucGFnZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Qm9va1R5cGUgPT09IEJvb2tUeXBlLkN1cmlvdXNSZWFkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQ3VyaW91c1JlYWRlckJvb2soYm9vayk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRCb29rVHlwZSA9PT0gQm9va1R5cGUuR0RMKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUdETEJvb2soYm9vayk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemVDdXJpb3VzUmVhZGVyQm9vayhib29rOiBCb29rKSB7XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZlBhZ2VzID0gYm9vay5wYWdlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9vay5wYWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcclxuICAgICAgICAgICAgc2xpZGUuY2xhc3NMaXN0LmFkZChcInNwbGlkZV9fc2xpZGVcIik7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VudGVuY2VJbml0aWFsaXplZEJ5QXVkaW8gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZpcnN0IHdlIGFyZSBhZGRpbmcgdGhlIGltYWdlIGFuZCBhdWRpbyBlbGVtZW50cyBhbmQgdGhlIHRleHQgYWZ0ZXJcclxuICAgICAgICAgICAgLy8gdGhlIHJlYXNvbmluZyBiZWhpbmQgdGhpcyBpcyB0aGF0IGlmIHRoZSBwYWdlIGNvbnRhaW5zIGFuIGF1ZGlvXHJcbiAgICAgICAgICAgIC8vIGVsZW1lbnQgaW4gdGhhdCBjYXNlIHdlIHNob3VsZCBpbml0aWFsaXplIHRleHQgZnJvbSB0aGUgYXVkaW9cclxuICAgICAgICAgICAgLy8gdGltZXN0YW1wcyB0aGF0IHdlIGdldCBmcm9tIHRoZSBjb250ZW50IGZpbGVcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib29rLnBhZ2VzW2ldLnZpc3VhbEVsZW1lbnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmlzdWFsRWxlbWVudCA9IGJvb2sucGFnZXNbaV0udmlzdWFsRWxlbWVudHNbal07XHJcbiAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhZ2VJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVJbWFnZUNvbnRhaW5lcihwYWdlSW5kZXgsIGltYWdlRWxlbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2aXN1YWxFbGVtZW50LnR5cGUgPT0gXCJhdWRpb1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VudGVuY2VJbml0aWFsaXplZEJ5QXVkaW8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdWRpb0VsZW1lbnQ6IEF1ZGlvRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0RWxlbWVudDogVGV4dEVsZW1lbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvb2sucGFnZXNbaV0udmlzdWFsRWxlbWVudHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZpc3VhbEVsZW1lbnQgPSBib29rLnBhZ2VzW2ldLnZpc3VhbEVsZW1lbnRzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdWRpb0FuZFRleHREaXZzID0gdGhpcy5jcmVhdGVBdWRpb0FuZFRleHRDb250YWluZXJzKGksIGF1ZGlvRWxlbWVudCwgdGV4dEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChhdWRpb0FuZFRleHREaXZzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQoYXVkaW9BbmRUZXh0RGl2c1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVBdWRpb0NvbnRhaW5lcihhdWRpb0VsZW1lbnQpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpZGVIYW5kbGUuYWRkKHNsaWRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gSWYgdGhlIHNlbnRlbmNlIHdhc24ndCBub3QgaW5pdGlhbGl6ZWQgYnkgdGhlIGF1ZGlvIG9iamVjdFxyXG4gICAgICAgICAgICAvLyB0aGVuIHdlIGFkZCBpdCBoZXJlXHJcbiAgICAgICAgICAgIGlmICghc2VudGVuY2VJbml0aWFsaXplZEJ5QXVkaW8pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9vay5wYWdlc1tpXS52aXN1YWxFbGVtZW50cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2aXN1YWxFbGVtZW50ID0gYm9vay5wYWdlc1tpXS52aXN1YWxFbGVtZW50c1tqXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZXh0RWxlbWVudDogVGV4dEVsZW1lbnQgPSB2aXN1YWxFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVUZXh0Q29udGFpbmVyKHRleHRFbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVRleHRDb250YWluZXIodGV4dEVsZW1lbnQ6IFRleHRFbGVtZW50KTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIGxldCB0ZXh0RWxlbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LmlkID0gXCJjci10ZXh0XCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuY2xhc3NMaXN0LmFkZChcImNyLXRleHRcIik7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUud2Via2l0VGV4dFN0cm9rZSA9IFwiMXB4ICMzMDMwMzBcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLnRleHRTaGFkb3cgPSBcIjAuMXJlbSAwLjE1cmVtIDAuMXJlbSAjMzAzMDMwXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udEZhbWlseSA9IFwiUXVpY2tzYW5kXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udFdlaWdodCA9IFwiODAwXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udFNpemUgPSBcIjEuN2VtXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUudG9wID0gdGV4dEVsZW1lbnQucG9zaXRpb25ZICsgXCIlXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUubGVmdCA9IHRleHRFbGVtZW50LnBvc2l0aW9uWCArIFwiJVwiO1xyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLndpZHRoID0gdGV4dEVsZW1lbnQud2lkdGggKyBcIiVcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5oZWlnaHQgPSB0ZXh0RWxlbWVudC5oZWlnaHQgKyBcIiVcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5pbm5lckhUTUwgPSB0ZXh0RWxlbWVudC50ZXh0Q29udGVudEFzSFRNTDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRleHRFbGVtZW50RGl2O1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUltYWdlQ29udGFpbmVyKHBhZ2VJbmRleDogbnVtYmVyLCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCk6IEhUTUxEaXZFbGVtZW50IHtcclxuICAgICAgICBsZXQgaW1hZ2VFbGVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgIGltYWdlRWxlbWVudERpdi5zdHlsZS50b3AgPSBpbWFnZUVsZW1lbnQucG9zaXRpb25ZICsgXCIlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLmxlZnQgPSBpbWFnZUVsZW1lbnQucG9zaXRpb25YICsgXCIlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLndpZHRoID0gaW1hZ2VFbGVtZW50LndpZHRoICsgXCIlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLmhlaWdodCA9IGltYWdlRWxlbWVudC5oZWlnaHQgKyBcIiVcIjtcclxuXHJcbiAgICAgICAgaWYgKGltYWdlRWxlbWVudC5pbWFnZVNvdXJjZSA9PT0gdGhpcy5lbXB0eUdsb3dJbWFnZVRhZykge1xyXG4gICAgICAgICAgICBpbWFnZUVsZW1lbnREaXYuY2xhc3NMaXN0LmFkZChcImNyLWltYWdlLWVtcHR5LWdsb3dcIik7XHJcbiAgICAgICAgICAgIC8vIFVzaW5nIGNsYXNzZXMgaGVyZSBpbnN0ZWFkIG9mIGlkIGFzc2lnbm1lbnQsIGJlY2F1c2Ugd2UgY291bGQgaGF2ZSBtdWx0aXBsZSBnbG93aW5nIGRpdnNcclxuICAgICAgICAgICAgLy8gYXR0YWNoZWQgdG8gb25lIHdvcmQgaW4gdGhlIHNlbnRlbmNlIGFuZCBoYXZpbmcgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgc2FtZSBpZCBpcyBub3RcclxuICAgICAgICAgICAgLy8gYWxsb3dlZCBpbiBIVE1MXHJcbiAgICAgICAgICAgIGltYWdlRWxlbWVudERpdi5jbGFzc0xpc3QuYWRkKGltYWdlRWxlbWVudC5kb21JRCk7XHJcbiAgICAgICAgICAgIGltYWdlRWxlbWVudERpdi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVHbG93SW1hZ2VDbGljayhwYWdlSW5kZXgsIGltYWdlRWxlbWVudC5kb21JRC5zcGxpdChcIl9cIilbMV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbWFnZUVsZW1lbnREaXYuaWQgPSBpbWFnZUVsZW1lbnQuZG9tSUQ7XHJcbiAgICAgICAgICAgIGltYWdlRWxlbWVudERpdi5jbGFzc0xpc3QuYWRkKFwiY3ItaW1hZ2VcIik7XHJcblxyXG4gICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgaW1hZ2VFbGVtZW50SW1nLnNyYyA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlc1BhdGggKyBpbWFnZUVsZW1lbnQuaW1hZ2VTb3VyY2UucmVwbGFjZShcImltYWdlcy9cIiwgXCJcIik7XHJcbiAgICAgICAgICAgIGltYWdlRWxlbWVudEltZy5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBpbWFnZUVsZW1lbnRJbWcuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgIGltYWdlRWxlbWVudERpdi5hcHBlbmRDaGlsZChpbWFnZUVsZW1lbnRJbWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGltYWdlRWxlbWVudERpdjtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVBdWRpb0NvbnRhaW5lcihhdWRpb0VsZW1lbnQ6IEF1ZGlvRWxlbWVudCk6IEhUTUxEaXZFbGVtZW50IHtcclxuICAgICAgICBsZXQgYXVkaW9FbGVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICAgICAgYXVkaW9FbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoXCJjci1hdWRpb1wiKTtcclxuICAgICAgICBhdWRpb0VsZW1lbnREaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcblxyXG4gICAgICAgIGxldCBwYWdlQXVkaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XHJcbiAgICAgICAgcGFnZUF1ZGlvLmlkID0gYXVkaW9FbGVtZW50LmRvbUlEO1xyXG4gICAgICAgIHBhZ2VBdWRpby5zcmMgPSB0aGlzLmF1ZGlvUGF0aCArIGF1ZGlvRWxlbWVudC5hdWRpb1NyYy5yZXBsYWNlKFwiYXVkaW9zL1wiLCBcIlwiKTtcclxuICAgICAgICBwYWdlQXVkaW8uY29udHJvbHMgPSBmYWxzZTtcclxuICAgICAgICBhdWRpb0VsZW1lbnREaXYuYXBwZW5kQ2hpbGQocGFnZUF1ZGlvKTtcclxuXHJcbiAgICAgICAgaWYgKGF1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMudGltZXN0YW1wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHdvcmRUaW1lc3RhbXBFbGVtZW50OiBXb3JkVGltZXN0YW1wRWxlbWVudCA9IGF1ZGlvRWxlbWVudC5hdWRpb1RpbWVzdGFtcHMudGltZXN0YW1wc1tpXTtcclxuICAgICAgICAgICAgICAgIGxldCB3b3JkQXVkaW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpO1xyXG4gICAgICAgICAgICAgICAgd29yZEF1ZGlvRWxlbWVudC5pZCA9IHdvcmRUaW1lc3RhbXBFbGVtZW50LmRvbUlEO1xyXG4gICAgICAgICAgICAgICAgd29yZEF1ZGlvRWxlbWVudC5zcmMgPSB0aGlzLmF1ZGlvUGF0aCArIHdvcmRUaW1lc3RhbXBFbGVtZW50LmF1ZGlvU3JjLnJlcGxhY2UoXCJhdWRpb3MvXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgd29yZEF1ZGlvRWxlbWVudC5jb250cm9scyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50RGl2LmFwcGVuZENoaWxkKHdvcmRBdWRpb0VsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXVkaW9FbGVtZW50RGl2O1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUF1ZGlvQW5kVGV4dENvbnRhaW5lcnMocGFnZUluZGV4OiBudW1iZXIsIGF1ZGlvRWxlbWVudDogQXVkaW9FbGVtZW50LCB0ZXh0RWxlbWVudDogVGV4dEVsZW1lbnQpOiBIVE1MRGl2RWxlbWVudFtdIHtcclxuICAgICAgICBsZXQgYXVkaW9BbmRUZXh0QXJyYXk6IEhUTUxEaXZFbGVtZW50W10gPSBBcnJheSgpO1xyXG5cclxuICAgICAgICBsZXQgYXVkaW9FbGVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICAgICAgYXVkaW9FbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoXCJjci1hdWRpb1wiKTtcclxuICAgICAgICBhdWRpb0VsZW1lbnREaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcblxyXG4gICAgICAgIGxldCBwYWdlQXVkaW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XHJcbiAgICAgICAgcGFnZUF1ZGlvLmlkID0gYXVkaW9FbGVtZW50LmRvbUlEO1xyXG4gICAgICAgIHBhZ2VBdWRpby5zcmMgPSB0aGlzLmF1ZGlvUGF0aCArIGF1ZGlvRWxlbWVudC5hdWRpb1NyYy5yZXBsYWNlKFwiYXVkaW9zL1wiLCBcIlwiKTtcclxuICAgICAgICBwYWdlQXVkaW8uY29udHJvbHMgPSBmYWxzZTtcclxuICAgICAgICBhdWRpb0VsZW1lbnREaXYuYXBwZW5kQ2hpbGQocGFnZUF1ZGlvKTtcclxuXHJcbiAgICAgICAgbGV0IHNlbnRlbmNlQXJyYXlUcmltbWVkOiBzdHJpbmdbXSA9IEFycmF5KCk7XHJcblxyXG4gICAgICAgIGlmIChhdWRpb0VsZW1lbnQuYXVkaW9UaW1lc3RhbXBzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdWRpb0VsZW1lbnQuYXVkaW9UaW1lc3RhbXBzLnRpbWVzdGFtcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB3b3JkVGltZXN0YW1wRWxlbWVudDogV29yZFRpbWVzdGFtcEVsZW1lbnQgPSBhdWRpb0VsZW1lbnQuYXVkaW9UaW1lc3RhbXBzLnRpbWVzdGFtcHNbaV07XHJcbiAgICAgICAgICAgICAgICBsZXQgd29yZEF1ZGlvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiKTtcclxuICAgICAgICAgICAgICAgIHdvcmRBdWRpb0VsZW1lbnQuaWQgPSB3b3JkVGltZXN0YW1wRWxlbWVudC5kb21JRDtcclxuICAgICAgICAgICAgICAgIHdvcmRBdWRpb0VsZW1lbnQuc3JjID0gdGhpcy5hdWRpb1BhdGggKyB3b3JkVGltZXN0YW1wRWxlbWVudC5hdWRpb1NyYy5yZXBsYWNlKFwiYXVkaW9zL1wiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHdvcmRBdWRpb0VsZW1lbnQuY29udHJvbHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHNlbnRlbmNlQXJyYXlUcmltbWVkLnB1c2god29yZFRpbWVzdGFtcEVsZW1lbnQud29yZC50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgYXVkaW9FbGVtZW50RGl2LmFwcGVuZENoaWxkKHdvcmRBdWRpb0VsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhdWRpb0FuZFRleHRBcnJheS5wdXNoKGF1ZGlvRWxlbWVudERpdik7XHJcblxyXG4gICAgICAgIGxldCBhdWRpb0NvbnRlbnRET01JZCA9IGF1ZGlvRWxlbWVudC5kb21JRDtcclxuXHJcbiAgICAgICAgbGV0IHRleHRFbGVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuaWQgPSBcImNyLXRleHRcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5jbGFzc0xpc3QuYWRkKFwiY3ItdGV4dFwiKTtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS53ZWJraXRUZXh0U3Ryb2tlID0gXCIxcHggIzMwMzAzMFwiO1xyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLmNvbG9yID0gXCIjRkZGRkZGXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUudGV4dFNoYWRvdyA9IFwiMC4xcmVtIDAuMTVyZW0gMC4xcmVtICMzMDMwMzBcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5mb250RmFtaWx5ID0gXCJRdWlja3NhbmRcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5mb250V2VpZ2h0ID0gXCI4MDBcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5mb250U2l6ZSA9IFwiMS43ZW1cIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS50b3AgPSB0ZXh0RWxlbWVudC5wb3NpdGlvblkgKyBcIiVcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5sZWZ0ID0gdGV4dEVsZW1lbnQucG9zaXRpb25YICsgXCIlXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUud2lkdGggPSB0ZXh0RWxlbWVudC53aWR0aCArIFwiJVwiO1xyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLmhlaWdodCA9IHRleHRFbGVtZW50LmhlaWdodCArIFwiJVwiO1xyXG5cclxuICAgICAgICBsZXQgc2VudGVuY2VQYXJhZ3JhcGg6IEhUTUxQYXJhZ3JhcGhFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgc2VudGVuY2VQYXJhZ3JhcGguc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICBzZW50ZW5jZVBhcmFncmFwaC5zdHlsZS5mb250U2l6ZSA9IFwiMS43NWVtXCI7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VudGVuY2VBcnJheVRyaW1tZWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGNsaWNrYWJsZVdvcmRFbGVtZW50OiBIVE1MU3BhbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBjbGlja2FibGVXb3JkRWxlbWVudC5pZCA9IGF1ZGlvQ29udGVudERPTUlkICsgXCJfd29yZF9cIiArIGk7XHJcbiAgICAgICAgICAgIGNsaWNrYWJsZVdvcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjci1jbGlja2FibGUtd29yZFwiKTtcclxuICAgICAgICAgICAgY2xpY2thYmxlV29yZEVsZW1lbnQuc3R5bGUubWFyZ2luID0gXCIxMHB4XCI7XHJcbiAgICAgICAgICAgIGNsaWNrYWJsZVdvcmRFbGVtZW50LmlubmVyVGV4dCA9IHNlbnRlbmNlQXJyYXlUcmltbWVkW2ldO1xyXG4gICAgICAgICAgICBjbGlja2FibGVXb3JkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUludGVyYWN0aXZlV29yZENsaWNrKHBhZ2VJbmRleCwgaSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZW50ZW5jZVBhcmFncmFwaC5hcHBlbmRDaGlsZChjbGlja2FibGVXb3JkRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5hcHBlbmRDaGlsZChzZW50ZW5jZVBhcmFncmFwaCk7XHJcblxyXG4gICAgICAgIGF1ZGlvQW5kVGV4dEFycmF5LnB1c2godGV4dEVsZW1lbnREaXYpO1xyXG5cclxuICAgICAgICByZXR1cm4gYXVkaW9BbmRUZXh0QXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlR2xvd0ltYWdlQ2xpY2socGFnZUluZGV4OiBudW1iZXIsIHdvcmRJbmRleDogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8gUGFyc2UgdGhlIG51bWJlciBmcm9tIHRoZSB3b3JkSW5kZXhcclxuICAgICAgICBsZXQgd29yZEluZGV4TnVtYmVyID0gcGFyc2VJbnQod29yZEluZGV4KTtcclxuICAgICAgICB0aGlzLmhhbmRsZUludGVyYWN0aXZlV29yZENsaWNrKHBhZ2VJbmRleCwgd29yZEluZGV4TnVtYmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVJbnRlcmFjdGl2ZVdvcmRDbGljayhwYWdlSW5kZXg6IG51bWJlciwgd29yZEluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcGFnZSA9IHRoaXMuYm9vay5wYWdlc1twYWdlSW5kZXhdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZS52aXN1YWxFbGVtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdmlzdWFsRWxlbWVudCA9IHBhZ2UudmlzdWFsRWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnR5cGUgPT09IFwiYXVkaW9cIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGlvRWxlbWVudDogQXVkaW9FbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIC8vIEhpZ2hsaWdodCB0aGUgd29yZFxyXG4gICAgICAgICAgICAgICAgbGV0IHdvcmRBdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhdWRpb0VsZW1lbnQuYXVkaW9UaW1lc3RhbXBzLnRpbWVzdGFtcHNbd29yZEluZGV4XS5kb21JRCkgYXMgSFRNTEF1ZGlvRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGxldCB3b3JkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGF1ZGlvRWxlbWVudC5kb21JRCArIFwiX3dvcmRfXCIgKyB3b3JkSW5kZXgpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgd29yZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNyLWNsaWNrYWJsZS13b3JkLWFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgIHdvcmRFbGVtZW50LnN0eWxlLmNvbG9yID0gYXVkaW9FbGVtZW50Lmdsb3dDb2xvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgdGhlIGNvbm5lY3RlZCBnbG93IGltYWdlc1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbm5lY3RlZEdsb3dJbWFnZUNsYXNzID0gXCJpbWdcIiArIGF1ZGlvRWxlbWVudC5kb21JRCArIFwiX1wiICsgd29yZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbm5lY3RlZEdsb3dJbWFnZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNvbm5lY3RlZEdsb3dJbWFnZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29ubmVjdGVkR2xvd0ltYWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBnbG93RGl2ID0gY29ubmVjdGVkR2xvd0ltYWdlc1tpXSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBnbG93RGl2LnN0eWxlLmJveFNoYWRvdyA9IGF1ZGlvRWxlbWVudC5nbG93Q29sb3IgKyBcIiAwcHggMHB4IDIwcHggMjBweFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdvcmRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJjci1jbGlja2FibGUtd29yZC1hY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgd29yZEVsZW1lbnQuc3R5bGUuY29sb3IgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25uZWN0ZWRHbG93SW1hZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnbG93RGl2ID0gY29ubmVjdGVkR2xvd0ltYWdlc1tpXSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvd0Rpdi5zdHlsZS5ib3hTaGFkb3cgPSBcInRyYW5zcGFyZW50IDBweCAwcHggMjBweCAyMHB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgNjAwKTtcclxuICAgICAgICAgICAgICAgIHdvcmRBdWRpb0VsZW1lbnQucGxheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemVHRExCb29rKGJvb2s6IEJvb2spIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvb2sucGFnZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgICAgIHNsaWRlLmNsYXNzTGlzdC5hZGQoXCJzcGxpZGVfX3NsaWRlXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGEgZmxleGJveCBjb250YWluZXIgdG8gdGhlIHNsaWRlIHdpdGggYSBjb2x1bW4gbGF5b3V0XHJcbiAgICAgICAgICAgIGxldCBmbGV4Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgZmxleENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZ2RsLWZsZXgtY29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICBmbGV4Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICAgICAgZmxleENvbnRhaW5lci5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcclxuICAgICAgICAgICAgZmxleENvbnRhaW5lci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgICAgIGZsZXhDb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgICAgIGZsZXhDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgIGZsZXhDb250YWluZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQoZmxleENvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICAvLyBmb3JlYWNoIHZpc3VhbGVsZW1lbnQgaW4gcGFnZSBhZGQgdG8gc2xpZGVcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib29rLnBhZ2VzW2ldLnZpc3VhbEVsZW1lbnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmlzdWFsRWxlbWVudCA9IGJvb2sucGFnZXNbaV0udmlzdWFsRWxlbWVudHNbal07XHJcbiAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRFbGVtZW50OiBUZXh0RWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRFbGVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS53aWR0aCA9IFwiNjAlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoXCJnZGwtdGV4dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS53ZWJraXRUZXh0U3Ryb2tlID0gXCIxcHggIzMwMzAzMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLmNvbG9yID0gXCIjRkZGRkZGXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUudGV4dFNoYWRvdyA9IFwiMC4xcmVtIDAuMTVyZW0gMC4xcmVtICMzMDMwMzBcIjtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5mb250RmFtaWx5ID0gXCJRdWlja3NhbmRcIjtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5mb250V2VpZ2h0ID0gXCI4MDBcIjtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5mb250U2l6ZSA9IFwiMS43ZW1cIjtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5pbm5lckhUTUwgPSB0ZXh0RWxlbWVudC50ZXh0Q29udGVudEFzSFRNTDtcclxuICAgICAgICAgICAgICAgICAgICBmbGV4Q29udGFpbmVyLmFwcGVuZENoaWxkKHRleHRFbGVtZW50RGl2KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWFnZUVsZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudERpdi5jbGFzc0xpc3QuYWRkKFwiZ2RsLWltYWdlXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnRJbWcuc3JjID0gdGhpcy5pbWFnZXNQYXRoICsgaW1hZ2VFbGVtZW50LmltYWdlU291cmNlLnJlcGxhY2UoXCJpbWFnZXMvXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudEltZy5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudEltZy5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnREaXYuYXBwZW5kQ2hpbGQoaW1hZ2VFbGVtZW50SW1nKTtcclxuICAgICAgICAgICAgICAgICAgICBmbGV4Q29udGFpbmVyLmFwcGVuZENoaWxkKGltYWdlRWxlbWVudERpdik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3BsaWRlSGFuZGxlLmFkZChzbGlkZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdvVG9OZXh0UGFnZSgpIHtcclxuICAgICAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nVG9QYWdlKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPCB0aGlzLm51bWJlck9mUGFnZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRyYW5zaXRpb25Ub1BhZ2UodGhpcy5jdXJyZW50UGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ29Ub1ByZXZpb3VzUGFnZSgpIHtcclxuICAgICAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nVG9QYWdlKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UtLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uVG9QYWdlKHRoaXMuY3VycmVudFBhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zaXRpb25Ub1BhZ2UocGFnZU51bWJlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uaW5nVG9QYWdlID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iLCJ0cnl7c2VsZltcIndvcmtib3g6d2luZG93OjYuNS4zXCJdJiZfKCl9Y2F0Y2gobil7fWZ1bmN0aW9uIG4obix0KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHIpe3ZhciBlPW5ldyBNZXNzYWdlQ2hhbm5lbDtlLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbihuKXtyKG4uZGF0YSl9LG4ucG9zdE1lc3NhZ2UodCxbZS5wb3J0Ml0pfSkpfWZ1bmN0aW9uIHQobix0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGU9dFtyXTtlLmVudW1lcmFibGU9ZS5lbnVtZXJhYmxlfHwhMSxlLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBlJiYoZS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sZS5rZXksZSl9fWZ1bmN0aW9uIHIobix0KXsobnVsbD09dHx8dD5uLmxlbmd0aCkmJih0PW4ubGVuZ3RoKTtmb3IodmFyIHI9MCxlPW5ldyBBcnJheSh0KTtyPHQ7cisrKWVbcl09bltyXTtyZXR1cm4gZX1mdW5jdGlvbiBlKG4sdCl7dmFyIGU7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFN5bWJvbHx8bnVsbD09bltTeW1ib2wuaXRlcmF0b3JdKXtpZihBcnJheS5pc0FycmF5KG4pfHwoZT1mdW5jdGlvbihuLHQpe2lmKG4pe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiByKG4sdCk7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pLnNsaWNlKDgsLTEpO3JldHVyblwiT2JqZWN0XCI9PT1lJiZuLmNvbnN0cnVjdG9yJiYoZT1uLmNvbnN0cnVjdG9yLm5hbWUpLFwiTWFwXCI9PT1lfHxcIlNldFwiPT09ZT9BcnJheS5mcm9tKG4pOlwiQXJndW1lbnRzXCI9PT1lfHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChlKT9yKG4sdCk6dm9pZCAwfX0obikpfHx0JiZuJiZcIm51bWJlclwiPT10eXBlb2Ygbi5sZW5ndGgpe2UmJihuPWUpO3ZhciBpPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGk+PW4ubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTpuW2krK119fX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9cmV0dXJuKGU9bltTeW1ib2wuaXRlcmF0b3JdKCkpLm5leHQuYmluZChlKX10cnl7c2VsZltcIndvcmtib3g6Y29yZTo2LjUuM1wiXSYmXygpfWNhdGNoKG4pe312YXIgaT1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5wcm9taXNlPW5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe24ucmVzb2x2ZT10LG4ucmVqZWN0PXJ9KSl9O2Z1bmN0aW9uIG8obix0KXt2YXIgcj1sb2NhdGlvbi5ocmVmO3JldHVybiBuZXcgVVJMKG4scikuaHJlZj09PW5ldyBVUkwodCxyKS5ocmVmfXZhciB1PWZ1bmN0aW9uKG4sdCl7dGhpcy50eXBlPW4sT2JqZWN0LmFzc2lnbih0aGlzLHQpfTtmdW5jdGlvbiBhKG4sdCxyKXtyZXR1cm4gcj90P3Qobik6bjoobiYmbi50aGVufHwobj1Qcm9taXNlLnJlc29sdmUobikpLHQ/bi50aGVuKHQpOm4pfWZ1bmN0aW9uIGMoKXt9dmFyIGY9e3R5cGU6XCJTS0lQX1dBSVRJTkdcIn07ZnVuY3Rpb24gcyhuLHQpe2lmKCF0KXJldHVybiBuJiZuLnRoZW4/bi50aGVuKGMpOlByb21pc2UucmVzb2x2ZSgpfXZhciB2PWZ1bmN0aW9uKHIpe3ZhciBlLGM7ZnVuY3Rpb24gdihuLHQpe3ZhciBlLGM7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSwoZT1yLmNhbGwodGhpcyl8fHRoaXMpLm5uPXt9LGUudG49MCxlLnJuPW5ldyBpLGUuZW49bmV3IGksZS5vbj1uZXcgaSxlLnVuPTAsZS5hbj1uZXcgU2V0LGUuY249ZnVuY3Rpb24oKXt2YXIgbj1lLmZuLHQ9bi5pbnN0YWxsaW5nO2UudG4+MHx8IW8odC5zY3JpcHRVUkwsZS5zbi50b1N0cmluZygpKXx8cGVyZm9ybWFuY2Uubm93KCk+ZS51bis2ZTQ/KGUudm49dCxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuY24pKTooZS5obj10LGUuYW4uYWRkKHQpLGUucm4ucmVzb2x2ZSh0KSksKytlLnRuLHQuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsZS5sbil9LGUubG49ZnVuY3Rpb24obil7dmFyIHQ9ZS5mbixyPW4udGFyZ2V0LGk9ci5zdGF0ZSxvPXI9PT1lLnZuLGE9e3N3OnIsaXNFeHRlcm5hbDpvLG9yaWdpbmFsRXZlbnQ6bn07IW8mJmUubW4mJihhLmlzVXBkYXRlPSEwKSxlLmRpc3BhdGNoRXZlbnQobmV3IHUoaSxhKSksXCJpbnN0YWxsZWRcIj09PWk/ZS53bj1zZWxmLnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7XCJpbnN0YWxsZWRcIj09PWkmJnQud2FpdGluZz09PXImJmUuZGlzcGF0Y2hFdmVudChuZXcgdShcIndhaXRpbmdcIixhKSl9KSwyMDApOlwiYWN0aXZhdGluZ1wiPT09aSYmKGNsZWFyVGltZW91dChlLnduKSxvfHxlLmVuLnJlc29sdmUocikpfSxlLmRuPWZ1bmN0aW9uKG4pe3ZhciB0PWUuaG4scj10IT09bmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcjtlLmRpc3BhdGNoRXZlbnQobmV3IHUoXCJjb250cm9sbGluZ1wiLHtpc0V4dGVybmFsOnIsb3JpZ2luYWxFdmVudDpuLHN3OnQsaXNVcGRhdGU6ZS5tbn0pKSxyfHxlLm9uLnJlc29sdmUodCl9LGUuZ249KGM9ZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhLHI9bi5wb3J0cyxpPW4uc291cmNlO3JldHVybiBhKGUuZ2V0U1coKSwoZnVuY3Rpb24oKXtlLmFuLmhhcyhpKSYmZS5kaXNwYXRjaEV2ZW50KG5ldyB1KFwibWVzc2FnZVwiLHtkYXRhOnQsb3JpZ2luYWxFdmVudDpuLHBvcnRzOnIsc3c6aX0pKX0pKX0sZnVuY3Rpb24oKXtmb3IodmFyIG49W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspblt0XT1hcmd1bWVudHNbdF07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoYy5hcHBseSh0aGlzLG4pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSksZS5zbj1uLGUubm49dCxuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUuZ24pLGV9Yz1yLChlPXYpLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGMucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUuX19wcm90b19fPWM7dmFyIGgsbCxtLHc9di5wcm90b3R5cGU7cmV0dXJuIHcucmVnaXN0ZXI9ZnVuY3Rpb24obil7dmFyIHQ9KHZvaWQgMD09PW4/e306bikuaW1tZWRpYXRlLHI9dm9pZCAwIT09dCYmdDt0cnl7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24obix0KXt2YXIgcj1uKCk7aWYociYmci50aGVuKXJldHVybiByLnRoZW4odCk7cmV0dXJuIHQocil9KChmdW5jdGlvbigpe2lmKCFyJiZcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlKXJldHVybiBzKG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsbil9KSkpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIGUubW49Qm9vbGVhbihuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSxlLnluPWUucG4oKSxhKGUuYm4oKSwoZnVuY3Rpb24obil7ZS5mbj1uLGUueW4mJihlLmhuPWUueW4sZS5lbi5yZXNvbHZlKGUueW4pLGUub24ucmVzb2x2ZShlLnluKSxlLnluLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLGUubG4se29uY2U6ITB9KSk7dmFyIHQ9ZS5mbi53YWl0aW5nO3JldHVybiB0JiZvKHQuc2NyaXB0VVJMLGUuc24udG9TdHJpbmcoKSkmJihlLmhuPXQsUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKXtlLmRpc3BhdGNoRXZlbnQobmV3IHUoXCJ3YWl0aW5nXCIse3N3OnQsd2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyOiEwfSkpfSkpLnRoZW4oKGZ1bmN0aW9uKCl7fSkpKSxlLmhuJiYoZS5ybi5yZXNvbHZlKGUuaG4pLGUuYW4uYWRkKGUuaG4pKSxlLmZuLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuY24pLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250cm9sbGVyY2hhbmdlXCIsZS5kbiksZS5mbn0pKX0pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSx3LnVwZGF0ZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gdGhpcy5mbj9zKHRoaXMuZm4udXBkYXRlKCkpOnZvaWQgMH1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSx3LmdldFNXPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuaG4/UHJvbWlzZS5yZXNvbHZlKHRoaXMuaG4pOnRoaXMucm4ucHJvbWlzZX0sdy5tZXNzYWdlU1c9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBhKHRoaXMuZ2V0U1coKSwoZnVuY3Rpb24ocil7cmV0dXJuIG4ocix0KX0pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSx3Lm1lc3NhZ2VTa2lwV2FpdGluZz1mdW5jdGlvbigpe3RoaXMuZm4mJnRoaXMuZm4ud2FpdGluZyYmbih0aGlzLmZuLndhaXRpbmcsZil9LHcucG49ZnVuY3Rpb24oKXt2YXIgbj1uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyO3JldHVybiBuJiZvKG4uc2NyaXB0VVJMLHRoaXMuc24udG9TdHJpbmcoKSk/bjp2b2lkIDB9LHcuYm49ZnVuY3Rpb24oKXt0cnl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24obix0KXt0cnl7dmFyIHI9bigpfWNhdGNoKG4pe3JldHVybiB0KG4pfWlmKHImJnIudGhlbilyZXR1cm4gci50aGVuKHZvaWQgMCx0KTtyZXR1cm4gcn0oKGZ1bmN0aW9uKCl7cmV0dXJuIGEobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIobi5zbixuLm5uKSwoZnVuY3Rpb24odCl7cmV0dXJuIG4udW49cGVyZm9ybWFuY2Uubm93KCksdH0pKX0pLChmdW5jdGlvbihuKXt0aHJvdyBufSkpfWNhdGNoKG4pe3JldHVybiBQcm9taXNlLnJlamVjdChuKX19LGg9diwobD1be2tleTpcImFjdGl2ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVuLnByb21pc2V9fSx7a2V5OlwiY29udHJvbGxpbmdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbi5wcm9taXNlfX1dKSYmdChoLnByb3RvdHlwZSxsKSxtJiZ0KGgsbSksdn0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dGhpcy5Qbj1uZXcgTWFwfXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLlNuKG4pLmFkZCh0KX0sdC5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKG4sdCl7dGhpcy5TbihuKS5kZWxldGUodCl9LHQuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihuKXtuLnRhcmdldD10aGlzO2Zvcih2YXIgdCxyPWUodGhpcy5TbihuLnR5cGUpKTshKHQ9cigpKS5kb25lOyl7KDAsdC52YWx1ZSkobil9fSx0LlNuPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLlBuLmhhcyhuKXx8dGhpcy5Qbi5zZXQobixuZXcgU2V0KSx0aGlzLlBuLmdldChuKX0sbn0oKSk7ZXhwb3J0e3YgYXMgV29ya2JveCx1IGFzIFdvcmtib3hFdmVudCxuIGFzIG1lc3NhZ2VTV307XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMubWFwXG4iLCIvLyBNYWluIEVudHJ5IGZvciB0aGUgQ3VyaW91cyBSZWFkZXIgV2ViIFBsYXllciBBcHBcclxuaW1wb3J0IHsgQ29udGVudFBhcnNlciB9IGZyb20gXCIuL1BhcnNlci9Db250ZW50UGFyc2VyXCI7XHJcbmltcG9ydCB7IFBsYXlCYWNrRW5naW5lIH0gZnJvbSBcIi4vUGxheUJhY2tFbmdpbmUvUGxheUJhY2tFbmdpbmVcIjtcclxuaW1wb3J0IHsgV29ya2JveCwgV29ya2JveEV2ZW50TWFwIH0gZnJvbSBcIndvcmtib3gtd2luZG93XCI7XHJcbmltcG9ydCB7IEJvb2sgfSBmcm9tIFwiLi9Nb2RlbHMvTW9kZWxzXCI7XHJcblxyXG4gZXhwb3J0IGNsYXNzIEFwcCB7XHJcblxyXG4gICAgY29udGVudFBhcnNlcjogQ29udGVudFBhcnNlcjtcclxuICAgIHBsYXlCYWNrRW5naW5lOiBQbGF5QmFja0VuZ2luZTtcclxuICAgIFxyXG4gICAgY29udGVudEZpbGVQYXRoOiBzdHJpbmc7XHJcbiAgICBpbWFnZXNQYXRoOiBzdHJpbmc7XHJcbiAgICBhdWRpb1BhdGg6IHN0cmluZztcclxuICAgIGJvb2tOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgYnJvYWRjYXN0Q2hhbm5lbDogQnJvYWRjYXN0Q2hhbm5lbDtcclxuXHJcbiAgICBjYWNoZWRMYW5ndWFnZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gfCBudWxsID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuICAgIGxhbmc6IHN0cmluZyA9IFwiZW5nbGlzaFwiO1xyXG4gICAgaXNDYWNoZWQ6IHN0cmluZyA9IFwiaXNfY2FjaGVkXCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYm9va05hbWU6IHN0cmluZywgY29udGVudEZpbGVQYXRoOiBzdHJpbmcsIGltYWdlc1BhdGg6IHN0cmluZywgYXVkaW9QYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmJvb2tOYW1lID0gYm9va05hbWU7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RmlsZVBhdGggPSBjb250ZW50RmlsZVBhdGg7XHJcbiAgICAgICAgdGhpcy5pbWFnZXNQYXRoID0gaW1hZ2VzUGF0aDtcclxuICAgICAgICB0aGlzLmF1ZGlvUGF0aCA9IGF1ZGlvUGF0aDtcclxuICAgICAgICB0aGlzLmNvbnRlbnRQYXJzZXIgPSBuZXcgQ29udGVudFBhcnNlcihjb250ZW50RmlsZVBhdGgpO1xyXG4gICAgICAgIHRoaXMucGxheUJhY2tFbmdpbmUgPSBuZXcgUGxheUJhY2tFbmdpbmUoaW1hZ2VzUGF0aCwgYXVkaW9QYXRoKTtcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbChcImNyLW1lc3NhZ2UtY2hhbm5lbFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuaXNDYWNoZWQpID09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5jYWNoZWRMYW5ndWFnZXMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGNhY2hlZExhbmd1YWdlU3RyaW5nOiBzdHJpbmcgfCBudWxsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5pc0NhY2hlZCkhO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNhY2hlZExhbmd1YWdlcyA9IG5ldyBNYXAoSlNPTi5wYXJzZShjYWNoZWRMYW5ndWFnZVN0cmluZykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBpbml0aWFsaXplKCkge1xyXG4gICAgICAgIGxldCBib29rOiBCb29rID0gYXdhaXQgdGhpcy5jb250ZW50UGFyc2VyLnBhcnNlQm9vaygpO1xyXG4gICAgICAgIGJvb2suYm9va05hbWUgPSB0aGlzLmJvb2tOYW1lO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIkRldiBBcHAgaW5pdGlhbGl6ZWQhXCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGJvb2spO1xyXG5cclxuICAgICAgICB0aGlzLmVuZm9yY2VMYW5kc2NhcGVNb2RlKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJBZGRpbmcgYSBsb2FkIGV2ZW50IGxpc3RlbmVyIVwiKTtcclxuICAgICAgICBcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlZ2lzdGVyU2VydmljZVdvcmtlcihib29rKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5wbGF5QmFja0VuZ2luZS5pbml0aWFsaXplQm9vayhib29rKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZWdpc3RlclNlcnZpY2VXb3JrZXIoYm9vazogQm9vayk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVnaXN0ZXJpbmcgU2VydmljZSBXb3JrZXIhXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgbGV0IHdiID0gbmV3IFdvcmtib3goXCIvc3cuanNcIiwge30pO1xyXG4gICAgICAgICAgICB3Yi5yZWdpc3RlcigpXHJcbiAgICAgICAgICAgICAgICAudGhlbigocikgPT4geyB0aGlzLmhhbmRsZVNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24ocikgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4geyBjb25zb2xlLmVycm9yKGUpIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNSYXBwOiBNZXNzYWdlIFJlY2VpdmVkIVwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmRhdGEuY29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGF0YS5jb21tYW5kID09IFwiQWN0aXZhdGVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kOiBcIkNhY2hlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmc6IHRoaXMubGFuZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2tEYXRhOiBib29rLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEZpbGU6IHRoaXMuY29udGVudEZpbGVQYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07ICBcclxuXHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNlcnZpY2UgV29ya2VyIG5vdCBzdXBwb3J0ZWQhXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVTZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uKHJlZ2lzdHJhdGlvbjogU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvbj8uaW5zdGFsbGluZz8ucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJSZWdpc3RhcnRpb25cIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmxhbmdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNSYXBwOiBTZXJ2aWNlIFdvcmtlciBSZWdpc3RyYXRpb24gRmFpbGVkIVwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlKGV2ZW50OiBNZXNzYWdlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZXZlbnQuZGF0YS5tc2cgPT0gXCJSZWNhY2hlXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDUmFwcDogUmVjYWNoZSBNZXNzYWdlIFJlY2VpdmVkIVwiKTtcclxuICAgICAgICAgICAgLy8gaGFuZGxlVmVyc2lvblVwZGF0ZShldmVudC5kYXRhKTtcclxuICAgICAgICB9ZWxzZSBpZiAoZXZlbnQuZGF0YS5tc2cgPT0gXCJMb2FkaW5nXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDUmFwcDogTG9hZGluZyBNZXNzYWdlIFJlY2VpdmVkIVwiKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZUxvYWRpbmdNZXNzYWdlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH1lbHNlIGlmIChldmVudC5kYXRhLm1zZyA9PSBcIlVwZGF0ZSBGb3VuZFwiKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JhcHA6IFVwZGF0ZSBGb3VuZCBNZXNzYWdlIFJlY2VpdmVkIVwiKTtcclxuICAgICAgICAgICAgLy8gaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlYWRMYW5ndWFnZURhdGFGcm9tQ2FjaGVBbmROb3RpZnlBbmRyb2lkQXBwKCkge1xyXG4gICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmICh3aW5kb3cuQW5kcm9pZCkge1xyXG4gICAgICAgICAgICAvLyBsZXQgaXNDb250ZW50Q2FjaGVkOiBib29sZWFuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5pc0NhY2hlZCkhID09PSBcInRydWVcIjtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHdpbmRvdy5BbmRyb2lkLmNhY2hlZFN0YXR1cyh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZW5mb3JjZUxhbmRzY2FwZU1vZGUoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24ubG9jaykge1xyXG4gICAgICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLmxvY2soXCJsYW5kc2NhcGVcIikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTY3JlZW4gb3JpZW50YXRpb24gbG9ja2VkIHRvIGxhbmRzY2FwZSFcIik7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNjcmVlbiBvcmllbnRhdGlvbiBsb2NrIGZhaWxlZCEgSW50ZXJmYWNlIG1heSBub3Qgd29yayBhcyBleHBlY3RlZCBvbiBtb2JpbGUgZGV2aWNlcyFcIik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcmVlbiBvcmllbnRhdGlvbiBsb2NrIG5vdCBzdXBwb3J0ZWQhIEludGVyZmFjZSBtYXkgbm90IHdvcmsgYXMgZXhwZWN0ZWQgb24gbW9iaWxlIGRldmljZXMhXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiB9XHJcblxyXG4gLy8gUGFzc2luZyBhYnNvbHV0ZSBwYXRoIHRvIHRoZSBjb250ZW50IGZpbGUgYW5kIHJlc291cmNlIGRpcmVjdG9yaWVzXHJcbiAvLyBDdXJpb3VzIFJlYWRlciBCb29rOiBMZXQncyBGbHkgTGV2ZWwgMlxyXG5sZXQgYXBwOiBBcHAgPSBuZXcgQXBwKFwiTGV0c0ZseUxldmVsMkVuXCIsIFwiL0Jvb2tDb250ZW50L0xldHNGbHlMZXZlbDJFbi9jb250ZW50L2NvbnRlbnQuanNvblwiLFxyXG4gICAgXCIvQm9va0NvbnRlbnQvTGV0c0ZseUxldmVsMkVuL2NvbnRlbnQvaW1hZ2VzL1wiLFxyXG4gICAgXCIvQm9va0NvbnRlbnQvTGV0c0ZseUxldmVsMkVuL2NvbnRlbnQvYXVkaW9zL1wiKTtcclxuXHJcbi8vIEdETCBCb29rOiBUYWxraW5nIEJhZyBFbmdsaXNoXHJcbi8vIGxldCBhcHA6IEFwcCA9IG5ldyBBcHAoXCIvQm9va0NvbnRlbnQvVGFsa2luZ0JhZ0VuL2NvbnRlbnQvY29udGVudC5qc29uXCIsXHJcbiAgICAvLyBcIi9Cb29rQ29udGVudC9UYWxraW5nQmFnRW4vY29udGVudC9pbWFnZXMvXCIsXHJcbiAgICAvLyBcIi9Cb29rQ29udGVudC9UYWxraW5nQmFnRW4vY29udGVudC9hdWRpby9cIik7XHJcblxyXG4vLyBJbml0aWFsaXplIHRoZSBhcHAsIGJlZ2lubmluZyB0byByZWFkIHRoZSBjb250ZW50IGZpbGUsIHBhcnNpbmcgIGFuZCBkaXNwbGF5aW5nIHRoZSBib29rXHJcbihhc3luYyAoKSA9PiB7XHJcbiAgICBhd2FpdCBhcHAuaW5pdGlhbGl6ZSgpO1xyXG59KSgpOyJdLCJuYW1lcyI6WyJCb29rVHlwZSIsIkNvbnRlbnRQYXJzZXIiLCJjb25zdHJ1Y3RvciIsImNvbnRlbnRGaWxlUGF0aCIsImVtcHR5R2xvd0ltYWdlVGFnIiwidGhpcyIsImFzeW5jIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXJzZUNvbnRlbnRKU09ORmlsZSIsInRoZW4iLCJjb250ZW50SlNPTiIsImNvbnNvbGUiLCJsb2ciLCJib29rIiwiYm9va05hbWUiLCJwYWdlcyIsImJvb2tUeXBlIiwiZGV0ZXJtaW5lQm9va1R5cGUiLCJwYXJzZVBhZ2VzIiwiY2F0Y2giLCJlcnJvciIsInVuZGVmaW5lZCIsIkN1cmlvdXNSZWFkZXIiLCJHREwiLCJVbmtub3duIiwicGFnZXNKU09OIiwiZ2xvYmFsRmlsbENvbG9yIiwiaSIsImxlbmd0aCIsInBhZ2VKU09OIiwicGFnZSIsInZpc3VhbEVsZW1lbnRzIiwiYmFja2dyb3VuZENvbG9yIiwicGFyc2VQYWdlQ1IiLCJwdXNoIiwicGFyc2VQYWdlR0RMIiwiZWxlbWVudHNKU09OIiwibGlicmFyeVN0cmluZyIsImluY2x1ZGVzIiwidGV4dEVsZW1lbnQiLCJwYXJzZVRleHRFbGVtZW50Q1IiLCJpbWFnZUVsZW1lbnQiLCJwYXJzZUltYWdlRWxlbWVudENSIiwiYXVkaW9FbGVtZW50IiwicGFyc2VBdWRpb0VsZW1lbnRDUiIsImVsZW1lbnRzSlNPTkFycmF5IiwicGFyc2VUZXh0RWxlbWVudEdETCIsInBhcnNlSW1hZ2VFbGVtZW50R0RMIiwiZWxlbWVudEpTT04iLCJ0eXBlIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwid2lkdGgiLCJoZWlnaHQiLCJ0ZXh0Q29udGVudEFzSFRNTCIsIk5hTiIsInBhdGgiLCJkb21JRCIsImltYWdlU291cmNlIiwiYXVkaW9UaW1lc3RhbXBzIiwidGltZXN0YW1wcyIsInRpbWVzdGFtcHNKU09OQXJyYXkiLCJ0aW1lc3RhbXBJbmRleCIsInRpbWVzdGFtcEpTT04iLCJ0aW1lc3RhbXAiLCJ0b1N0cmluZyIsIndvcmQiLCJzdGFydFRpbWVzdGFtcCIsImVuZFRpbWVzdGFtcCIsImF1ZGlvU3JjIiwiZ2xvd0NvbG9yIiwic3R5bGVzIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwic3RhdHVzIiwicmVzcG9uc2UiLCJzZW5kIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIk1FRElBX1BSRUZFUlNfUkVEVUNFRF9NT1RJT04iLCJlbXB0eSIsImFycmF5Iiwic2xpY2UiLCJhcnJheUxpa2UiLCJzdGFydCIsImVuZCIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsImFwcGx5IiwiZnVuYyIsImJpbmQiLCJjb25jYXQiLCJhcmd1bWVudHMiLCJuZXh0VGljayIsInNldFRpbWVvdXQiLCJub29wIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidHlwZU9mIiwic3ViamVjdCIsImlzT2JqZWN0IiwiaXNOdWxsIiwiaXNBcnJheSIsImlzRnVuY3Rpb24iLCJpc1N0cmluZyIsImlzVW5kZWZpbmVkIiwiaXNIVE1MRWxlbWVudCIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsIndpbmRvdyIsIkhUTUxFbGVtZW50IiwiZSIsInRvQXJyYXkiLCJ2YWx1ZSIsImZvckVhY2giLCJ2YWx1ZXMiLCJpdGVyYXRlZSIsImluZGV4T2YiLCJpdGVtcyIsInRvZ2dsZUNsYXNzIiwiZWxtIiwiY2xhc3NlcyIsImFkZCIsIm5hbWUiLCJjbGFzc0xpc3QiLCJhZGRDbGFzcyIsInNwbGl0IiwiYXBwZW5kIiwicGFyZW50IiwiY2hpbGRyZW4iLCJhcHBlbmRDaGlsZCIsImJlZm9yZSIsIm5vZGVzIiwicmVmIiwibm9kZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJtYXRjaGVzIiwic2VsZWN0b3IiLCJjaGlsZHJlbjIiLCJmaWx0ZXIiLCJjaGlsZCIsImZpcnN0RWxlbWVudENoaWxkIiwib3duS2V5cyIsImtleXMiLCJmb3JPd24iLCJvYmplY3QiLCJyaWdodCIsInJldmVyc2UiLCJzb3VyY2UiLCJtZXJnZSIsIm9taXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlbG1zIiwiYXR0cnMiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwidmFsdWUyIiwiU3RyaW5nIiwiY3JlYXRlIiwidGFnIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJwcm9wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImRpc3BsYXkiLCJkaXNwbGF5MiIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsImdldEF0dHJpYnV0ZSIsImhhc0NsYXNzIiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVtb3ZlIiwicmVtb3ZlQ2hpbGQiLCJwYXJzZUh0bWwiLCJodG1sIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYm9keSIsInByZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInF1ZXJ5IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5QWxsIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZUNsYXNzIiwidGltZU9mIiwidGltZVN0YW1wIiwidW5pdCIsIlBST0pFQ1RfQ09ERSIsImFzc2VydCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJFcnJvciIsIm1pbiIsIk1hdGgiLCJtYXgiLCJmbG9vciIsImNlaWwiLCJhYnMiLCJhcHByb3hpbWF0ZWx5RXF1YWwiLCJ4IiwieSIsImVwc2lsb24iLCJiZXR3ZWVuIiwibnVtYmVyIiwiZXhjbHVzaXZlIiwibWluaW11bSIsIm1heGltdW0iLCJjbGFtcCIsInNpZ24iLCJmb3JtYXQiLCJzdHJpbmciLCJyZXBsYWNlbWVudHMiLCJyZXBsYWNlbWVudCIsInJlcGxhY2UiLCJwYWQiLCJpZHMiLCJFdmVudEJpbmRlciIsImxpc3RlbmVycyIsImZvckVhY2hFdmVudCIsInRhcmdldHMiLCJldmVudHMiLCJldmVudHMyIiwiZXZlbnROUyIsImZyYWdtZW50IiwiY2FsbGJhY2siLCJvcHRpb25zIiwiZXZlbnQiLCJuYW1lc3BhY2UiLCJpc0V2ZW50VGFyZ2V0IiwicmVtb3ZlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwidW5iaW5kIiwibGlzdGVuZXIiLCJkaXNwYXRjaCIsImRldGFpbCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImRlc3Ryb3kiLCJkYXRhIiwiRVZFTlRfTU9VTlRFRCIsIkVWRU5UX1JFQURZIiwiRVZFTlRfTU9WRSIsIkVWRU5UX01PVkVEIiwiRVZFTlRfQ0xJQ0siLCJFVkVOVF9SRUZSRVNIIiwiRVZFTlRfVVBEQVRFRCIsIkVWRU5UX1JFU0laRSIsIkVWRU5UX1JFU0laRUQiLCJFVkVOVF9TQ1JPTEwiLCJFVkVOVF9TQ1JPTExFRCIsIkVWRU5UX0RFU1RST1kiLCJFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQiLCJFVkVOVF9BVVRPUExBWV9QTEFZIiwiRVZFTlRfQVVUT1BMQVlfUEFVU0UiLCJFVkVOVF9MQVpZTE9BRF9MT0FERUQiLCJFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRCIsIkV2ZW50SW50ZXJmYWNlIiwiU3BsaWRlMiIsImJ1cyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJiaW5kZXIiLCJvbiIsImpvaW4iLCJvZmYiLCJlbWl0IiwiUmVxdWVzdEludGVydmFsIiwiaW50ZXJ2YWwiLCJvbkludGVydmFsIiwib25VcGRhdGUiLCJsaW1pdCIsInN0YXJ0VGltZSIsImlkIiwibm93IiwiRGF0ZSIsInJhdGUiLCJwYXVzZWQiLCJjb3VudCIsInVwZGF0ZSIsInBhdXNlIiwiY2FuY2VsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXN1bWUiLCJyZXdpbmQiLCJzZXQiLCJ0aW1lIiwiaXNQYXVzZWQiLCJBUlJPV19MRUZUIiwiQVJST1ciLCJBUlJPV19SSUdIVCIsIkFSUk9XX1VQIiwiQVJST1dfRE9XTiIsIlRUQiIsIk9SSUVOVEFUSU9OX01BUCIsImxlZnQiLCJYIiwiWSIsIkFycm93TGVmdCIsIkFycm93UmlnaHQiLCJST0xFIiwiVEFCX0lOREVYIiwiQVJJQV9DT05UUk9MUyIsIkFSSUFfUFJFRklYIiwiQVJJQV9DVVJSRU5UIiwiQVJJQV9TRUxFQ1RFRCIsIkFSSUFfTEFCRUwiLCJBUklBX0xBQkVMTEVEQlkiLCJBUklBX0hJRERFTiIsIkFSSUFfT1JJRU5UQVRJT04iLCJBUklBX1JPTEVERVNDUklQVElPTiIsIkFSSUFfTElWRSIsIkFSSUFfQlVTWSIsIkFSSUFfQVRPTUlDIiwiQUxMX0FUVFJJQlVURVMiLCJDTEFTU19ST09UIiwiQ0xBU1NfVFJBQ0siLCJDTEFTU19QUkVGSVgiLCJDTEFTU19TTElERSIsIkNMQVNTX0NMT05FIiwiQ0xBU1NfQVJST1dTIiwiQ0xBU1NfQVJST1ciLCJDTEFTU19BUlJPV19QUkVWIiwiQ0xBU1NfQVJST1dfTkVYVCIsIkNMQVNTX1BBR0lOQVRJT04iLCJDTEFTU19BQ1RJVkUiLCJTVEFUVVNfQ0xBU1NfUFJFRklYIiwiQ0xBU1NfUFJFViIsIkNMQVNTX05FWFQiLCJDTEFTU19WSVNJQkxFIiwiQ0xBU1NfTE9BRElORyIsIkNMQVNTX0ZPQ1VTX0lOIiwiQ0xBU1NfT1ZFUkZMT1ciLCJTVEFUVVNfQ0xBU1NFUyIsIkNMQVNTRVMiLCJzbGlkZSIsImNsb25lIiwiYXJyb3dzIiwiYXJyb3ciLCJwcmV2IiwibmV4dCIsInBhZ2luYXRpb24iLCJzcGlubmVyIiwiUE9JTlRFUl9NT1ZFX0VWRU5UUyIsIlBPSU5URVJfVVBfRVZFTlRTIiwiU0xJREUiLCJMT09QIiwiRkFERSIsIlNDUk9MTF9MSVNURU5FUl9PUFRJT05TIiwicGFzc2l2ZSIsImNhcHR1cmUiLCJOT1JNQUxJWkFUSU9OX01BUCIsIlNwYWNlYmFyIiwiUmlnaHQiLCJMZWZ0IiwiVXAiLCJEb3duIiwibm9ybWFsaXplS2V5IiwiS0VZQk9BUkRfRVZFTlQiLCJTUkNfREFUQV9BVFRSSUJVVEUiLCJEQVRBX0FUVFJJQlVURSIsIlNSQ1NFVF9EQVRBX0FUVFJJQlVURSIsIlRSSUdHRVJfS0VZUyIsIkNvbXBvbmVudENvbnN0cnVjdG9ycyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIk1lZGlhIiwiQ29tcG9uZW50czIiLCJzdGF0ZSIsImJyZWFrcG9pbnRzIiwicmVkdWNlZE1vdGlvbiIsInF1ZXJpZXMiLCJjb21wbGV0ZWx5IiwicmVnaXN0ZXIiLCJvcHRpb25zMiIsInF1ZXJ5TGlzdCIsIm1hdGNoTWVkaWEiLCJkZXN0cm95ZWQiLCJpcyIsImRpcmVjdGlvbiIsIm1lcmdlZCIsInJlZHVjZSIsIm1lcmdlZDIiLCJlbnRyeSIsIm1vdW50IiwicmVmcmVzaCIsIm9wdHMiLCJiYXNlIiwibm90aWZ5IiwiZ2V0UHJvdG90eXBlT2YiLCJzZXR1cCIsImlzTWluIiwibWVkaWFRdWVyeSIsInNvcnQiLCJuIiwibSIsImVuYWJsZSIsIkRpcmVjdGlvbiIsImF4aXNPbmx5IiwiaW5kZXgiLCJtYXRjaCIsIm9mZnNldCIsInRvTG93ZXJDYXNlIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJvcmllbnQiLCJFbGVtZW50cyIsInRyYWNrIiwibGlzdCIsImlzVXNpbmdLZXkiLCJfRXZlbnRJbnRlcmZhY2UiLCJyb290IiwiaTE4biIsImVsZW1lbnRzIiwic2xpZGVzIiwicm9vdENsYXNzZXMiLCJ0cmFja0NsYXNzZXMiLCJwcmVmaXgiLCJyb2xlIiwiZmluZCIsImJhciIsIkNMQVNTX1BST0dSRVNTIiwidG9nZ2xlIiwidGFnTmFtZSIsImNhcm91c2VsIiwiZ2V0Q2xhc3NlcyIsImxhYmVsIiwibGFiZWxsZWRieSIsImZyb20iLCJjbG9zZXN0Iiwibm9kZVR5cGUiLCJwYXJlbnRFbGVtZW50IiwiZHJhZyIsImlzTmF2aWdhdGlvbiIsIlBPSU5URVJfRE9XTl9FVkVOVFMiLCJTbGlkZXMiLCJfRXZlbnRJbnRlcmZhY2UyIiwiX0NvbXBvbmVudHMyJEVsZW1lbnRzIiwiU2xpZGVzMiIsImluaXQiLCJmb3JFYWNoJDEiLCJTbGlkZTIiLCJzbGlkZUluZGV4IiwiQ29tcG9uZW50cyIsInVwZGF0ZU9uTW92ZSIsInNsaWRlRm9jdXMiLCJpc0Nsb25lIiwiY29udGFpbmVyIiwiaW5pdE5hdmlnYXRpb24iLCJjb250cm9scyIsInNwbGlkZXMiLCJtYXAiLCJzcGxpZGUiLCJnZXRBdCIsInNsaWRlWCIsIm9uTW92ZSIsImN1cnIiLCJhY3RpdmUiLCJpc0FjdGl2ZSIsInNlbGYiLCJ2aXNpYmxlIiwidHJhY2tSZWN0Iiwic2xpZGVSZWN0IiwiaXNWaXNpYmxlIiwiaGlkZGVuIiwiZm9jdXNhYmxlTm9kZXMiLCJhY3RpdmVFbGVtZW50IiwidXBkYXRlVmlzaWJpbGl0eSIsImNsb25lU3RhdHVzIiwic2xpZGVMYWJlbCIsInVzZUNvbnRhaW5lciIsImlzV2l0aGluIiwiZGlzdGFuY2UiLCJkaWZmIiwiU2xpZGUkMSIsIlNsaWRlMSIsImdldCIsImV4Y2x1ZGVDbG9uZXMiLCJtYXRjaGVyIiwiZ2V0SW4iLCJDb250cm9sbGVyIiwidG9JbmRleCIsImhhc0ZvY3VzIiwicGVyUGFnZSIsImltYWdlcyIsImltZyIsImdldExlbmd0aCIsImlzRW5vdWdoIiwiTGF5b3V0IiwidmVydGljYWwiLCJyb290UmVjdCIsIm92ZXJmbG93IiwiX0V2ZW50SW50ZXJmYWNlMyIsIl9Db21wb25lbnRzMiRFbGVtZW50czIiLCJzdHlsZVNsaWRlcyIsImNzc1BhZGRpbmciLCJyZXNpemUiLCJmb3JjZSIsIm5ld1JlY3QiLCJjc3NIZWlnaHQiLCJnYXAiLCJhdXRvV2lkdGgiLCJmaXhlZFdpZHRoIiwiY3NzU2xpZGVTaXplIiwiZml4ZWRIZWlnaHQiLCJhdXRvSGVpZ2h0IiwiaXNPdmVyZmxvdyIsInBhZGRpbmciLCJoZWlnaHRSYXRpbyIsImxpc3RTaXplIiwic2xpZGVTaXplIiwid2l0aG91dEdhcCIsIlNsaWRlIiwiZ2V0R2FwIiwidG90YWxTaXplIiwic2xpZGVyU2l6ZSIsInBhcnNlRmxvYXQiLCJnZXRQYWRkaW5nIiwiQ2xvbmVzIiwiY2xvbmVDb3VudCIsImNsb25lcyIsInJlbW91bnQiLCJvYnNlcnZlIiwiY29tcHV0ZUNsb25lQ291bnQiLCJpc0hlYWQiLCJjbG9uZU5vZGUiLCJjbG9uZURlZXAiLCJnZW5lcmF0ZSIsImNsb25lczIiLCJmaXhlZFNpemUiLCJNb3ZlIiwiVHJhbnNpdGlvbiIsIl9FdmVudEludGVyZmFjZTQiLCJfQ29tcG9uZW50czIkTGF5b3V0IiwiX0NvbXBvbmVudHMyJERpcmVjdGlvIiwiX0NvbXBvbmVudHMyJEVsZW1lbnRzMyIsInJlcG9zaXRpb24iLCJpc0J1c3kiLCJTY3JvbGwiLCJqdW1wIiwidHJhbnNsYXRlIiwidG9Qb3NpdGlvbiIsInBvc2l0aW9uIiwicHJldmVudExvb3AiLCJkZXN0aW5hdGlvbiIsImV4Y2VlZGVkTWF4IiwiZ2V0RW5kIiwic2hpZnQiLCJsb29wIiwiYmFja3dhcmRzIiwiZXhjZXNzIiwiZ2V0TGltaXQiLCJzaXplIiwiZ2V0UG9zaXRpb24iLCJtaW5EaXN0YW5jZSIsIkluZmluaXR5IiwidHJpbW1pbmciLCJ0cmltU3BhY2UiLCJ0cmltIiwibW92ZSIsImRlc3QiLCJzaGlmdGVkIiwiZXhjZWVkZWRMaW1pdCIsImV4Y2VlZGVkTWluIiwiZW5kSW5kZXgiLCJzbGlkZUNvdW50IiwicGVyTW92ZSIsIl9FdmVudEludGVyZmFjZTUiLCJfQ29tcG9uZW50czIkU2xpZGVzIiwib21pdEVuZCIsImlzTG9vcCIsImlzU2xpZGUiLCJnZXROZXh0IiwiZ2V0QWRqYWNlbnQiLCJnZXRQcmV2IiwiY3VyckluZGV4IiwicHJldkluZGV4Iiwib25SZXNpemVkIiwiY29tcHV0ZURlc3RJbmRleCIsInNuYXBQYWdlIiwiY29tcHV0ZU1vdmFibGVEZXN0SW5kZXgiLCJ0b1BhZ2UiLCJzZXRJbmRleCIsIndhaXRGb3JUcmFuc2l0aW9uIiwiZ28iLCJjb250cm9sIiwiYWxsb3dTYW1lSW5kZXgiLCJfcmVmIiwiaW5kaWNhdG9yIiwicGFyc2UiLCJzY3JvbGwiLCJkdXJhdGlvbiIsInNuYXAiLCJnZXRJbmRleCIsInRvRGVzdCIsIkFycm93cyIsImNyZWF0ZWQiLCJ3cmFwcGVyQ2xhc3NlcyIsInBsYWNlaG9sZGVyIiwid3JhcHBlciIsImVuYWJsZWQiLCJjcmVhdGVBcnJvdyIsInByZXYyIiwiYXJyb3dQYXRoIiwibmV4dEluZGV4IiwicHJldkxhYmVsIiwibGFzdCIsIm5leHRMYWJlbCIsImZpcnN0IiwiZGlzYWJsZWQiLCJBdXRvcGxheSIsImhvdmVyZWQiLCJmb2N1c2VkIiwiX0V2ZW50SW50ZXJmYWNlNiIsIl9Db21wb25lbnRzMiRFbGVtZW50czQiLCJhdXRvcGxheSIsInN0b3BwZWQiLCJwbGF5IiwicmVzZXRQcm9ncmVzcyIsInN0b3AiLCJhdXRvVG9nZ2xlIiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwiQ292ZXIiLCJjb3ZlciIsImNvdmVyMiIsInNyYyIsIl9FdmVudEludGVyZmFjZTgiLCJmcmljdGlvbiIsIm9uU2Nyb2xsZWQiLCJub0NvbnN0cmFpbiIsImNsZWFyIiwibm9EaXN0YW5jZSIsIm9uRW5kIiwidG8iLCJ0IiwiZWFzaW5nRnVuYyIsInBvdyIsImVhc2luZyIsIkRyYWciLCJiYXNlUG9zaXRpb24iLCJiYXNlRXZlbnQiLCJwcmV2QmFzZUV2ZW50IiwiaXNGcmVlIiwiZHJhZ2dpbmciLCJjbGlja1ByZXZlbnRlZCIsIl9FdmVudEludGVyZmFjZTkiLCJfQ29tcG9uZW50czIkRGlyZWN0aW8yIiwiZXhjZWVkZWQiLCJkaXNhYmxlIiwib25Qb2ludGVyRG93biIsImlzVG91Y2giLCJpc1RvdWNoRXZlbnQiLCJ0YXJnZXQyIiwibm9EcmFnIiwiYnV0dG9uIiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlclVwIiwic2F2ZSIsImNhbmNlbGFibGUiLCJkaWZmQ29vcmQiLCJleHBpcmVkIiwiZGlmZlRpbWUiLCJoYXNFeGNlZWRlZCIsImlzU2xpZGVyRGlyZWN0aW9uIiwidGhyZXNob2xkcyIsImRyYWdNaW5UaHJlc2hvbGQiLCJpc09iaiIsIm1vdXNlIiwidG91Y2giLCJzaG91bGRTdGFydCIsInZlbG9jaXR5IiwiY29tcHV0ZVZlbG9jaXR5IiwiZmxpY2tQb3dlciIsImZsaWNrTWF4UGFnZXMiLCJjb21wdXRlRGVzdGluYXRpb24iLCJyZXdpbmRCeURyYWciLCJvbkNsaWNrIiwib3J0aG9nb25hbCIsImNvb3JkT2YiLCJnZXRCYXNlRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsIlRvdWNoRXZlbnQiLCJpc0RyYWdnaW5nIiwiS2V5Ym9hcmQiLCJfRXZlbnRJbnRlcmZhY2UxMCIsImtleWJvYXJkIiwib25LZXlkb3duIiwiX2Rpc2FibGVkIiwiTGF6eUxvYWQiLCJfRXZlbnRJbnRlcmZhY2UxMSIsImlzU2VxdWVudGlhbCIsImxhenlMb2FkIiwiZW50cmllcyIsInNyY3NldCIsImxvYWROZXh0IiwiY2hlY2siLCJwcmVsb2FkUGFnZXMiLCJsb2FkIiwib25Mb2FkIiwiUGFnaW5hdGlvbiIsInBhZ2luYXRpb25DbGFzc2VzIiwiZGlyIiwiZ2V0RGlyZWN0aW9uIiwibmV4dFBhZ2UiLCJpdGVtIiwicGFnaW5hdGlvbkRpcmVjdGlvbiIsIl9idXR0b24iLCJzZWxlY3QiLCJsaSIsImNsYXNzIiwidGV4dCIsInBhZ2VYIiwicGFnaW5hdGlvbktleWJvYXJkIiwiY3JlYXRlUGFnaW5hdGlvbiIsIlN5bmMiLCJpc1BhcmVudCIsInN5bmMiLCJXaGVlbCIsImxhc3RUaW1lIiwib25XaGVlbCIsImRlbHRhWSIsIl9taW4iLCJ3aGVlbE1pblRocmVzaG9sZCIsInNsZWVwIiwid2hlZWxTbGVlcCIsInJlbGVhc2VXaGVlbCIsInNob3VsZFByZXZlbnQiLCJ3aGVlbCIsIkxpdmUiLCJsaXZlIiwic3IiLCJ0ZXh0Q29udGVudCIsIkRFRkFVTFRTIiwic3BlZWQiLCJyZXdpbmRTcGVlZCIsIkZhZGUiLCJkb25lIiwiZW5kQ2FsbGJhY2siLCJ0cmFuc2l0aW9uIiwiZ2V0U3BlZWQiLCJ1c2VTY3JvbGwiLCJTcGxpZGUiLCJfU3BsaWRlIiwic3RhdGVzIiwiX28iLCJfRSIsImRlZmF1bHRzIiwiSlNPTiIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsIl9wcm90byIsIkV4dGVuc2lvbnMiLCJfdGhpcyIsIl9DIiwiX1QiLCJDb21wb25lbnQiLCJjb21wb25lbnQiLCJfdGhpcyRldmVudCIsIlNUQVRFUyIsIkNSRUFURUQiLCJNT1VOVEVEIiwiSURMRSIsIk1PVklORyIsIlNDUk9MTElORyIsIkRSQUdHSU5HIiwiREVTVFJPWUVEIiwiUGxheUJhY2tFbmdpbmUiLCJpbWFnZXNQYXRoIiwiYXVkaW9QYXRoIiwiY3VycmVudFBhZ2UiLCJzcGxpZGVIYW5kbGUiLCJpbm5lckhlaWdodCIsIm5ld0luZGV4Iiwib2xkSW5kZXgiLCJkZXN0SW5kZXgiLCJ0cmFuc2l0aW9uaW5nVG9QYWdlIiwic3RvcFBhZ2VBdWRpbyIsImN1cnJlbnRJbmRleCIsInBsYXlQYWdlQXVkaW8iLCJhZGRQYWdlUmVzaXplTGlzdGVuZXIiLCJ2aXN1YWxFbGVtZW50IiwiYXVkaW9FbGVtZW50RG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJjdXJyZW50VGltZSIsImNsZWFySW50ZXJ2YWwiLCJjdXJyZW50UGFnZUF1dG9QbGF5ZXJJbnRlcnZhbCIsImoiLCJsYXN0V29yZEluZGV4Iiwic2V0SW50ZXJ2YWwiLCJ3b3JkRWxlbWVudCIsImNvbG9yIiwiaW5pdGlhbGl6ZUJvb2siLCJjdXJyZW50Qm9va1R5cGUiLCJudW1iZXJPZlBhZ2VzIiwiaW5pdGlhbGl6ZUN1cmlvdXNSZWFkZXJCb29rIiwiaW5pdGlhbGl6ZUdETEJvb2siLCJzZW50ZW5jZUluaXRpYWxpemVkQnlBdWRpbyIsInBhZ2VJbmRleCIsImNyZWF0ZUltYWdlQ29udGFpbmVyIiwiYXVkaW9BbmRUZXh0RGl2cyIsImNyZWF0ZUF1ZGlvQW5kVGV4dENvbnRhaW5lcnMiLCJjcmVhdGVBdWRpb0NvbnRhaW5lciIsImNyZWF0ZVRleHRDb250YWluZXIiLCJ0ZXh0RWxlbWVudERpdiIsIndlYmtpdFRleHRTdHJva2UiLCJ0ZXh0U2hhZG93IiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsInRvcCIsImlubmVySFRNTCIsImltYWdlRWxlbWVudERpdiIsImhhbmRsZUdsb3dJbWFnZUNsaWNrIiwiaW1hZ2VFbGVtZW50SW1nIiwiYXVkaW9FbGVtZW50RGl2IiwicGFnZUF1ZGlvIiwid29yZFRpbWVzdGFtcEVsZW1lbnQiLCJ3b3JkQXVkaW9FbGVtZW50IiwiYXVkaW9BbmRUZXh0QXJyYXkiLCJzZW50ZW5jZUFycmF5VHJpbW1lZCIsImF1ZGlvQ29udGVudERPTUlkIiwic2VudGVuY2VQYXJhZ3JhcGgiLCJ0ZXh0QWxpZ24iLCJjbGlja2FibGVXb3JkRWxlbWVudCIsIm1hcmdpbiIsImlubmVyVGV4dCIsImV2IiwiaGFuZGxlSW50ZXJhY3RpdmVXb3JkQ2xpY2siLCJ3b3JkSW5kZXgiLCJ3b3JkSW5kZXhOdW1iZXIiLCJwYXJzZUludCIsImNvbm5lY3RlZEdsb3dJbWFnZUNsYXNzIiwiY29ubmVjdGVkR2xvd0ltYWdlcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJib3hTaGFkb3ciLCJmbGV4Q29udGFpbmVyIiwiZmxleERpcmVjdGlvbiIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImdvVG9OZXh0UGFnZSIsInRyYW5zaXRpb25Ub1BhZ2UiLCJnb1RvUHJldmlvdXNQYWdlIiwicGFnZU51bWJlciIsIl8iLCJyIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwicG9ydDIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInRlc3QiLCJUeXBlRXJyb3IiLCJwcm9taXNlIiwibyIsImxvY2F0aW9uIiwiaHJlZiIsIlVSTCIsInUiLCJhc3NpZ24iLCJhIiwiYyIsImYiLCJzIiwidiIsIm5uIiwidG4iLCJybiIsImVuIiwidW4iLCJhbiIsIlNldCIsImNuIiwiZm4iLCJpbnN0YWxsaW5nIiwic2NyaXB0VVJMIiwic24iLCJwZXJmb3JtYW5jZSIsInZuIiwiaG4iLCJsbiIsInN3IiwiaXNFeHRlcm5hbCIsIm9yaWdpbmFsRXZlbnQiLCJtbiIsImlzVXBkYXRlIiwid24iLCJ3YWl0aW5nIiwiY2xlYXJUaW1lb3V0IiwiZG4iLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwiY29udHJvbGxlciIsImduIiwicG9ydHMiLCJnZXRTVyIsImhhcyIsImwiLCJ3IiwiaW1tZWRpYXRlIiwicmVhZHlTdGF0ZSIsIkJvb2xlYW4iLCJ5biIsInBuIiwiYm4iLCJvbmNlIiwid2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyIiwibWVzc2FnZVNXIiwibWVzc2FnZVNraXBXYWl0aW5nIiwiUG4iLCJNYXAiLCJTbiIsImRlbGV0ZSIsImFwcCIsImNhY2hlZExhbmd1YWdlcyIsImxhbmciLCJpc0NhY2hlZCIsImNvbnRlbnRQYXJzZXIiLCJwbGF5QmFja0VuZ2luZSIsImJyb2FkY2FzdENoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInBhcnNlQm9vayIsImVuZm9yY2VMYW5kc2NhcGVNb2RlIiwicmVnaXN0ZXJTZXJ2aWNlV29ya2VyIiwiaGFuZGxlU2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsInJlYWR5IiwiY29tbWFuZCIsImJvb2tEYXRhIiwiY29udGVudEZpbGUiLCJoYW5kbGVTZXJ2aWNlV29ya2VyTWVzc2FnZSIsIndhcm4iLCJyZWdpc3RyYXRpb24iLCJtc2ciLCJyZWFkTGFuZ3VhZ2VEYXRhRnJvbUNhY2hlQW5kTm90aWZ5QW5kcm9pZEFwcCIsIkFuZHJvaWQiLCJjYWNoZWRTdGF0dXMiLCJzY3JlZW4iLCJvcmllbnRhdGlvbiIsImxvY2siLCJpbml0aWFsaXplIl0sInNvdXJjZVJvb3QiOiIifQ==