/*! For license information please see app.js.LICENSE.txt */
(()=>{"use strict";var t;!function(t){t.CuriousReader="CuriousReader",t.GDL="GDL",t.Unknown="Unknown"}(t||(t={}));var e=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}))};class n{constructor(t){this.emptyGlowImageTag="empty_glow_image",this.contentFilePath=t}parseBook(){return e(this,void 0,void 0,(function*(){return new Promise(((t,e)=>{this.parseContentJSONFile().then((e=>{this.contentJSON=e,console.log("Content JSON file parsed!"),console.log(this.contentJSON);let n={pages:[],bookType:this.determineBookType()};n.pages=this.parsePages(n),t(n)})).catch((t=>{e(t)}))}))}))}determineBookType(){return void 0!==this.contentJSON.presentation?t.CuriousReader:void 0!==this.contentJSON.chapters?t.GDL:t.Unknown}parsePages(e){let n=[];if(e.bookType===t.CuriousReader){let t=this.contentJSON.presentation.slides,e=this.contentJSON.presentation.globalBackgroundSelector.fillGlobalBackground;for(let i=0;i<t.length;i++){let r=t[i],o={visualElements:[],backgroundColor:e};o.visualElements=this.parsePageCR(r),n.push(o)}}else if(e.bookType===t.GDL){let t=this.contentJSON.chapters,e="#FCFCF2";for(let i=0;i<t.length;i++){let r=t[i],o={visualElements:[],backgroundColor:e};o.visualElements=this.parsePageGDL(r),n.push(o)}}else console.log("Unknown book type!");return n}parsePageCR(t){let e=[],n=t.elements;for(let t=0;t<n.length;t++){let i=n[t].action.library;if(i.includes("AdvancedText")){let i=this.parseTextElementCR(n[t]);e.push(i)}else if(i.includes("Image")){let i=this.parseImageElementCR(n[t]);e.push(i)}else if(i.includes("Audio")){let i=this.parseAudioElementCR(n[t]);e.push(i)}}return e}parsePageGDL(t){let e=[],n=t.params.content;for(let t=0;t<n.length;t++){let i=n[t].content.library;if(i.includes("AdvancedText")){let i=this.parseTextElementGDL(n[t].content.params);e.push(i)}else if(i.includes("Image")){let i=this.parseImageElementGDL(n[t].content.params);e.push(i)}}return e}parseTextElementCR(t){return{type:"text",positionX:t.x,positionY:t.y,width:t.width,height:t.height,textContentAsHTML:t.action.params.text}}parseTextElementGDL(t){return{type:"text",positionX:NaN,positionY:NaN,width:NaN,height:NaN,textContentAsHTML:t.text}}parseImageElementCR(t){let e="";return e=void 0===t.action.params.file?this.emptyGlowImageTag:t.action.params.file.path,{type:"image",positionX:t.x,positionY:t.y,width:t.width,height:t.height,imageSource:e}}parseImageElementGDL(t){return{type:"image",positionX:NaN,positionY:NaN,width:t.width,height:t.height,imageSource:t.file.path}}parseAudioElementCR(t){return{type:"audio",positionX:t.x,positionY:t.y,width:t.width,height:t.height,audioSrc:t.action.params.files[0].path,styles:""}}parseContentJSONFile(){return e(this,void 0,void 0,(function*(){return new Promise(((t,e)=>{let n=new XMLHttpRequest;n.open("GET",this.contentFilePath,!0),n.responseType="json",n.onload=function(){if(200===n.status){let e=n.response;delete e.l10n,delete e.override,t(e)}else e(n.response)},n.send()}))}))}}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var r="(prefers-reduced-motion: reduce)";function o(t){t.length=0}function a(t,e,n){return Array.prototype.slice.call(t,e,n)}function s(t){return t.bind.apply(t,[null].concat(a(arguments,1)))}var u=setTimeout,c=function(){};function l(t){return requestAnimationFrame(t)}function d(t,e){return typeof e===t}function f(t){return!m(t)&&d("object",t)}var h=Array.isArray,p=s(d,"function"),g=s(d,"string"),v=s(d,"undefined");function m(t){return null===t}function y(t){try{return t instanceof(t.ownerDocument.defaultView||window).HTMLElement}catch(t){return!1}}function w(t){return h(t)?t:[t]}function b(t,e){w(t).forEach(e)}function E(t,e){return t.indexOf(e)>-1}function S(t,e){return t.push.apply(t,w(e)),t}function x(t,e,n){t&&b(e,(function(e){e&&t.classList[n?"add":"remove"](e)}))}function P(t,e){x(t,g(e)?e.split(" "):e,!0)}function k(t,e){b(e,t.appendChild.bind(t))}function C(t,e){b(t,(function(t){var n=(e||t).parentNode;n&&n.insertBefore(t,e)}))}function L(t,e){return y(t)&&(t.msMatchesSelector||t.matches).call(t,e)}function T(t,e){var n=t?a(t.children):[];return e?n.filter((function(t){return L(t,e)})):n}function A(t,e){return e?T(t,e)[0]:t.firstElementChild}var N=Object.keys;function D(t,e,n){return t&&(n?N(t).reverse():N(t)).forEach((function(n){"__proto__"!==n&&e(t[n],n)})),t}function F(t){return a(arguments,1).forEach((function(e){D(e,(function(n,i){t[i]=e[i]}))})),t}function I(t){return a(arguments,1).forEach((function(e){D(e,(function(e,n){h(e)?t[n]=e.slice():f(e)?t[n]=I({},f(t[n])?t[n]:{},e):t[n]=e}))})),t}function M(t,e){b(e||N(t),(function(e){delete t[e]}))}function z(t,e){b(t,(function(t){b(e,(function(e){t&&t.removeAttribute(e)}))}))}function O(t,e,n){f(e)?D(e,(function(e,n){O(t,n,e)})):b(t,(function(t){m(n)||""===n?z(t,e):t.setAttribute(e,String(n))}))}function R(t,e,n){var i=document.createElement(t);return e&&(g(e)?P(i,e):O(i,e)),n&&k(n,i),i}function j(t,e,n){if(v(n))return getComputedStyle(t)[e];m(n)||(t.style[e]=""+n)}function B(t,e){j(t,"display",e)}function G(t){t.setActive&&t.setActive()||t.focus({preventScroll:!0})}function W(t,e){return t.getAttribute(e)}function H(t,e){return t&&t.classList.contains(e)}function X(t){return t.getBoundingClientRect()}function U(t){b(t,(function(t){t&&t.parentNode&&t.parentNode.removeChild(t)}))}function J(t){return A((new DOMParser).parseFromString(t,"text/html").body)}function Y(t,e){t.preventDefault(),e&&(t.stopPropagation(),t.stopImmediatePropagation())}function q(t,e){return t&&t.querySelector(e)}function K(t,e){return e?a(t.querySelectorAll(e)):[]}function Q(t,e){x(t,e,!1)}function V(t){return t.timeStamp}function $(t){return g(t)?t:t?t+"px":""}var Z="splide";function tt(t,e){if(!t)throw new Error("[splide] "+(e||""))}var et=Math.min,nt=Math.max,it=Math.floor,rt=Math.ceil,ot=Math.abs;function at(t,e,n){return ot(t-e)<n}function st(t,e,n,i){var r=et(e,n),o=nt(e,n);return i?r<t&&t<o:r<=t&&t<=o}function ut(t,e,n){var i=et(e,n),r=nt(e,n);return et(nt(i,t),r)}function ct(t){return+(t>0)-+(t<0)}function lt(t,e){return b(e,(function(e){t=t.replace("%s",""+e)})),t}function dt(t){return t<10?"0"+t:""+t}var ft={};function ht(){var t=[];function e(t,e,n){b(t,(function(t){t&&b(e,(function(e){e.split(" ").forEach((function(e){var i=e.split(".");n(t,i[0],i[1])}))}))}))}return{bind:function(n,i,r,o){e(n,i,(function(e,n,i){var a="addEventListener"in e,s=a?e.removeEventListener.bind(e,n,r,o):e.removeListener.bind(e,r);a?e.addEventListener(n,r,o):e.addListener(r),t.push([e,n,i,r,s])}))},unbind:function(n,i,r){e(n,i,(function(e,n,i){t=t.filter((function(t){return!!(t[0]!==e||t[1]!==n||t[2]!==i||r&&t[3]!==r)||(t[4](),!1)}))}))},dispatch:function(t,e,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(e,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!1,n),t.dispatchEvent(i),i},destroy:function(){t.forEach((function(t){t[4]()})),o(t)}}}var pt="mounted",gt="ready",vt="move",mt="moved",yt="click",wt="refresh",bt="updated",Et="resize",St="resized",xt="scroll",Pt="scrolled",kt="destroy",Ct="navigation:mounted",Lt="autoplay:play",_t="autoplay:pause",Tt="lazyload:loaded",At="ei";function Nt(t){var e=t?t.event.bus:document.createDocumentFragment(),n=ht();return t&&t.event.on(kt,n.destroy),F(n,{bus:e,on:function(t,i){n.bind(e,w(t).join(" "),(function(t){i.apply(i,h(t.detail)?t.detail:[])}))},off:s(n.unbind,e),emit:function(t){n.dispatch(e,t,a(arguments,1))}})}function Dt(t,e,n,i){var r,o,a=Date.now,s=0,u=!0,c=0;function d(){if(!u){if(s=t?et((a()-r)/t,1):1,n&&n(s),s>=1&&(e(),r=a(),i&&++c>=i))return f();o=l(d)}}function f(){u=!0}function h(){o&&cancelAnimationFrame(o),s=0,o=0,u=!0}return{start:function(e){e||h(),r=a()-(e?s*t:0),u=!1,o=l(d)},rewind:function(){r=a(),s=0,n&&n(s)},pause:f,cancel:h,set:function(e){t=e},isPaused:function(){return u}}}var Ft="ArrowLeft",It="ArrowRight",Mt="ArrowUp",zt="ArrowDown",Ot="ttb",Rt={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Mt,It],ArrowRight:[zt,Ft]};var jt="role",Bt="tabindex",Gt="aria-controls",Wt="aria-current",Ht="aria-selected",Xt="aria-label",Ut="aria-labelledby",Jt="aria-hidden",Yt="aria-orientation",qt="aria-roledescription",Kt="aria-live",Qt="aria-busy",Vt="aria-atomic",$t=[jt,Bt,"disabled",Gt,Wt,Xt,Ut,Jt,Yt,qt],Zt=Z,te="splide__track",ee="splide__slide",ne=ee+"--clone",ie="splide__arrows",re="splide__arrow",oe=re+"--prev",ae=re+"--next",se="splide__pagination",ue="is-active",ce="is-prev",le="is-next",de="is-visible",fe="is-loading",he="is-focus-in",pe="is-overflow",ge=[ue,de,ce,le,fe,he,pe],ve={slide:ee,clone:ne,arrows:ie,arrow:re,prev:oe,next:ae,pagination:se,page:"splide__pagination__page",spinner:"splide__spinner"},me="touchmove mousemove",ye="touchend touchcancel mouseup click",we="slide",be="loop",Ee="fade";var Se={passive:!1,capture:!0},xe={Spacebar:" ",Right:It,Left:Ft,Up:Mt,Down:zt};function Pe(t){return t=g(t)?t:t.key,xe[t]||t}var ke="keydown",Ce="data-splide-lazy",Le="data-splide-lazy-srcset",_e=[" ","Enter"],Te=Object.freeze({__proto__:null,Media:function(t,e,n){var i=t.state,o=n.breakpoints||{},a=n.reducedMotion||{},s=ht(),u=[];function c(t){t&&s.destroy()}function l(t,e){var n=matchMedia(e);s.bind(n,"change",d),u.push([t,n])}function d(){var e=i.is(7),r=n.direction,o=u.reduce((function(t,e){return I(t,e[1].matches?e[0]:{})}),{});M(n),f(o),n.destroy?t.destroy("completely"===n.destroy):e?(c(!0),t.mount()):r!==n.direction&&t.refresh()}function f(e,r,o){I(n,e),r&&I(Object.getPrototypeOf(n),e),!o&&i.is(1)||t.emit(bt,n)}return{setup:function(){var t="min"===n.mediaQuery;N(o).sort((function(e,n){return t?+e-+n:+n-+e})).forEach((function(e){l(o[e],"("+(t?"min":"max")+"-width:"+e+"px)")})),l(a,r),d()},destroy:c,reduce:function(t){matchMedia(r).matches&&(t?I(n,a):M(n,N(a)))},set:f}},Direction:function(t,e,n){return{resolve:function(t,e,i){var r="rtl"!==(i=i||n.direction)||e?i===Ot?0:-1:1;return Rt[t]&&Rt[t][r]||t.replace(/width|left|right/i,(function(t,e){var n=Rt[t.toLowerCase()][r]||t;return e>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(t){return t*("rtl"===n.direction?1:-1)}}},Elements:function(t,e,n){var i,r,a,s=Nt(t),u=s.on,c=s.bind,l=t.root,d=n.i18n,f={},h=[],g=[],v=[];function m(){var t,e,o;i=b("."+te),r=A(i,".splide__list"),tt(i&&r,"A track/list element is missing."),S(h,T(r,".splide__slide:not(."+ne+")")),D({arrows:ie,pagination:se,prev:oe,next:ae,bar:"splide__progress__bar",toggle:"splide__toggle"},(function(t,e){f[e]=b("."+t)})),F(f,{root:l,track:i,list:r,slides:h}),e=l.id||""+(t=Z)+dt(ft[t]=(ft[t]||0)+1),o=n.role,l.id=e,i.id=i.id||e+"-track",r.id=r.id||e+"-list",!W(l,jt)&&"SECTION"!==l.tagName&&o&&O(l,jt,o),O(l,qt,d.carousel),O(r,jt,"presentation"),w()}function y(t){var e=$t.concat("style");o(h),Q(l,g),Q(i,v),z([i,r],e),z(l,t?e:["style",qt])}function w(){Q(l,g),Q(i,v),g=E(Zt),v=E(te),P(l,g),P(i,v),O(l,Xt,n.label),O(l,Ut,n.labelledby)}function b(t){var e=q(l,t);return e&&function(t,e){if(p(t.closest))return t.closest(e);for(var n=t;n&&1===n.nodeType&&!L(n,e);)n=n.parentElement;return n}(e,".splide")===l?e:void 0}function E(t){return[t+"--"+n.type,t+"--"+n.direction,n.drag&&t+"--draggable",n.isNavigation&&t+"--nav",t===Zt&&ue]}return F(f,{setup:m,mount:function(){u(wt,y),u(wt,m),u(bt,w),c(document,"touchstart mousedown keydown",(function(t){a="keydown"===t.type}),{capture:!0}),c(l,"focusin",(function(){x(l,he,!!a)}))},destroy:y})},Slides:function(t,e,n){var i=Nt(t),r=i.on,a=i.emit,u=i.bind,c=e.Elements,l=c.slides,d=c.list,f=[];function h(){l.forEach((function(t,e){m(t,e,-1)}))}function v(){_((function(t){t.destroy()})),o(f)}function m(e,n,i){var r=function(t,e,n,i){var r,o=Nt(t),a=o.on,u=o.emit,c=o.bind,l=t.Components,d=t.root,f=t.options,h=f.isNavigation,p=f.updateOnMove,g=f.i18n,v=f.pagination,m=f.slideFocus,y=l.Direction.resolve,w=W(i,"style"),b=W(i,Xt),E=n>-1,S=A(i,".splide__slide__container");function P(){var r=t.splides.map((function(t){var n=t.splide.Components.Slides.getAt(e);return n?n.slide.id:""})).join(" ");O(i,Xt,lt(g.slideX,(E?n:e)+1)),O(i,Gt,r),O(i,jt,m?"button":""),m&&z(i,qt)}function k(){r||C()}function C(){if(!r){var n=t.index;(o=L())!==H(i,ue)&&(x(i,ue,o),O(i,Wt,h&&o||""),u(o?"active":"inactive",_)),function(){var e=function(){if(t.is(Ee))return L();var e=X(l.Elements.track),n=X(i),r=y("left",!0),o=y("right",!0);return it(e[r])<=rt(n[r])&&it(n[o])<=rt(e[o])}(),n=!e&&(!L()||E);if(t.state.is([4,5])||O(i,Jt,n||""),O(K(i,f.focusableNodes||""),Bt,n?-1:""),m&&O(i,Bt,n?-1:0),e!==H(i,de)&&(x(i,de,e),u(e?"visible":"hidden",_)),!e&&document.activeElement===i){var r=l.Slides.getAt(t.index);r&&G(r.slide)}}(),x(i,ce,e===n-1),x(i,le,e===n+1)}var o}function L(){var i=t.index;return i===e||f.cloneStatus&&i===n}var _={index:e,slideIndex:n,slide:i,container:S,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+dt(e+1),O(i,jt,v?"tabpanel":"group"),O(i,qt,g.slide),O(i,Xt,b||lt(g.slideLabel,[e+1,t.length]))),c(i,"click",s(u,yt,_)),c(i,"keydown",s(u,"sk",_)),a([mt,"sh",Pt],C),a(Ct,P),p&&a(vt,k)},destroy:function(){r=!0,o.destroy(),Q(i,ge),z(i,$t),O(i,"style",w),O(i,Xt,b||"")},update:C,style:function(t,e,n){j(n&&S||i,t,e)},isWithin:function(n,i){var r=ot(n-e);return E||!f.rewind&&!t.is(be)||(r=et(r,t.length-r)),r<=i}};return _}(t,n,i,e);r.mount(),f.push(r),f.sort((function(t,e){return t.index-e.index}))}function S(t){return t?T((function(t){return!t.isClone})):f}function _(t,e){S(e).forEach(t)}function T(t){return f.filter(p(t)?t:function(e){return g(t)?L(e.slide,t):E(w(t),e.index)})}return{mount:function(){h(),r(wt,v),r(wt,h)},destroy:v,update:function(){_((function(t){t.update()}))},register:m,get:S,getIn:function(t){var i=e.Controller,r=i.toIndex(t),o=i.hasFocus()?1:n.perPage;return T((function(t){return st(t.index,r,r+o-1)}))},getAt:function(t){return T(t)[0]},add:function(t,e){b(t,(function(t){if(g(t)&&(t=J(t)),y(t)){var i=l[e];i?C(t,i):k(d,t),P(t,n.classes.slide),r=t,o=s(a,Et),c=K(r,"img"),(f=c.length)?c.forEach((function(t){u(t,"load error",(function(){--f||o()}))})):o()}var r,o,c,f})),a(wt)},remove:function(t){U(T(t).map((function(t){return t.slide}))),a(wt)},forEach:_,filter:T,style:function(t,e,n){_((function(i){i.style(t,e,n)}))},getLength:function(t){return t?l.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(t,e,n){var i,r,o,a=Nt(t),u=a.on,c=a.bind,l=a.emit,d=e.Slides,h=e.Direction.resolve,p=e.Elements,g=p.root,v=p.track,m=p.list,y=d.getAt,w=d.style;function b(){i=n.direction===Ot,j(g,"maxWidth",$(n.width)),j(v,h("paddingLeft"),S(!1)),j(v,h("paddingRight"),S(!0)),E(!0)}function E(t){var e,a=X(g);(t||r.width!==a.width||r.height!==a.height)&&(j(v,"height",(e="",i&&(tt(e=P(),"height or heightRatio is missing."),e="calc("+e+" - "+S(!1)+" - "+S(!0)+")"),e)),w(h("marginRight"),$(n.gap)),w("width",n.autoWidth?null:$(n.fixedWidth)||(i?"":k())),w("height",$(n.fixedHeight)||(i?n.autoHeight?null:k():P()),!0),r=a,l(St),o!==(o=N())&&(x(g,pe,o),l("overflow",o)))}function S(t){var e=n.padding,i=h(t?"right":"left");return e&&$(e[i]||(f(e)?0:e))||"0px"}function P(){return $(n.height||X(m).width*n.heightRatio)}function k(){var t=$(n.gap);return"calc((100%"+(t&&" + "+t)+")/"+(n.perPage||1)+(t&&" - "+t)+")"}function C(){return X(m)[h("width")]}function L(t,e){var n=y(t||0);return n?X(n.slide)[h("width")]+(e?0:A()):0}function _(t,e){var n=y(t);if(n){var i=X(n.slide)[h("right")],r=X(m)[h("left")];return ot(i-r)+(e?0:A())}return 0}function T(e){return _(t.length-1)-_(0)+L(0,e)}function A(){var t=y(0);return t&&parseFloat(j(t.slide,h("marginRight")))||0}function N(){return t.is(Ee)||T(!0)>C()}return{mount:function(){var t,e;b(),c(window,"resize load",(t=s(l,Et),e=Dt(0,t,null,1),function(){e.isPaused()&&e.start()})),u([bt,wt],b),u(Et,E)},resize:E,listSize:C,slideSize:L,sliderSize:T,totalSize:_,getPadding:function(t){return parseFloat(j(v,h("padding"+(t?"Right":"Left"))))||0},isOverflow:N}},Clones:function(t,e,n){var i,r=Nt(t),a=r.on,s=e.Elements,u=e.Slides,c=e.Direction.resolve,l=[];function d(){a(wt,f),a([bt,Et],p),(i=g())&&(function(e){var i=u.get().slice(),r=i.length;if(r){for(;i.length<e;)S(i,i);S(i.slice(-e),i.slice(0,e)).forEach((function(o,a){var c=a<e,d=function(e,i){var r=e.cloneNode(!0);return P(r,n.classes.clone),r.id=t.root.id+"-clone"+dt(i+1),r}(o.slide,a);c?C(d,i[0].slide):k(s.list,d),S(l,d),u.register(d,a-e+(c?0:r),o.index)}))}}(i),e.Layout.resize(!0))}function f(){h(),d()}function h(){U(l),o(l),r.destroy()}function p(){var t=g();i!==t&&(i<t||!t)&&r.emit(wt)}function g(){var i=n.clones;if(t.is(be)){if(v(i)){var r=n[c("fixedWidth")]&&e.Layout.slideSize(0);i=r&&rt(X(s.track)[c("width")]/r)||n[c("autoWidth")]&&t.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:h}},Move:function(t,e,n){var i,r=Nt(t),o=r.on,a=r.emit,s=t.state.set,u=e.Layout,c=u.slideSize,l=u.getPadding,d=u.totalSize,f=u.listSize,h=u.sliderSize,p=e.Direction,g=p.resolve,m=p.orient,y=e.Elements,w=y.list,b=y.track;function E(){e.Controller.isBusy()||(e.Scroll.cancel(),S(t.index),e.Slides.update())}function S(t){x(L(t,!0))}function x(n,i){if(!t.is(Ee)){var r=i?n:function(n){if(t.is(be)){var i=C(n),r=i>e.Controller.getEnd();(i<0||r)&&(n=P(n,r))}return n}(n);j(w,"transform","translate"+g("X")+"("+r+"px)"),n!==r&&a("sh")}}function P(t,e){var n=t-T(e),i=h();return t-m(i*(rt(ot(n)/i)||1))*(e?1:-1)}function k(){x(_(),!0),i.cancel()}function C(t){for(var n=e.Slides.get(),i=0,r=1/0,o=0;o<n.length;o++){var a=n[o].index,s=ot(L(a,!0)-t);if(!(s<=r))break;r=s,i=a}return i}function L(e,i){var r=m(d(e-1)-function(t){var e=n.focus;return"center"===e?(f()-c(t,!0))/2:+e*c(t)||0}(e));return i?function(e){return n.trimSpace&&t.is(we)&&(e=ut(e,0,m(h(!0)-f()))),e}(r):r}function _(){var t=g("left");return X(w)[t]-X(b)[t]+m(l(!1))}function T(t){return L(t?e.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=e.Transition,o([pt,St,bt,wt],E)},move:function(t,e,n,r){var o,u;t!==e&&(o=t>n,u=m(P(_(),o)),o?u>=0:u<=w[g("scrollWidth")]-X(b)[g("width")])&&(k(),x(P(_(),t>n),!0)),s(4),a(vt,e,n,t),i.start(e,(function(){s(3),a(mt,e,n,t),r&&r()}))},jump:S,translate:x,shift:P,cancel:k,toIndex:C,toPosition:L,getPosition:_,getLimit:T,exceededLimit:function(t,e){e=v(e)?_():e;var n=!0!==t&&m(e)<m(T(!1)),i=!1!==t&&m(e)>m(T(!0));return n||i},reposition:E}},Controller:function(t,e,n){var i,r,o,a,u=Nt(t),c=u.on,l=u.emit,d=e.Move,f=d.getPosition,h=d.getLimit,p=d.toPosition,m=e.Slides,y=m.isEnough,w=m.getLength,b=n.omitEnd,E=t.is(be),S=t.is(we),x=s(T,!1),P=s(T,!0),k=n.start||0,C=k;function L(){r=w(!0),o=n.perMove,a=n.perPage,i=D();var t=ut(k,0,b?i:r-1);t!==k&&(k=t,d.reposition())}function _(){i!==D()&&l(At)}function T(t,e){var n=o||(z()?1:a),r=A(k+n*(t?-1:1),k,!(o||z()));return-1===r&&S&&!at(f(),h(!t),1)?t?0:i:e?r:N(r)}function A(e,s,u){if(y()||z()){var c=function(e){if(S&&"move"===n.trimSpace&&e!==k)for(var i=f();i===p(e,!0)&&st(e,0,t.length-1,!n.rewind);)e<k?--e:++e;return e}(e);c!==e&&(s=e,e=c,u=!1),e<0||e>i?e=o||!st(0,e,s,!0)&&!st(i,s,e,!0)?E?u?e<0?-(r%a||a):r:e:n.rewind?e<0?i:0:-1:F(I(e)):u&&e!==s&&(e=F(I(s)+(e<s?-1:1)))}else e=-1;return e}function N(t){return E?(t+r)%r||0:t}function D(){for(var t=r-(z()||E&&o?1:a);b&&t-- >0;)if(p(r-1,!0)!==p(t,!0)){t++;break}return ut(t,0,r-1)}function F(t){return ut(z()?t:a*t,0,i)}function I(t){return z()?et(t,i):it((t>=i?r-1:t)/a)}function M(t){t!==k&&(C=k,k=t)}function z(){return!v(n.focus)||n.isNavigation}function O(){return t.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){L(),c([bt,wt,At],L),c(St,_)},go:function(t,e,n){if(!O()){var r=function(t){var e=k;if(g(t)){var n=t.match(/([+\-<>])(\d+)?/)||[],r=n[1],o=n[2];"+"===r||"-"===r?e=A(k+ +(""+r+(+o||1)),k):">"===r?e=o?F(+o):x(!0):"<"===r&&(e=P(!0))}else e=E?t:ut(t,0,i);return e}(t),o=N(r);o>-1&&(e||o!==k)&&(M(o),d.move(r,o,C,n))}},scroll:function(t,n,r,o){e.Scroll.scroll(t,n,r,(function(){var t=N(d.toIndex(f()));M(b?et(t,i):t),o&&o()}))},getNext:x,getPrev:P,getAdjacent:T,getEnd:D,setIndex:M,getIndex:function(t){return t?C:k},toIndex:F,toPage:I,toDest:function(t){var e=d.toIndex(t);return S?ut(e,0,i):e},hasFocus:z,isBusy:O}},Arrows:function(t,e,n){var i,r,o=Nt(t),a=o.on,u=o.bind,c=o.emit,l=n.classes,d=n.i18n,f=e.Elements,h=e.Controller,p=f.arrows,g=f.track,v=p,m=f.prev,y=f.next,w={};function b(){var t;!(t=n.arrows)||m&&y||(v=p||R("div",l.arrows),m=L(!0),y=L(!1),i=!0,k(v,[m,y]),!p&&C(v,g)),m&&y&&(F(w,{prev:m,next:y}),B(v,t?"":"none"),P(v,r=ie+"--"+n.direction),t&&(a([pt,mt,wt,Pt,At],_),u(y,"click",s(x,">")),u(m,"click",s(x,"<")),_(),O([m,y],Gt,g.id),c("arrows:mounted",m,y))),a(bt,E)}function E(){S(),b()}function S(){o.destroy(),Q(v,r),i?(U(p?[m,y]:v),m=y=null):z([m,y],$t)}function x(t){h.go(t,!0)}function L(t){return J('<button class="'+l.arrow+" "+(t?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function _(){if(m&&y){var e=t.index,n=h.getPrev(),i=h.getNext(),r=n>-1&&e<n?d.last:d.prev,o=i>-1&&e>i?d.first:d.next;m.disabled=n<0,y.disabled=i<0,O(m,Xt,r),O(y,Xt,o),c("arrows:updated",m,y,n,i)}}return{arrows:w,mount:b,destroy:S,update:_}},Autoplay:function(t,e,n){var i,r,o=Nt(t),a=o.on,s=o.bind,u=o.emit,c=Dt(n.interval,t.go.bind(t,">"),(function(t){var e=d.bar;e&&j(e,"width",100*t+"%"),u("autoplay:playing",t)})),l=c.isPaused,d=e.Elements,f=e.Elements,h=f.root,p=f.toggle,g=n.autoplay,v="pause"===g;function m(){l()&&e.Slides.isEnough()&&(c.start(!n.resetProgress),r=i=v=!1,b(),u(Lt))}function y(t){void 0===t&&(t=!0),v=!!t,b(),l()||(c.pause(),u(_t))}function w(){v||(i||r?y(!1):m())}function b(){p&&(x(p,ue,!v),O(p,Xt,n.i18n[v?"play":"pause"]))}function E(t){var i=e.Slides.getAt(t);c.set(i&&+W(i.slide,"data-splide-interval")||n.interval)}return{mount:function(){g&&(n.pauseOnHover&&s(h,"mouseenter mouseleave",(function(t){i="mouseenter"===t.type,w()})),n.pauseOnFocus&&s(h,"focusin focusout",(function(t){r="focusin"===t.type,w()})),p&&s(p,"click",(function(){v?m():y(!0)})),a([vt,xt,wt],c.rewind),a(vt,E),p&&O(p,Gt,d.track.id),v||m(),b())},destroy:c.cancel,play:m,pause:y,isPaused:l}},Cover:function(t,e,n){var i=Nt(t).on;function r(t){e.Slides.forEach((function(e){var n=A(e.container||e.slide,"img");n&&n.src&&o(t,n,e)}))}function o(t,e,n){n.style("background",t?'center/cover no-repeat url("'+e.src+'")':"",!0),B(e,t?"none":"")}return{mount:function(){n.cover&&(i(Tt,s(o,!0)),i([pt,bt,wt],s(r,!0)))},destroy:s(r,!1)}},Scroll:function(t,e,n){var i,r,o=Nt(t),a=o.on,u=o.emit,c=t.state.set,l=e.Move,d=l.getPosition,f=l.getLimit,h=l.exceededLimit,p=l.translate,g=t.is(we),v=1;function m(t,n,o,a,f){var p=d();if(b(),o&&(!g||!h())){var m=e.Layout.sliderSize(),E=ct(t)*m*it(ot(t)/m)||0;t=l.toPosition(e.Controller.toDest(t%m))+E}var S=at(p,t,1);v=1,n=S?0:n||nt(ot(t-p)/1.5,800),r=a,i=Dt(n,y,s(w,p,t,f),1),c(5),u(xt),i.start()}function y(){c(3),r&&r(),u(Pt)}function w(t,e,i,o){var a=d(),s=t+(e-t)*function(t){var e=n.easingFunc;return e?e(t):1-Math.pow(1-t,4)}(o),u=(s-a)*v;p(a+u),g&&!i&&h()&&(v*=.6,ot(u)<10&&m(f(h(!0)),600,!1,r,!0))}function b(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(b(),y())}return{mount:function(){a(vt,b),a([bt,wt],E)},destroy:b,scroll:m,cancel:E}},Drag:function(t,e,n){var i,r,o,a,s,u,l,d,h=Nt(t),p=h.on,g=h.emit,v=h.bind,m=h.unbind,y=t.state,w=e.Move,b=e.Scroll,E=e.Controller,S=e.Elements.track,x=e.Media.reduce,P=e.Direction,k=P.resolve,C=P.orient,_=w.getPosition,T=w.exceededLimit,A=!1;function N(){var t=n.drag;W(!t),a="free"===t}function D(t){if(u=!1,!l){var e=G(t);i=t.target,r=n.noDrag,L(i,".splide__pagination__page, ."+re)||r&&L(i,r)||!e&&t.button||(E.isBusy()?Y(t,!0):(d=e?S:window,s=y.is([4,5]),o=null,v(d,me,F,Se),v(d,ye,I,Se),w.cancel(),b.cancel(),z(t)))}var i,r}function F(e){if(y.is(6)||(y.set(6),g("drag")),e.cancelable)if(s){w.translate(i+O(e)/(A&&t.is(we)?5:1));var r=R(e)>200,o=A!==(A=T());(r||o)&&z(e),u=!0,g("dragging"),Y(e)}else(function(t){return ot(O(t))>ot(O(t,!0))})(e)&&(s=function(t){var e=n.dragMinThreshold,i=f(e),r=i&&e.mouse||0,o=(i?e.touch:+e)||10;return ot(O(t))>(G(t)?o:r)}(e),Y(e))}function I(i){y.is(6)&&(y.set(3),g("dragged")),s&&(function(i){var r=function(e){if(t.is(be)||!A){var n=R(e);if(n&&n<200)return O(e)/n}return 0}(i),o=function(t){return _()+ct(t)*et(ot(t)*(n.flickPower||600),a?1/0:e.Layout.listSize()*(n.flickMaxPages||1))}(r),s=n.rewind&&n.rewindByDrag;x(!1),a?E.scroll(o,0,n.snap):t.is(Ee)?E.go(C(ct(r))<0?s?"<":"-":s?">":"+"):t.is(we)&&A&&s?E.go(T(!0)?">":"<"):E.go(E.toDest(o),!0),x(!0)}(i),Y(i)),m(d,me,F),m(d,ye,I),s=!1}function M(t){!l&&u&&Y(t,!0)}function z(t){o=r,r=t,i=_()}function O(t,e){return B(t,e)-B(j(t),e)}function R(t){return V(t)-V(j(t))}function j(t){return r===t&&o||r}function B(t,e){return(G(t)?t.changedTouches[0]:t)["page"+k(e?"Y":"X")]}function G(t){return"undefined"!=typeof TouchEvent&&t instanceof TouchEvent}function W(t){l=t}return{mount:function(){v(S,me,c,Se),v(S,ye,c,Se),v(S,"touchstart mousedown",D,Se),v(S,"click",M,{capture:!0}),v(S,"dragstart",Y),p([pt,bt],N)},disable:W,isDragging:function(){return s}}},Keyboard:function(t,e,n){var i,r,o=Nt(t),a=o.on,s=o.bind,c=o.unbind,l=t.root,d=e.Direction.resolve;function f(){var t=n.keyboard;t&&(i="global"===t?window:l,s(i,ke,g))}function h(){c(i,ke)}function p(){var t=r;r=!0,u((function(){r=t}))}function g(e){if(!r){var n=Pe(e);n===d(Ft)?t.go("<"):n===d(It)&&t.go(">")}}return{mount:function(){f(),a(bt,h),a(bt,f),a(vt,p)},destroy:h,disable:function(t){r=t}}},LazyLoad:function(t,e,n){var i=Nt(t),r=i.on,a=i.off,u=i.bind,c=i.emit,l="sequential"===n.lazyLoad,d=[mt,Pt],f=[];function h(){o(f),e.Slides.forEach((function(t){K(t.slide,"[data-splide-lazy], [data-splide-lazy-srcset]").forEach((function(e){var i=W(e,Ce),r=W(e,Le);if(i!==e.src||r!==e.srcset){var o=n.classes.spinner,a=e.parentElement,s=A(a,"."+o)||R("span",o,a);f.push([e,t,s]),e.src||B(e,"none")}}))})),l?m():(a(d),r(d,p),p())}function p(){(f=f.filter((function(e){var i=n.perPage*((n.preloadPages||1)+1)-1;return!e[1].isWithin(t.index,i)||g(e)}))).length||a(d)}function g(t){var e=t[0];P(t[1].slide,fe),u(e,"load error",s(v,t)),O(e,"src",W(e,Ce)),O(e,"srcset",W(e,Le)),z(e,Ce),z(e,Le)}function v(t,e){var n=t[0],i=t[1];Q(i.slide,fe),"error"!==e.type&&(U(t[2]),B(n,""),c(Tt,n,i),c(Et)),l&&m()}function m(){f.length&&g(f.shift())}return{mount:function(){n.lazyLoad&&(h(),r(wt,h))},destroy:s(o,f),check:p}},Pagination:function(t,e,n){var i,r,u=Nt(t),c=u.on,l=u.emit,d=u.bind,f=e.Slides,h=e.Elements,p=e.Controller,g=p.hasFocus,v=p.getIndex,m=p.go,y=e.Direction.resolve,w=h.pagination,b=[];function E(){i&&(U(w?a(i.children):i),Q(i,r),o(b),i=null),u.destroy()}function S(t){m(">"+t,!0)}function x(t,e){var n=b.length,i=Pe(e),r=k(),o=-1;i===y(It,!1,r)?o=++t%n:i===y(Ft,!1,r)?o=(--t+n)%n:"Home"===i?o=0:"End"===i&&(o=n-1);var a=b[o];a&&(G(a.button),m(">"+o),Y(e,!0))}function k(){return n.paginationDirection||n.direction}function C(t){return b[p.toPage(t)]}function L(){var t=C(v(!0)),e=C(v());if(t){var n=t.button;Q(n,ue),z(n,Ht),O(n,Bt,-1)}if(e){var r=e.button;P(r,ue),O(r,Ht,!0),O(r,Bt,"")}l("pagination:updated",{list:i,items:b},t,e)}return{items:b,mount:function e(){E(),c([bt,wt,At],e);var o=n.pagination;w&&B(w,o?"":"none"),o&&(c([vt,xt,Pt],L),function(){var e=t.length,o=n.classes,a=n.i18n,u=n.perPage,c=g()?p.getEnd()+1:rt(e/u);P(i=w||R("ul",o.pagination,h.track.parentElement),r=se+"--"+k()),O(i,jt,"tablist"),O(i,Xt,a.select),O(i,Yt,k()===Ot?"vertical":"");for(var l=0;l<c;l++){var v=R("li",null,i),m=R("button",{class:o.page,type:"button"},v),y=f.getIn(l).map((function(t){return t.slide.id})),E=!g()&&u>1?a.pageX:a.slideX;d(m,"click",s(S,l)),n.paginationKeyboard&&d(m,"keydown",s(x,l)),O(v,jt,"presentation"),O(m,jt,"tab"),O(m,Gt,y.join(" ")),O(m,Xt,lt(E,l+1)),O(m,Bt,-1),b.push({li:v,button:m,page:l})}}(),L(),l("pagination:mounted",{list:i,items:b},C(t.index)))},destroy:E,getAt:C,update:L}},Sync:function(t,e,n){var i=n.isNavigation,r=n.slideFocus,a=[];function u(){var e,n;t.splides.forEach((function(e){e.isParent||(l(t,e.splide),l(e.splide,t))})),i&&((n=(e=Nt(t)).on)(yt,f),n("sk",h),n([pt,bt],d),a.push(e),e.emit(Ct,t.splides))}function c(){a.forEach((function(t){t.destroy()})),o(a)}function l(t,e){var n=Nt(t);n.on(vt,(function(t,n,i){e.go(e.is(be)?i:t)})),a.push(n)}function d(){O(e.Elements.list,Yt,n.direction===Ot?"vertical":"")}function f(e){t.go(e.index)}function h(t,e){E(_e,Pe(e))&&(f(t),Y(e))}return{setup:s(e.Media.set,{slideFocus:v(r)?i:r},!0),mount:u,destroy:c,remount:function(){c(),u()}}},Wheel:function(t,e,n){var i=Nt(t).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,a=o<0,s=V(i),u=n.wheelMinThreshold||0,c=n.wheelSleep||0;ot(o)>u&&s-r>c&&(t.go(a?"<":">"),r=s),function(i){return!n.releaseWheel||t.state.is(4)||-1!==e.Controller.getAdjacent(i)}(a)&&Y(i)}}return{mount:function(){n.wheel&&i(e.Elements.track,"wheel",o,Se)}}},Live:function(t,e,n){var i=Nt(t).on,r=e.Elements.track,o=n.live&&!n.isNavigation,a=R("span","splide__sr"),u=Dt(90,s(c,!1));function c(t){O(r,Qt,t),t?(k(r,a),u.start()):(U(a),u.cancel())}function l(t){o&&O(r,Kt,t?"off":"polite")}return{mount:function(){o&&(l(!e.Autoplay.isPaused()),O(r,Vt,!0),a.textContent="…",i(Lt,s(l,!0)),i(_t,s(l,!1)),i([mt,Pt],s(c,!0)))},disable:l,destroy:function(){z(r,[Kt,Vt,Qt]),U(a)}}}}),Ae={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:ve,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Ne(t,e,n){var i=e.Slides;function r(){i.forEach((function(t){t.style("transform","translateX(-"+100*t.index+"%)")}))}return{mount:function(){Nt(t).on([pt,wt],r)},start:function(t,e){i.style("transition","opacity "+n.speed+"ms "+n.easing),u(e)},cancel:c}}function De(t,e,n){var i,r=e.Move,o=e.Controller,a=e.Scroll,u=e.Elements.list,c=s(j,u,"transition");function l(){c(""),a.cancel()}return{mount:function(){Nt(t).bind(u,"transitionend",(function(t){t.target===u&&i&&(l(),i())}))},start:function(e,s){var u=r.toPosition(e,!0),l=r.getPosition(),d=function(e){var i=n.rewindSpeed;if(t.is(we)&&i){var r=o.getIndex(!0),a=o.getEnd();if(0===r&&e>=a||r>=a&&0===e)return i}return n.speed}(e);ot(u-l)>=1&&d>=1?n.useScroll?a.scroll(u,d,!1,s):(c("transform "+d+"ms "+n.easing),r.translate(u,!0),i=s):(r.jump(e),s())},cancel:l}}var Fe=function(){function t(e,n){var i;this.event=Nt(),this.Components={},this.state=(i=1,{set:function(t){i=t},is:function(t){return E(w(t),i)}}),this.splides=[],this._o={},this._E={};var r=g(e)?q(document,e):e;tt(r,r+" is invalid."),this.root=r,n=I({label:W(r,Xt)||"",labelledby:W(r,Ut)||""},Ae,t.defaults,n||{});try{I(n,JSON.parse(W(r,"data-splide")))}catch(t){tt(!1,"Invalid JSON")}this._o=Object.create(I({},n))}var e,n,r=t.prototype;return r.mount=function(t,e){var n=this,i=this.state,r=this.Components;return tt(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=e||this._T||(this.is(Ee)?Ne:De),this._E=t||this._E,D(F({},Te,this._E,{Transition:this._T}),(function(t,e){var i=t(n,r,n._o);r[e]=i,i.setup&&i.setup()})),D(r,(function(t){t.mount&&t.mount()})),this.emit(pt),P(this.root,"is-initialized"),i.set(3),this.emit(gt),this},r.sync=function(t){return this.splides.push({splide:t}),t.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),t.Components.Sync.remount()),this},r.go=function(t){return this._C.Controller.go(t),this},r.on=function(t,e){return this.event.on(t,e),this},r.off=function(t){return this.event.off(t),this},r.emit=function(t){var e;return(e=this.event).emit.apply(e,[t].concat(a(arguments,1))),this},r.add=function(t,e){return this._C.Slides.add(t,e),this},r.remove=function(t){return this._C.Slides.remove(t),this},r.is=function(t){return this._o.type===t},r.refresh=function(){return this.emit(wt),this},r.destroy=function(t){void 0===t&&(t=!0);var e=this.event,n=this.state;return n.is(1)?Nt(this).on(gt,this.destroy.bind(this,t)):(D(this._C,(function(e){e.destroy&&e.destroy(t)}),!0),e.emit(kt),e.destroy(),t&&o(this.splides),n.set(7)),this},e=t,(n=[{key:"options",get:function(){return this._o},set:function(t){this._C.Media.set(t,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();Fe.defaults={},Fe.STATES={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};class Ie{constructor(t,e){this.emptyGlowImageTag="empty_glow_image",this.imagesPath=t,this.audioPath=e,this.currentPage=0,this.splideHandle=new Fe(".splide",{fixedHeight:window.innerHeight-20}).mount(),this.addPageResizeListener()}addPageResizeListener(){window.addEventListener("resize",(()=>{this.splideHandle.options.fixedHeight=window.innerHeight-20,this.splideHandle.refresh()}))}initializeBook(e){this.currentBookType=e.bookType,this.numberOfPages=e.pages.length,this.currentBookType===t.CuriousReader?this.initializeCuriousReaderBook(e):this.currentBookType===t.GDL&&this.initializeGDLBook(e)}initializeCuriousReaderBook(t){for(let e=0;e<t.pages.length;e++){const n=document.createElement("li");n.classList.add("splide__slide");for(let i=0;i<t.pages[e].visualElements.length;i++){let r=t.pages[e].visualElements[i];if("text"==r.type){let t=r;n.appendChild(this.createTextContainer(t))}else if("image"==r.type){let t=r;if(t.imageSource===this.emptyGlowImageTag)continue;n.appendChild(this.createImageContainer(t))}else if("audio"==r.type){let t=r;n.appendChild(this.createAudioContainer(t))}this.splideHandle.add(n)}}}createTextContainer(t){let e=document.createElement("div");return e.classList.add("cr-text"),e.style.position="absolute",e.style.webkitTextStroke="1px #303030",e.style.color="#FFFFFF",e.style.textShadow="0.1rem 0.15rem 0.1rem #303030",e.style.fontFamily="Quicksand",e.style.fontWeight="800",e.style.fontSize="1.7em",e.style.top=t.positionY+"%",e.style.left=t.positionX+"%",e.style.width=t.width+"%",e.style.height=t.height+"%",e.innerHTML=t.textContentAsHTML,e}createImageContainer(t){let e=document.createElement("div");e.classList.add("cr-image"),e.style.position="absolute",e.style.top=t.positionY+"%",e.style.left=t.positionX+"%",e.style.width=t.width+"%",e.style.height=t.height+"%";let n=document.createElement("img");return n.src=this.imagesPath+t.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",e.appendChild(n),e}createAudioContainer(t){let e=document.createElement("div");e.classList.add("cr-audio"),e.style.position="absolute";let n=document.createElement("audio");return n.src=this.audioPath+t.audioSrc.replace("audios/",""),n.controls=!1,e.appendChild(n),e}initializeGDLBook(t){for(let e=0;e<t.pages.length;e++){const n=document.createElement("li");n.classList.add("splide__slide");let i=document.createElement("div");i.classList.add("gdl-flex-container"),i.style.display="flex",i.style.flexDirection="column",i.style.justifyContent="center",i.style.alignItems="center",i.style.height="100%",i.style.width="100%",n.appendChild(i);for(let n=0;n<t.pages[e].visualElements.length;n++){let r=t.pages[e].visualElements[n];if("text"==r.type){let t=r,e=document.createElement("div");e.style.width="60%",e.classList.add("gdl-text"),e.style.webkitTextStroke="1px #303030",e.style.color="#FFFFFF",e.style.textShadow="0.1rem 0.15rem 0.1rem #303030",e.style.fontFamily="Quicksand",e.style.fontWeight="800",e.style.fontSize="1.7em",e.innerHTML=t.textContentAsHTML,i.appendChild(e)}else if("image"==r.type){let t=r,e=document.createElement("div");e.classList.add("gdl-image");let n=document.createElement("img");n.src=this.imagesPath+t.imageSource.replace("images/",""),n.style.width="100%",n.style.height="100%",e.appendChild(n),i.appendChild(e)}}this.splideHandle.add(n)}}goToNextPage(){this.transitioningToPage||(this.currentPage<this.numberOfPages&&this.currentPage++,this.transitionToPage(this.currentPage))}goToPreviousPage(){this.transitioningToPage||(this.currentPage>0&&this.currentPage--,this.transitionToPage(this.currentPage))}transitionToPage(t){this.transitioningToPage=!0}}try{self["workbox:window:6.5.3"]&&_()}catch(Me){}function Me(t,e){return new Promise((function(n){var i=new MessageChannel;i.port1.onmessage=function(t){n(t.data)},t.postMessage(e,[i.port2])}))}function ze(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function Oe(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return ze(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ze(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}try{self["workbox:core:6.5.3"]&&_()}catch(Me){}var Re=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))};function je(t,e){var n=location.href;return new URL(t,n).href===new URL(e,n).href}var Be=function(t,e){this.type=t,Object.assign(this,e)};function Ge(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function We(){}var He={type:"SKIP_WAITING"};function Xe(t,e){if(!e)return t&&t.then?t.then(We):Promise.resolve()}var Ue=function(t){var e,n;function i(e,n){var i,r;return void 0===n&&(n={}),(i=t.call(this)||this).nn={},i.tn=0,i.rn=new Re,i.en=new Re,i.on=new Re,i.un=0,i.an=new Set,i.cn=function(){var t=i.fn,e=t.installing;i.tn>0||!je(e.scriptURL,i.sn.toString())||performance.now()>i.un+6e4?(i.vn=e,t.removeEventListener("updatefound",i.cn)):(i.hn=e,i.an.add(e),i.rn.resolve(e)),++i.tn,e.addEventListener("statechange",i.ln)},i.ln=function(t){var e=i.fn,n=t.target,r=n.state,o=n===i.vn,a={sw:n,isExternal:o,originalEvent:t};!o&&i.mn&&(a.isUpdate=!0),i.dispatchEvent(new Be(r,a)),"installed"===r?i.wn=self.setTimeout((function(){"installed"===r&&e.waiting===n&&i.dispatchEvent(new Be("waiting",a))}),200):"activating"===r&&(clearTimeout(i.wn),o||i.en.resolve(n))},i.dn=function(t){var e=i.hn,n=e!==navigator.serviceWorker.controller;i.dispatchEvent(new Be("controlling",{isExternal:n,originalEvent:t,sw:e,isUpdate:i.mn})),n||i.on.resolve(e)},i.gn=(r=function(t){var e=t.data,n=t.ports,r=t.source;return Ge(i.getSW(),(function(){i.an.has(r)&&i.dispatchEvent(new Be("message",{data:e,originalEvent:t,ports:n,sw:r}))}))},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];try{return Promise.resolve(r.apply(this,t))}catch(t){return Promise.reject(t)}}),i.sn=e,i.nn=n,navigator.serviceWorker.addEventListener("message",i.gn),i}n=t,(e=i).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var r,o=i.prototype;return o.register=function(t){var e=(void 0===t?{}:t).immediate,n=void 0!==e&&e;try{var i=this;return function(t,e){var n=t();return n&&n.then?n.then(e):e()}((function(){if(!n&&"complete"!==document.readyState)return Xe(new Promise((function(t){return window.addEventListener("load",t)})))}),(function(){return i.mn=Boolean(navigator.serviceWorker.controller),i.yn=i.pn(),Ge(i.bn(),(function(t){i.fn=t,i.yn&&(i.hn=i.yn,i.en.resolve(i.yn),i.on.resolve(i.yn),i.yn.addEventListener("statechange",i.ln,{once:!0}));var e=i.fn.waiting;return e&&je(e.scriptURL,i.sn.toString())&&(i.hn=e,Promise.resolve().then((function(){i.dispatchEvent(new Be("waiting",{sw:e,wasWaitingBeforeRegister:!0}))})).then((function(){}))),i.hn&&(i.rn.resolve(i.hn),i.an.add(i.hn)),i.fn.addEventListener("updatefound",i.cn),navigator.serviceWorker.addEventListener("controllerchange",i.dn),i.fn}))}))}catch(t){return Promise.reject(t)}},o.update=function(){try{return this.fn?Xe(this.fn.update()):void 0}catch(t){return Promise.reject(t)}},o.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},o.messageSW=function(t){try{return Ge(this.getSW(),(function(e){return Me(e,t)}))}catch(t){return Promise.reject(t)}},o.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&Me(this.fn.waiting,He)},o.pn=function(){var t=navigator.serviceWorker.controller;return t&&je(t.scriptURL,this.sn.toString())?t:void 0},o.bn=function(){try{var t=this;return function(t,e){try{var n=t()}catch(t){return e(t)}return n&&n.then?n.then(void 0,e):n}((function(){return Ge(navigator.serviceWorker.register(t.sn,t.nn),(function(e){return t.un=performance.now(),e}))}),(function(t){throw t}))}catch(t){return Promise.reject(t)}},(r=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&function(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}(i.prototype,r),i}(function(){function t(){this.Pn=new Map}var e=t.prototype;return e.addEventListener=function(t,e){this.Sn(t).add(e)},e.removeEventListener=function(t,e){this.Sn(t).delete(e)},e.dispatchEvent=function(t){t.target=this;for(var e,n=Oe(this.Sn(t.type));!(e=n()).done;)(0,e.value)(t)},e.Sn=function(t){return this.Pn.has(t)||this.Pn.set(t,new Set),this.Pn.get(t)},t}()),Je=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}))};new class{constructor(t,e,i){this.cachedLanguages=new Map,this.lang="english",this.isCached="is_cached",this.contentFilePath=t,this.imagesPath=e,this.audioPath=i,this.contentParser=new n(t),this.playBackEngine=new Ie(e,i),this.broadcastChannel=new BroadcastChannel("my-channel"),null==localStorage.getItem(this.isCached)||localStorage.getItem(this.isCached)}initialize(){return Je(this,void 0,void 0,(function*(){let t=yield this.contentParser.parseBook();console.log("Dev App initialized!"),console.log(t),this.enforceLandscapeMode(),window.addEventListener("load",(()=>Je(this,void 0,void 0,(function*(){if("serviceWorker"in navigator){let t=new Ue("./sw.js",{});t.register().then((t=>{t.installing,this.readLanguageDataFromCacheAndNotifyAndroidApp()})),t.addEventListener("activated",(t=>{console.log("Service Worker installed, requesting a cache!")}))}})))),this.playBackEngine.initializeBook(t)}))}readLanguageDataFromCacheAndNotifyAndroidApp(){window.Android&&window.Android.cachedStatus(!0)}enforceLandscapeMode(){try{screen.orientation&&screen.orientation.lock&&screen.orientation.lock("landscape").then((()=>{console.log("Screen orientation locked to landscape!")})).catch((t=>{console.log("Screen orientation lock failed! Interface may not work as expected on mobile devices!")}))}catch(t){console.warn("Screen orientation lock not supported! Interface may not work as expected on mobile devices!")}}}("/BookContent/LetsFlyLevel2En/content/content.json","/BookContent/LetsFlyLevel2En/content/images/","/BookContent/LetsFlyLevel2En/content/audios/").initialize()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLaTRCLDhDQUE4QyxJQUd2REYsRUFBR3BwQixpQkFBaUIsYUFBY0wsSUFDOUI5TixRQUFRQyxJQUFJLGdEQUFnRCxJQXNCeEUsTUFFQVQsS0FBS3czQixlQUFlNUcsZUFBZWx3QixFQUN2QyxJQUVBdTNCLCtDQUVReHhCLE9BQU95eEIsU0FHUHp4QixPQUFPeXhCLFFBQVFDLGNBQWEsRUFFcEMsQ0FFQUwsdUJBQ0ksSUFDUU0sT0FBT0MsYUFBZUQsT0FBT0MsWUFBWUMsTUFDekNGLE9BQU9DLFlBQVlDLEtBQUssYUFBYWg0QixNQUFLLEtBQ3RDRSxRQUFRQyxJQUFJLDBDQUEwQyxJQUN2RE0sT0FBT0MsSUFDTlIsUUFBUUMsSUFBSSx3RkFBd0YsSUFHOUcsTUFBT08sR0FDTFIsUUFBUSszQixLQUFLLGdHQUVyQixHQU1tQixvREFDbkIsK0NBQ0EsZ0RBUUFWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vTW9kZWxzL0Jvb2sudHMiLCJ3ZWJwYWNrOi8vLy4vUGFyc2VyL0NvbnRlbnRQYXJzZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BzcGxpZGVqcy9zcGxpZGUvZGlzdC9qcy9zcGxpZGUuZXNtLmpzIiwid2VicGFjazovLy8uL1BsYXlCYWNrRW5naW5lL1BsYXlCYWNrRW5naW5lLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93b3JrYm94LXdpbmRvdy9idWlsZC93b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMiLCJ3ZWJwYWNrOi8vLy4vQXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBhZ2UgdHlwZSB0aGF0IGRlXHJcblxyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcIi4vUGFnZVwiO1xyXG5cclxuZXhwb3J0IGVudW0gQm9va1R5cGUge1xyXG4gICAgQ3VyaW91c1JlYWRlciA9IFwiQ3VyaW91c1JlYWRlclwiLFxyXG4gICAgR0RMID0gXCJHRExcIixcclxuICAgIFVua25vd24gPSBcIlVua25vd25cIixcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQm9vayA9IHtcclxuICAgIHBhZ2VzOiBQYWdlW107XHJcbiAgICBib29rVHlwZTogQm9va1R5cGU7XHJcbn0iLCJpbXBvcnQgeyBCb29rLCBCb29rVHlwZSwgUGFnZSwgVGV4dEVsZW1lbnQsIEltYWdlRWxlbWVudCwgQXVkaW9FbGVtZW50IH0gZnJvbSBcIi4uL01vZGVscy9Nb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb250ZW50UGFyc2VyIHtcclxuXHJcbiAgICBpbWFnZXNQYXRoOiBzdHJpbmc7XHJcbiAgICBhdWRpb1BhdGg6IHN0cmluZztcclxuICAgIGNvbnRlbnRGaWxlUGF0aDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnRlbnRKU09OOiBhbnk7XHJcblxyXG4gICAgZW1wdHlHbG93SW1hZ2VUYWc6IHN0cmluZyA9IFwiZW1wdHlfZ2xvd19pbWFnZVwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnRGaWxlUGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RmlsZVBhdGggPSBjb250ZW50RmlsZVBhdGg7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcGFyc2VCb29rICgpOiBQcm9taXNlPEJvb2s+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnNlQ29udGVudEpTT05GaWxlKCkudGhlbigoY29udGVudEpTT04pID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudEpTT04gPSBjb250ZW50SlNPTjtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29udGVudCBKU09OIGZpbGUgcGFyc2VkIVwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuY29udGVudEpTT04pO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBib29rOiBCb29rID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBib29rVHlwZTogdGhpcy5kZXRlcm1pbmVCb29rVHlwZSgpLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBib29rLnBhZ2VzID0gdGhpcy5wYXJzZVBhZ2VzKGJvb2spO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoYm9vayk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGV0ZXJtaW5lQm9va1R5cGUoKTogQm9va1R5cGUge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRKU09OW1wicHJlc2VudGF0aW9uXCJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEJvb2tUeXBlLkN1cmlvdXNSZWFkZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbnRlbnRKU09OW1wiY2hhcHRlcnNcIl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQm9va1R5cGUuR0RMO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCb29rVHlwZS5Vbmtub3duO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwYXJzZVBhZ2VzKGJvb2s6IEJvb2spOiBQYWdlW10ge1xyXG4gICAgICAgIGxldCBwYWdlczogUGFnZVtdID0gW107XHJcblxyXG4gICAgICAgIGlmIChib29rLmJvb2tUeXBlID09PSBCb29rVHlwZS5DdXJpb3VzUmVhZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBwYWdlc0pTT04gPSB0aGlzLmNvbnRlbnRKU09OW1wicHJlc2VudGF0aW9uXCJdW1wic2xpZGVzXCJdO1xyXG4gICAgICAgICAgICBsZXQgZ2xvYmFsRmlsbENvbG9yID0gdGhpcy5jb250ZW50SlNPTltcInByZXNlbnRhdGlvblwiXVtcImdsb2JhbEJhY2tncm91bmRTZWxlY3RvclwiXVtcImZpbGxHbG9iYWxCYWNrZ3JvdW5kXCJdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzSlNPTi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhZ2VKU09OID0gcGFnZXNKU09OW2ldO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhZ2U6IFBhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogZ2xvYmFsRmlsbENvbG9yLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHBhZ2UudmlzdWFsRWxlbWVudHMgPSB0aGlzLnBhcnNlUGFnZUNSKHBhZ2VKU09OKTtcclxuICAgICAgICAgICAgICAgIHBhZ2VzLnB1c2gocGFnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGJvb2suYm9va1R5cGUgPT09IEJvb2tUeXBlLkdETCkge1xyXG4gICAgICAgICAgICBsZXQgcGFnZXNKU09OID0gdGhpcy5jb250ZW50SlNPTltcImNoYXB0ZXJzXCJdO1xyXG4gICAgICAgICAgICBsZXQgZ2xvYmFsRmlsbENvbG9yID0gXCIjRkNGQ0YyXCI7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZXNKU09OLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZUpTT04gPSBwYWdlc0pTT05baV07XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZTogUGFnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50czogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBnbG9iYWxGaWxsQ29sb3IsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYWdlLnZpc3VhbEVsZW1lbnRzID0gdGhpcy5wYXJzZVBhZ2VHREwocGFnZUpTT04pO1xyXG4gICAgICAgICAgICAgICAgcGFnZXMucHVzaChwYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVW5rbm93biBib29rIHR5cGUhXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlUGFnZUNSKHBhZ2VKU09OOiBhbnkpOiBhbnlbXSB7XHJcbiAgICAgICAgbGV0IHZpc3VhbEVsZW1lbnRzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGxldCBlbGVtZW50c0pTT04gPSBwYWdlSlNPTltcImVsZW1lbnRzXCJdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHNKU09OLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBsaWJyYXJ5U3RyaW5nOiBzdHJpbmcgPSBlbGVtZW50c0pTT05baV1bXCJhY3Rpb25cIl1bXCJsaWJyYXJ5XCJdO1xyXG4gICAgICAgICAgICBpZiAobGlicmFyeVN0cmluZy5pbmNsdWRlcyhcIkFkdmFuY2VkVGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRleHRFbGVtZW50OiBUZXh0RWxlbWVudCA9IHRoaXMucGFyc2VUZXh0RWxlbWVudENSKGVsZW1lbnRzSlNPTltpXSk7XHJcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50cy5wdXNoKHRleHRFbGVtZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaWJyYXJ5U3RyaW5nLmluY2x1ZGVzKFwiSW1hZ2VcIikpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCA9IHRoaXMucGFyc2VJbWFnZUVsZW1lbnRDUihlbGVtZW50c0pTT05baV0pO1xyXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudHMucHVzaChpbWFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpYnJhcnlTdHJpbmcuaW5jbHVkZXMoXCJBdWRpb1wiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGlvRWxlbWVudDogQXVkaW9FbGVtZW50ID0gdGhpcy5wYXJzZUF1ZGlvRWxlbWVudENSKGVsZW1lbnRzSlNPTltpXSk7XHJcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50cy5wdXNoKGF1ZGlvRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2aXN1YWxFbGVtZW50cztcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZVBhZ2VHREwocGFnZUpTT046IGFueSk6IGFueVtdIHtcclxuICAgICAgICBsZXQgdmlzdWFsRWxlbWVudHM6IGFueVtdID0gW107XHJcbiAgICAgICAgbGV0IGVsZW1lbnRzSlNPTkFycmF5ID0gcGFnZUpTT05bXCJwYXJhbXNcIl1bXCJjb250ZW50XCJdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzSlNPTkFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBsaWJyYXJ5U3RyaW5nOiBzdHJpbmcgPSBlbGVtZW50c0pTT05BcnJheVtpXVtcImNvbnRlbnRcIl1bXCJsaWJyYXJ5XCJdO1xyXG4gICAgICAgICAgICBpZiAobGlicmFyeVN0cmluZy5pbmNsdWRlcyhcIkFkdmFuY2VkVGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRleHRFbGVtZW50OiBUZXh0RWxlbWVudCA9IHRoaXMucGFyc2VUZXh0RWxlbWVudEdETChlbGVtZW50c0pTT05BcnJheVtpXVtcImNvbnRlbnRcIl1bXCJwYXJhbXNcIl0pO1xyXG4gICAgICAgICAgICAgICAgdmlzdWFsRWxlbWVudHMucHVzaCh0ZXh0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlicmFyeVN0cmluZy5pbmNsdWRlcyhcIkltYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50OiBJbWFnZUVsZW1lbnQgPSB0aGlzLnBhcnNlSW1hZ2VFbGVtZW50R0RMKGVsZW1lbnRzSlNPTkFycmF5W2ldW1wiY29udGVudFwiXVtcInBhcmFtc1wiXSk7XHJcbiAgICAgICAgICAgICAgICB2aXN1YWxFbGVtZW50cy5wdXNoKGltYWdlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2aXN1YWxFbGVtZW50cztcclxuICAgIH1cclxuXHJcbiAgICBwYXJzZVRleHRFbGVtZW50Q1IoZWxlbWVudEpTT046IGFueSk6IFRleHRFbGVtZW50IHtcclxuICAgICAgICBsZXQgdGV4dEVsZW1lbnQ6IFRleHRFbGVtZW50ID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcInRleHRcIixcclxuICAgICAgICAgICAgcG9zaXRpb25YOiBlbGVtZW50SlNPTltcInhcIl0sXHJcbiAgICAgICAgICAgIHBvc2l0aW9uWTogZWxlbWVudEpTT05bXCJ5XCJdLFxyXG4gICAgICAgICAgICB3aWR0aDogZWxlbWVudEpTT05bXCJ3aWR0aFwiXSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBlbGVtZW50SlNPTltcImhlaWdodFwiXSxcclxuICAgICAgICAgICAgdGV4dENvbnRlbnRBc0hUTUw6IGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wicGFyYW1zXCJdW1widGV4dFwiXSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gdGV4dEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyc2VUZXh0RWxlbWVudEdETChlbGVtZW50SlNPTjogYW55KTogVGV4dEVsZW1lbnQge1xyXG4gICAgICAgIGxldCB0ZXh0RWxlbWVudDogVGV4dEVsZW1lbnQgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxyXG4gICAgICAgICAgICBwb3NpdGlvblg6IE5hTixcclxuICAgICAgICAgICAgcG9zaXRpb25ZOiBOYU4sXHJcbiAgICAgICAgICAgIHdpZHRoOiBOYU4sXHJcbiAgICAgICAgICAgIGhlaWdodDogTmFOLFxyXG4gICAgICAgICAgICB0ZXh0Q29udGVudEFzSFRNTDogZWxlbWVudEpTT05bXCJ0ZXh0XCJdLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRleHRFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlSW1hZ2VFbGVtZW50Q1IoZWxlbWVudEpTT046IGFueSk6IEltYWdlRWxlbWVudCB7XHJcbiAgICAgICAgbGV0IHBhdGg6IHN0cmluZyA9IFwiXCI7IDtcclxuICAgICAgICBpZiAoZWxlbWVudEpTT05bXCJhY3Rpb25cIl1bXCJwYXJhbXNcIl1bXCJmaWxlXCJdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGF0aCA9IHRoaXMuZW1wdHlHbG93SW1hZ2VUYWc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGF0aCA9IGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wicGFyYW1zXCJdW1wiZmlsZVwiXVtcInBhdGhcIl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCA9IHtcclxuICAgICAgICAgICAgdHlwZTogXCJpbWFnZVwiLFxyXG4gICAgICAgICAgICBwb3NpdGlvblg6IGVsZW1lbnRKU09OW1wieFwiXSxcclxuICAgICAgICAgICAgcG9zaXRpb25ZOiBlbGVtZW50SlNPTltcInlcIl0sXHJcbiAgICAgICAgICAgIHdpZHRoOiBlbGVtZW50SlNPTltcIndpZHRoXCJdLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnRKU09OW1wiaGVpZ2h0XCJdLFxyXG4gICAgICAgICAgICBpbWFnZVNvdXJjZTogcGF0aCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gaW1hZ2VFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlSW1hZ2VFbGVtZW50R0RMKGVsZW1lbnRKU09OOiBhbnkpOiBJbWFnZUVsZW1lbnQge1xyXG4gICAgICAgIGxldCBpbWFnZUVsZW1lbnQ6IEltYWdlRWxlbWVudCA9IHtcclxuICAgICAgICAgICAgdHlwZTogXCJpbWFnZVwiLFxyXG4gICAgICAgICAgICBwb3NpdGlvblg6IE5hTixcclxuICAgICAgICAgICAgcG9zaXRpb25ZOiBOYU4sXHJcbiAgICAgICAgICAgIHdpZHRoOiBlbGVtZW50SlNPTltcIndpZHRoXCJdLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnRKU09OW1wiaGVpZ2h0XCJdLFxyXG4gICAgICAgICAgICBpbWFnZVNvdXJjZTogZWxlbWVudEpTT05bXCJmaWxlXCJdW1wicGF0aFwiXSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBpbWFnZUVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyc2VBdWRpb0VsZW1lbnRDUihlbGVtZW50SlNPTjogYW55KTogQXVkaW9FbGVtZW50IHtcclxuICAgICAgICBsZXQgYXVkaW9FbGVtZW50OiBBdWRpb0VsZW1lbnQgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYXVkaW9cIixcclxuICAgICAgICAgICAgcG9zaXRpb25YOiBlbGVtZW50SlNPTltcInhcIl0sXHJcbiAgICAgICAgICAgIHBvc2l0aW9uWTogZWxlbWVudEpTT05bXCJ5XCJdLFxyXG4gICAgICAgICAgICB3aWR0aDogZWxlbWVudEpTT05bXCJ3aWR0aFwiXSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBlbGVtZW50SlNPTltcImhlaWdodFwiXSxcclxuICAgICAgICAgICAgYXVkaW9TcmM6IGVsZW1lbnRKU09OW1wiYWN0aW9uXCJdW1wicGFyYW1zXCJdW1wiZmlsZXNcIl1bMF1bXCJwYXRoXCJdLFxyXG4gICAgICAgICAgICBzdHlsZXM6IFwiXCIsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGF1ZGlvRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwYXJzZUNvbnRlbnRKU09ORmlsZSgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHRoaXMuY29udGVudEZpbGVQYXRoLCB0cnVlKTtcclxuICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcclxuICAgICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzdGF0dXMgPSB4aHIuc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0geGhyLnJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNwb25zZVtcImwxMG5cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc3BvbnNlW1wib3ZlcnJpZGVcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCh4aHIucmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIVxuICogU3BsaWRlLmpzXG4gKiBWZXJzaW9uICA6IDQuMS40XG4gKiBMaWNlbnNlICA6IE1JVFxuICogQ29weXJpZ2h0OiAyMDIyIE5hb3Rvc2hpIEZ1aml0YVxuICovXG52YXIgTUVESUFfUFJFRkVSU19SRURVQ0VEX01PVElPTiA9IFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSlcIjtcbnZhciBDUkVBVEVEID0gMTtcbnZhciBNT1VOVEVEID0gMjtcbnZhciBJRExFID0gMztcbnZhciBNT1ZJTkcgPSA0O1xudmFyIFNDUk9MTElORyA9IDU7XG52YXIgRFJBR0dJTkcgPSA2O1xudmFyIERFU1RST1lFRCA9IDc7XG52YXIgU1RBVEVTID0ge1xuICBDUkVBVEVEOiBDUkVBVEVELFxuICBNT1VOVEVEOiBNT1VOVEVELFxuICBJRExFOiBJRExFLFxuICBNT1ZJTkc6IE1PVklORyxcbiAgU0NST0xMSU5HOiBTQ1JPTExJTkcsXG4gIERSQUdHSU5HOiBEUkFHR0lORyxcbiAgREVTVFJPWUVEOiBERVNUUk9ZRURcbn07XG5cbmZ1bmN0aW9uIGVtcHR5KGFycmF5KSB7XG4gIGFycmF5Lmxlbmd0aCA9IDA7XG59XG5cbmZ1bmN0aW9uIHNsaWNlKGFycmF5TGlrZSwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXlMaWtlLCBzdGFydCwgZW5kKTtcbn1cblxuZnVuY3Rpb24gYXBwbHkoZnVuYykge1xuICByZXR1cm4gZnVuYy5iaW5kLmFwcGx5KGZ1bmMsIFtudWxsXS5jb25jYXQoc2xpY2UoYXJndW1lbnRzLCAxKSkpO1xufVxuXG52YXIgbmV4dFRpY2sgPSBzZXRUaW1lb3V0O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gcmFmKGZ1bmMpIHtcbiAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jKTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mKHR5cGUsIHN1YmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSB0eXBlO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChzdWJqZWN0KSB7XG4gIHJldHVybiAhaXNOdWxsKHN1YmplY3QpICYmIHR5cGVPZihcIm9iamVjdFwiLCBzdWJqZWN0KTtcbn1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGlzRnVuY3Rpb24gPSBhcHBseSh0eXBlT2YsIFwiZnVuY3Rpb25cIik7XG52YXIgaXNTdHJpbmcgPSBhcHBseSh0eXBlT2YsIFwic3RyaW5nXCIpO1xudmFyIGlzVW5kZWZpbmVkID0gYXBwbHkodHlwZU9mLCBcInVuZGVmaW5lZFwiKTtcblxuZnVuY3Rpb24gaXNOdWxsKHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgPT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQoc3ViamVjdCkge1xuICB0cnkge1xuICAgIHJldHVybiBzdWJqZWN0IGluc3RhbmNlb2YgKHN1YmplY3Qub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLkhUTUxFbGVtZW50O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgdG9BcnJheSh2YWx1ZXMpLmZvckVhY2goaXRlcmF0ZWUpO1xufVxuXG5mdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFycmF5LmluZGV4T2YodmFsdWUpID4gLTE7XG59XG5cbmZ1bmN0aW9uIHB1c2goYXJyYXksIGl0ZW1zKSB7XG4gIGFycmF5LnB1c2guYXBwbHkoYXJyYXksIHRvQXJyYXkoaXRlbXMpKTtcbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhlbG0sIGNsYXNzZXMsIGFkZCkge1xuICBpZiAoZWxtKSB7XG4gICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgZWxtLmNsYXNzTGlzdFthZGQgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0obmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWxtLCBjbGFzc2VzKSB7XG4gIHRvZ2dsZUNsYXNzKGVsbSwgaXNTdHJpbmcoY2xhc3NlcykgPyBjbGFzc2VzLnNwbGl0KFwiIFwiKSA6IGNsYXNzZXMsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmQocGFyZW50LCBjaGlsZHJlbikge1xuICBmb3JFYWNoKGNoaWxkcmVuLCBwYXJlbnQuYXBwZW5kQ2hpbGQuYmluZChwYXJlbnQpKTtcbn1cblxuZnVuY3Rpb24gYmVmb3JlKG5vZGVzLCByZWYpIHtcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgcGFyZW50ID0gKHJlZiB8fCBub2RlKS5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCByZWYpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoZWxtLCBzZWxlY3Rvcikge1xuICByZXR1cm4gaXNIVE1MRWxlbWVudChlbG0pICYmIChlbG1bXCJtc01hdGNoZXNTZWxlY3RvclwiXSB8fCBlbG0ubWF0Y2hlcykuY2FsbChlbG0sIHNlbGVjdG9yKTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICB2YXIgY2hpbGRyZW4yID0gcGFyZW50ID8gc2xpY2UocGFyZW50LmNoaWxkcmVuKSA6IFtdO1xuICByZXR1cm4gc2VsZWN0b3IgPyBjaGlsZHJlbjIuZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBtYXRjaGVzKGNoaWxkLCBzZWxlY3Rvcik7XG4gIH0pIDogY2hpbGRyZW4yO1xufVxuXG5mdW5jdGlvbiBjaGlsZChwYXJlbnQsIHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA/IGNoaWxkcmVuKHBhcmVudCwgc2VsZWN0b3IpWzBdIDogcGFyZW50LmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG52YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzO1xuXG5mdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSwgcmlnaHQpIHtcbiAgaWYgKG9iamVjdCkge1xuICAgIChyaWdodCA/IG93bktleXMob2JqZWN0KS5yZXZlcnNlKCkgOiBvd25LZXlzKG9iamVjdCkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAga2V5ICE9PSBcIl9fcHJvdG9fX1wiICYmIGl0ZXJhdGVlKG9iamVjdFtrZXldLCBrZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gYXNzaWduKG9iamVjdCkge1xuICBzbGljZShhcmd1bWVudHMsIDEpLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGZvck93bihzb3VyY2UsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gbWVyZ2Uob2JqZWN0KSB7XG4gIHNsaWNlKGFyZ3VtZW50cywgMSkuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgZm9yT3duKHNvdXJjZSwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlLnNsaWNlKCk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IG1lcmdlKHt9LCBpc09iamVjdChvYmplY3Rba2V5XSkgPyBvYmplY3Rba2V5XSA6IHt9LCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gb21pdChvYmplY3QsIGtleXMpIHtcbiAgZm9yRWFjaChrZXlzIHx8IG93bktleXMob2JqZWN0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0dHJpYnV0ZShlbG1zLCBhdHRycykge1xuICBmb3JFYWNoKGVsbXMsIGZ1bmN0aW9uIChlbG0pIHtcbiAgICBmb3JFYWNoKGF0dHJzLCBmdW5jdGlvbiAoYXR0cikge1xuICAgICAgZWxtICYmIGVsbS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGUoZWxtcywgYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChpc09iamVjdChhdHRycykpIHtcbiAgICBmb3JPd24oYXR0cnMsIGZ1bmN0aW9uICh2YWx1ZTIsIG5hbWUpIHtcbiAgICAgIHNldEF0dHJpYnV0ZShlbG1zLCBuYW1lLCB2YWx1ZTIpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGZvckVhY2goZWxtcywgZnVuY3Rpb24gKGVsbSkge1xuICAgICAgaXNOdWxsKHZhbHVlKSB8fCB2YWx1ZSA9PT0gXCJcIiA/IHJlbW92ZUF0dHJpYnV0ZShlbG0sIGF0dHJzKSA6IGVsbS5zZXRBdHRyaWJ1dGUoYXR0cnMsIFN0cmluZyh2YWx1ZSkpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZSh0YWcsIGF0dHJzLCBwYXJlbnQpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcblxuICBpZiAoYXR0cnMpIHtcbiAgICBpc1N0cmluZyhhdHRycykgPyBhZGRDbGFzcyhlbG0sIGF0dHJzKSA6IHNldEF0dHJpYnV0ZShlbG0sIGF0dHJzKTtcbiAgfVxuXG4gIHBhcmVudCAmJiBhcHBlbmQocGFyZW50LCBlbG0pO1xuICByZXR1cm4gZWxtO1xufVxuXG5mdW5jdGlvbiBzdHlsZShlbG0sIHByb3AsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbG0pW3Byb3BdO1xuICB9XG5cbiAgaWYgKCFpc051bGwodmFsdWUpKSB7XG4gICAgZWxtLnN0eWxlW3Byb3BdID0gXCJcIiArIHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXkoZWxtLCBkaXNwbGF5Mikge1xuICBzdHlsZShlbG0sIFwiZGlzcGxheVwiLCBkaXNwbGF5Mik7XG59XG5cbmZ1bmN0aW9uIGZvY3VzKGVsbSkge1xuICBlbG1bXCJzZXRBY3RpdmVcIl0gJiYgZWxtW1wic2V0QWN0aXZlXCJdKCkgfHwgZWxtLmZvY3VzKHtcbiAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUoZWxtLCBhdHRyKSB7XG4gIHJldHVybiBlbG0uZ2V0QXR0cmlidXRlKGF0dHIpO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyhlbG0sIGNsYXNzTmFtZSkge1xuICByZXR1cm4gZWxtICYmIGVsbS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbn1cblxuZnVuY3Rpb24gcmVjdCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG5vZGVzKSB7XG4gIGZvckVhY2gobm9kZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIdG1sKGh0bWwpIHtcbiAgcmV0dXJuIGNoaWxkKG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIikuYm9keSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnQoZSwgc3RvcFByb3BhZ2F0aW9uKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcblxuICBpZiAoc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5KHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHBhcmVudCAmJiBwYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5QWxsKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID8gc2xpY2UocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKSA6IFtdO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzcyhlbG0sIGNsYXNzZXMpIHtcbiAgdG9nZ2xlQ2xhc3MoZWxtLCBjbGFzc2VzLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHRpbWVPZihlKSB7XG4gIHJldHVybiBlLnRpbWVTdGFtcDtcbn1cblxuZnVuY3Rpb24gdW5pdCh2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUgOiB2YWx1ZSA/IHZhbHVlICsgXCJweFwiIDogXCJcIjtcbn1cblxudmFyIFBST0pFQ1RfQ09ERSA9IFwic3BsaWRlXCI7XG52YXIgREFUQV9BVFRSSUJVVEUgPSBcImRhdGEtXCIgKyBQUk9KRUNUX0NPREU7XG5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbXCIgKyBQUk9KRUNUX0NPREUgKyBcIl0gXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XG4gIH1cbn1cblxudmFyIG1pbiA9IE1hdGgubWluLFxuICAgIG1heCA9IE1hdGgubWF4LFxuICAgIGZsb29yID0gTWF0aC5mbG9vcixcbiAgICBjZWlsID0gTWF0aC5jZWlsLFxuICAgIGFicyA9IE1hdGguYWJzO1xuXG5mdW5jdGlvbiBhcHByb3hpbWF0ZWx5RXF1YWwoeCwgeSwgZXBzaWxvbikge1xuICByZXR1cm4gYWJzKHggLSB5KSA8IGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIGJldHdlZW4obnVtYmVyLCB4LCB5LCBleGNsdXNpdmUpIHtcbiAgdmFyIG1pbmltdW0gPSBtaW4oeCwgeSk7XG4gIHZhciBtYXhpbXVtID0gbWF4KHgsIHkpO1xuICByZXR1cm4gZXhjbHVzaXZlID8gbWluaW11bSA8IG51bWJlciAmJiBudW1iZXIgPCBtYXhpbXVtIDogbWluaW11bSA8PSBudW1iZXIgJiYgbnVtYmVyIDw9IG1heGltdW07XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG51bWJlciwgeCwgeSkge1xuICB2YXIgbWluaW11bSA9IG1pbih4LCB5KTtcbiAgdmFyIG1heGltdW0gPSBtYXgoeCwgeSk7XG4gIHJldHVybiBtaW4obWF4KG1pbmltdW0sIG51bWJlciksIG1heGltdW0pO1xufVxuXG5mdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuICsoeCA+IDApIC0gKyh4IDwgMCk7XG59XG5cbmZ1bmN0aW9uIGNhbWVsVG9LZWJhYihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzdHJpbmcsIHJlcGxhY2VtZW50cykge1xuICBmb3JFYWNoKHJlcGxhY2VtZW50cywgZnVuY3Rpb24gKHJlcGxhY2VtZW50KSB7XG4gICAgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoXCIlc1wiLCBcIlwiICsgcmVwbGFjZW1lbnQpO1xuICB9KTtcbiAgcmV0dXJuIHN0cmluZztcbn1cblxuZnVuY3Rpb24gcGFkKG51bWJlcikge1xuICByZXR1cm4gbnVtYmVyIDwgMTAgPyBcIjBcIiArIG51bWJlciA6IFwiXCIgKyBudW1iZXI7XG59XG5cbnZhciBpZHMgPSB7fTtcblxuZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gIHJldHVybiBcIlwiICsgcHJlZml4ICsgcGFkKGlkc1twcmVmaXhdID0gKGlkc1twcmVmaXhdIHx8IDApICsgMSk7XG59XG5cbmZ1bmN0aW9uIEV2ZW50QmluZGVyKCkge1xuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYmluZCh0YXJnZXRzLCBldmVudHMsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgZm9yRWFjaEV2ZW50KHRhcmdldHMsIGV2ZW50cywgZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQsIG5hbWVzcGFjZSkge1xuICAgICAgdmFyIGlzRXZlbnRUYXJnZXQgPSAoXCJhZGRFdmVudExpc3RlbmVyXCIgaW4gdGFyZ2V0KTtcbiAgICAgIHZhciByZW1vdmVyID0gaXNFdmVudFRhcmdldCA/IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyLmJpbmQodGFyZ2V0LCBldmVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIDogdGFyZ2V0W1wicmVtb3ZlTGlzdGVuZXJcIl0uYmluZCh0YXJnZXQsIGNhbGxiYWNrKTtcbiAgICAgIGlzRXZlbnRUYXJnZXQgPyB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIG9wdGlvbnMpIDogdGFyZ2V0W1wiYWRkTGlzdGVuZXJcIl0oY2FsbGJhY2spO1xuICAgICAgbGlzdGVuZXJzLnB1c2goW3RhcmdldCwgZXZlbnQsIG5hbWVzcGFjZSwgY2FsbGJhY2ssIHJlbW92ZXJdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuYmluZCh0YXJnZXRzLCBldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgZm9yRWFjaEV2ZW50KHRhcmdldHMsIGV2ZW50cywgZnVuY3Rpb24gKHRhcmdldCwgZXZlbnQsIG5hbWVzcGFjZSkge1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKGxpc3RlbmVyWzBdID09PSB0YXJnZXQgJiYgbGlzdGVuZXJbMV0gPT09IGV2ZW50ICYmIGxpc3RlbmVyWzJdID09PSBuYW1lc3BhY2UgJiYgKCFjYWxsYmFjayB8fCBsaXN0ZW5lclszXSA9PT0gY2FsbGJhY2spKSB7XG4gICAgICAgICAgbGlzdGVuZXJbNF0oKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2godGFyZ2V0LCB0eXBlLCBkZXRhaWwpIHtcbiAgICB2YXIgZTtcbiAgICB2YXIgYnViYmxlcyA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIEN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGUgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICBkZXRhaWw6IGRldGFpbFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgYnViYmxlcywgZmFsc2UsIGRldGFpbCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JFYWNoRXZlbnQodGFyZ2V0cywgZXZlbnRzLCBpdGVyYXRlZSkge1xuICAgIGZvckVhY2godGFyZ2V0cywgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgdGFyZ2V0ICYmIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbiAoZXZlbnRzMikge1xuICAgICAgICBldmVudHMyLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5TKSB7XG4gICAgICAgICAgdmFyIGZyYWdtZW50ID0gZXZlbnROUy5zcGxpdChcIi5cIik7XG4gICAgICAgICAgaXRlcmF0ZWUodGFyZ2V0LCBmcmFnbWVudFswXSwgZnJhZ21lbnRbMV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgZGF0YVs0XSgpO1xuICAgIH0pO1xuICAgIGVtcHR5KGxpc3RlbmVycyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJpbmQ6IGJpbmQsXG4gICAgdW5iaW5kOiB1bmJpbmQsXG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfTtcbn1cblxudmFyIEVWRU5UX01PVU5URUQgPSBcIm1vdW50ZWRcIjtcbnZhciBFVkVOVF9SRUFEWSA9IFwicmVhZHlcIjtcbnZhciBFVkVOVF9NT1ZFID0gXCJtb3ZlXCI7XG52YXIgRVZFTlRfTU9WRUQgPSBcIm1vdmVkXCI7XG52YXIgRVZFTlRfQ0xJQ0sgPSBcImNsaWNrXCI7XG52YXIgRVZFTlRfQUNUSVZFID0gXCJhY3RpdmVcIjtcbnZhciBFVkVOVF9JTkFDVElWRSA9IFwiaW5hY3RpdmVcIjtcbnZhciBFVkVOVF9WSVNJQkxFID0gXCJ2aXNpYmxlXCI7XG52YXIgRVZFTlRfSElEREVOID0gXCJoaWRkZW5cIjtcbnZhciBFVkVOVF9SRUZSRVNIID0gXCJyZWZyZXNoXCI7XG52YXIgRVZFTlRfVVBEQVRFRCA9IFwidXBkYXRlZFwiO1xudmFyIEVWRU5UX1JFU0laRSA9IFwicmVzaXplXCI7XG52YXIgRVZFTlRfUkVTSVpFRCA9IFwicmVzaXplZFwiO1xudmFyIEVWRU5UX0RSQUcgPSBcImRyYWdcIjtcbnZhciBFVkVOVF9EUkFHR0lORyA9IFwiZHJhZ2dpbmdcIjtcbnZhciBFVkVOVF9EUkFHR0VEID0gXCJkcmFnZ2VkXCI7XG52YXIgRVZFTlRfU0NST0xMID0gXCJzY3JvbGxcIjtcbnZhciBFVkVOVF9TQ1JPTExFRCA9IFwic2Nyb2xsZWRcIjtcbnZhciBFVkVOVF9PVkVSRkxPVyA9IFwib3ZlcmZsb3dcIjtcbnZhciBFVkVOVF9ERVNUUk9ZID0gXCJkZXN0cm95XCI7XG52YXIgRVZFTlRfQVJST1dTX01PVU5URUQgPSBcImFycm93czptb3VudGVkXCI7XG52YXIgRVZFTlRfQVJST1dTX1VQREFURUQgPSBcImFycm93czp1cGRhdGVkXCI7XG52YXIgRVZFTlRfUEFHSU5BVElPTl9NT1VOVEVEID0gXCJwYWdpbmF0aW9uOm1vdW50ZWRcIjtcbnZhciBFVkVOVF9QQUdJTkFUSU9OX1VQREFURUQgPSBcInBhZ2luYXRpb246dXBkYXRlZFwiO1xudmFyIEVWRU5UX05BVklHQVRJT05fTU9VTlRFRCA9IFwibmF2aWdhdGlvbjptb3VudGVkXCI7XG52YXIgRVZFTlRfQVVUT1BMQVlfUExBWSA9IFwiYXV0b3BsYXk6cGxheVwiO1xudmFyIEVWRU5UX0FVVE9QTEFZX1BMQVlJTkcgPSBcImF1dG9wbGF5OnBsYXlpbmdcIjtcbnZhciBFVkVOVF9BVVRPUExBWV9QQVVTRSA9IFwiYXV0b3BsYXk6cGF1c2VcIjtcbnZhciBFVkVOVF9MQVpZTE9BRF9MT0FERUQgPSBcImxhenlsb2FkOmxvYWRlZFwiO1xudmFyIEVWRU5UX1NMSURFX0tFWURPV04gPSBcInNrXCI7XG52YXIgRVZFTlRfU0hJRlRFRCA9IFwic2hcIjtcbnZhciBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRCA9IFwiZWlcIjtcblxuZnVuY3Rpb24gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMikge1xuICB2YXIgYnVzID0gU3BsaWRlMiA/IFNwbGlkZTIuZXZlbnQuYnVzIDogZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICB2YXIgYmluZGVyID0gRXZlbnRCaW5kZXIoKTtcblxuICBmdW5jdGlvbiBvbihldmVudHMsIGNhbGxiYWNrKSB7XG4gICAgYmluZGVyLmJpbmQoYnVzLCB0b0FycmF5KGV2ZW50cykuam9pbihcIiBcIiksIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjYWxsYmFjay5hcHBseShjYWxsYmFjaywgaXNBcnJheShlLmRldGFpbCkgPyBlLmRldGFpbCA6IFtdKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICBiaW5kZXIuZGlzcGF0Y2goYnVzLCBldmVudCwgc2xpY2UoYXJndW1lbnRzLCAxKSk7XG4gIH1cblxuICBpZiAoU3BsaWRlMikge1xuICAgIFNwbGlkZTIuZXZlbnQub24oRVZFTlRfREVTVFJPWSwgYmluZGVyLmRlc3Ryb3kpO1xuICB9XG5cbiAgcmV0dXJuIGFzc2lnbihiaW5kZXIsIHtcbiAgICBidXM6IGJ1cyxcbiAgICBvbjogb24sXG4gICAgb2ZmOiBhcHBseShiaW5kZXIudW5iaW5kLCBidXMpLFxuICAgIGVtaXQ6IGVtaXRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIFJlcXVlc3RJbnRlcnZhbChpbnRlcnZhbCwgb25JbnRlcnZhbCwgb25VcGRhdGUsIGxpbWl0KSB7XG4gIHZhciBub3cgPSBEYXRlLm5vdztcbiAgdmFyIHN0YXJ0VGltZTtcbiAgdmFyIHJhdGUgPSAwO1xuICB2YXIgaWQ7XG4gIHZhciBwYXVzZWQgPSB0cnVlO1xuICB2YXIgY291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIXBhdXNlZCkge1xuICAgICAgcmF0ZSA9IGludGVydmFsID8gbWluKChub3coKSAtIHN0YXJ0VGltZSkgLyBpbnRlcnZhbCwgMSkgOiAxO1xuICAgICAgb25VcGRhdGUgJiYgb25VcGRhdGUocmF0ZSk7XG5cbiAgICAgIGlmIChyYXRlID49IDEpIHtcbiAgICAgICAgb25JbnRlcnZhbCgpO1xuICAgICAgICBzdGFydFRpbWUgPSBub3coKTtcblxuICAgICAgICBpZiAobGltaXQgJiYgKytjb3VudCA+PSBsaW1pdCkge1xuICAgICAgICAgIHJldHVybiBwYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlkID0gcmFmKHVwZGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQocmVzdW1lKSB7XG4gICAgcmVzdW1lIHx8IGNhbmNlbCgpO1xuICAgIHN0YXJ0VGltZSA9IG5vdygpIC0gKHJlc3VtZSA/IHJhdGUgKiBpbnRlcnZhbCA6IDApO1xuICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgIGlkID0gcmFmKHVwZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBwYXVzZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV3aW5kKCkge1xuICAgIHN0YXJ0VGltZSA9IG5vdygpO1xuICAgIHJhdGUgPSAwO1xuXG4gICAgaWYgKG9uVXBkYXRlKSB7XG4gICAgICBvblVwZGF0ZShyYXRlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWQgJiYgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpO1xuICAgIHJhdGUgPSAwO1xuICAgIGlkID0gMDtcbiAgICBwYXVzZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0KHRpbWUpIHtcbiAgICBpbnRlcnZhbCA9IHRpbWU7XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdXNlZCgpIHtcbiAgICByZXR1cm4gcGF1c2VkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgcmV3aW5kOiByZXdpbmQsXG4gICAgcGF1c2U6IHBhdXNlLFxuICAgIGNhbmNlbDogY2FuY2VsLFxuICAgIHNldDogc2V0LFxuICAgIGlzUGF1c2VkOiBpc1BhdXNlZFxuICB9O1xufVxuXG5mdW5jdGlvbiBTdGF0ZShpbml0aWFsU3RhdGUpIHtcbiAgdmFyIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gIGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIHN0YXRlID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBpcyhzdGF0ZXMpIHtcbiAgICByZXR1cm4gaW5jbHVkZXModG9BcnJheShzdGF0ZXMpLCBzdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldDogc2V0LFxuICAgIGlzOiBpc1xuICB9O1xufVxuXG5mdW5jdGlvbiBUaHJvdHRsZShmdW5jLCBkdXJhdGlvbikge1xuICB2YXIgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoZHVyYXRpb24gfHwgMCwgZnVuYywgbnVsbCwgMSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW50ZXJ2YWwuaXNQYXVzZWQoKSAmJiBpbnRlcnZhbC5zdGFydCgpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBNZWRpYShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSBTcGxpZGUyLnN0YXRlO1xuICB2YXIgYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzIHx8IHt9O1xuICB2YXIgcmVkdWNlZE1vdGlvbiA9IG9wdGlvbnMucmVkdWNlZE1vdGlvbiB8fCB7fTtcbiAgdmFyIGJpbmRlciA9IEV2ZW50QmluZGVyKCk7XG4gIHZhciBxdWVyaWVzID0gW107XG5cbiAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdmFyIGlzTWluID0gb3B0aW9ucy5tZWRpYVF1ZXJ5ID09PSBcIm1pblwiO1xuICAgIG93bktleXMoYnJlYWtwb2ludHMpLnNvcnQoZnVuY3Rpb24gKG4sIG0pIHtcbiAgICAgIHJldHVybiBpc01pbiA/ICtuIC0gK20gOiArbSAtICtuO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmVnaXN0ZXIoYnJlYWtwb2ludHNba2V5XSwgXCIoXCIgKyAoaXNNaW4gPyBcIm1pblwiIDogXCJtYXhcIikgKyBcIi13aWR0aDpcIiArIGtleSArIFwicHgpXCIpO1xuICAgIH0pO1xuICAgIHJlZ2lzdGVyKHJlZHVjZWRNb3Rpb24sIE1FRElBX1BSRUZFUlNfUkVEVUNFRF9NT1RJT04pO1xuICAgIHVwZGF0ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveShjb21wbGV0ZWx5KSB7XG4gICAgaWYgKGNvbXBsZXRlbHkpIHtcbiAgICAgIGJpbmRlci5kZXN0cm95KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIob3B0aW9uczIsIHF1ZXJ5KSB7XG4gICAgdmFyIHF1ZXJ5TGlzdCA9IG1hdGNoTWVkaWEocXVlcnkpO1xuICAgIGJpbmRlci5iaW5kKHF1ZXJ5TGlzdCwgXCJjaGFuZ2VcIiwgdXBkYXRlKTtcbiAgICBxdWVyaWVzLnB1c2goW29wdGlvbnMyLCBxdWVyeUxpc3RdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgZGVzdHJveWVkID0gc3RhdGUuaXMoREVTVFJPWUVEKTtcbiAgICB2YXIgZGlyZWN0aW9uID0gb3B0aW9ucy5kaXJlY3Rpb247XG4gICAgdmFyIG1lcmdlZCA9IHF1ZXJpZXMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQyLCBlbnRyeSkge1xuICAgICAgcmV0dXJuIG1lcmdlKG1lcmdlZDIsIGVudHJ5WzFdLm1hdGNoZXMgPyBlbnRyeVswXSA6IHt9KTtcbiAgICB9LCB7fSk7XG4gICAgb21pdChvcHRpb25zKTtcbiAgICBzZXQobWVyZ2VkKTtcblxuICAgIGlmIChvcHRpb25zLmRlc3Ryb3kpIHtcbiAgICAgIFNwbGlkZTIuZGVzdHJveShvcHRpb25zLmRlc3Ryb3kgPT09IFwiY29tcGxldGVseVwiKTtcbiAgICB9IGVsc2UgaWYgKGRlc3Ryb3llZCkge1xuICAgICAgZGVzdHJveSh0cnVlKTtcbiAgICAgIFNwbGlkZTIubW91bnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlyZWN0aW9uICE9PSBvcHRpb25zLmRpcmVjdGlvbiAmJiBTcGxpZGUyLnJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWR1Y2UoZW5hYmxlKSB7XG4gICAgaWYgKG1hdGNoTWVkaWEoTUVESUFfUFJFRkVSU19SRURVQ0VEX01PVElPTikubWF0Y2hlcykge1xuICAgICAgZW5hYmxlID8gbWVyZ2Uob3B0aW9ucywgcmVkdWNlZE1vdGlvbikgOiBvbWl0KG9wdGlvbnMsIG93bktleXMocmVkdWNlZE1vdGlvbikpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldChvcHRzLCBiYXNlLCBub3RpZnkpIHtcbiAgICBtZXJnZShvcHRpb25zLCBvcHRzKTtcbiAgICBiYXNlICYmIG1lcmdlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvcHRpb25zKSwgb3B0cyk7XG5cbiAgICBpZiAobm90aWZ5IHx8ICFzdGF0ZS5pcyhDUkVBVEVEKSkge1xuICAgICAgU3BsaWRlMi5lbWl0KEVWRU5UX1VQREFURUQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dXA6IHNldHVwLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgcmVkdWNlOiByZWR1Y2UsXG4gICAgc2V0OiBzZXRcbiAgfTtcbn1cblxudmFyIEFSUk9XID0gXCJBcnJvd1wiO1xudmFyIEFSUk9XX0xFRlQgPSBBUlJPVyArIFwiTGVmdFwiO1xudmFyIEFSUk9XX1JJR0hUID0gQVJST1cgKyBcIlJpZ2h0XCI7XG52YXIgQVJST1dfVVAgPSBBUlJPVyArIFwiVXBcIjtcbnZhciBBUlJPV19ET1dOID0gQVJST1cgKyBcIkRvd25cIjtcbnZhciBMVFIgPSBcImx0clwiO1xudmFyIFJUTCA9IFwicnRsXCI7XG52YXIgVFRCID0gXCJ0dGJcIjtcbnZhciBPUklFTlRBVElPTl9NQVAgPSB7XG4gIHdpZHRoOiBbXCJoZWlnaHRcIl0sXG4gIGxlZnQ6IFtcInRvcFwiLCBcInJpZ2h0XCJdLFxuICByaWdodDogW1wiYm90dG9tXCIsIFwibGVmdFwiXSxcbiAgeDogW1wieVwiXSxcbiAgWDogW1wiWVwiXSxcbiAgWTogW1wiWFwiXSxcbiAgQXJyb3dMZWZ0OiBbQVJST1dfVVAsIEFSUk9XX1JJR0hUXSxcbiAgQXJyb3dSaWdodDogW0FSUk9XX0RPV04sIEFSUk9XX0xFRlRdXG59O1xuXG5mdW5jdGlvbiBEaXJlY3Rpb24oU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgZnVuY3Rpb24gcmVzb2x2ZShwcm9wLCBheGlzT25seSwgZGlyZWN0aW9uKSB7XG4gICAgZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIHZhciBpbmRleCA9IGRpcmVjdGlvbiA9PT0gUlRMICYmICFheGlzT25seSA/IDEgOiBkaXJlY3Rpb24gPT09IFRUQiA/IDAgOiAtMTtcbiAgICByZXR1cm4gT1JJRU5UQVRJT05fTUFQW3Byb3BdICYmIE9SSUVOVEFUSU9OX01BUFtwcm9wXVtpbmRleF0gfHwgcHJvcC5yZXBsYWNlKC93aWR0aHxsZWZ0fHJpZ2h0L2ksIGZ1bmN0aW9uIChtYXRjaCwgb2Zmc2V0KSB7XG4gICAgICB2YXIgcmVwbGFjZW1lbnQgPSBPUklFTlRBVElPTl9NQVBbbWF0Y2gudG9Mb3dlckNhc2UoKV1baW5kZXhdIHx8IG1hdGNoO1xuICAgICAgcmV0dXJuIG9mZnNldCA+IDAgPyByZXBsYWNlbWVudC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHJlcGxhY2VtZW50LnNsaWNlKDEpIDogcmVwbGFjZW1lbnQ7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvcmllbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgKiAob3B0aW9ucy5kaXJlY3Rpb24gPT09IFJUTCA/IDEgOiAtMSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgb3JpZW50OiBvcmllbnRcbiAgfTtcbn1cblxudmFyIFJPTEUgPSBcInJvbGVcIjtcbnZhciBUQUJfSU5ERVggPSBcInRhYmluZGV4XCI7XG52YXIgRElTQUJMRUQgPSBcImRpc2FibGVkXCI7XG52YXIgQVJJQV9QUkVGSVggPSBcImFyaWEtXCI7XG52YXIgQVJJQV9DT05UUk9MUyA9IEFSSUFfUFJFRklYICsgXCJjb250cm9sc1wiO1xudmFyIEFSSUFfQ1VSUkVOVCA9IEFSSUFfUFJFRklYICsgXCJjdXJyZW50XCI7XG52YXIgQVJJQV9TRUxFQ1RFRCA9IEFSSUFfUFJFRklYICsgXCJzZWxlY3RlZFwiO1xudmFyIEFSSUFfTEFCRUwgPSBBUklBX1BSRUZJWCArIFwibGFiZWxcIjtcbnZhciBBUklBX0xBQkVMTEVEQlkgPSBBUklBX1BSRUZJWCArIFwibGFiZWxsZWRieVwiO1xudmFyIEFSSUFfSElEREVOID0gQVJJQV9QUkVGSVggKyBcImhpZGRlblwiO1xudmFyIEFSSUFfT1JJRU5UQVRJT04gPSBBUklBX1BSRUZJWCArIFwib3JpZW50YXRpb25cIjtcbnZhciBBUklBX1JPTEVERVNDUklQVElPTiA9IEFSSUFfUFJFRklYICsgXCJyb2xlZGVzY3JpcHRpb25cIjtcbnZhciBBUklBX0xJVkUgPSBBUklBX1BSRUZJWCArIFwibGl2ZVwiO1xudmFyIEFSSUFfQlVTWSA9IEFSSUFfUFJFRklYICsgXCJidXN5XCI7XG52YXIgQVJJQV9BVE9NSUMgPSBBUklBX1BSRUZJWCArIFwiYXRvbWljXCI7XG52YXIgQUxMX0FUVFJJQlVURVMgPSBbUk9MRSwgVEFCX0lOREVYLCBESVNBQkxFRCwgQVJJQV9DT05UUk9MUywgQVJJQV9DVVJSRU5ULCBBUklBX0xBQkVMLCBBUklBX0xBQkVMTEVEQlksIEFSSUFfSElEREVOLCBBUklBX09SSUVOVEFUSU9OLCBBUklBX1JPTEVERVNDUklQVElPTl07XG52YXIgQ0xBU1NfUFJFRklYID0gUFJPSkVDVF9DT0RFICsgXCJfX1wiO1xudmFyIFNUQVRVU19DTEFTU19QUkVGSVggPSBcImlzLVwiO1xudmFyIENMQVNTX1JPT1QgPSBQUk9KRUNUX0NPREU7XG52YXIgQ0xBU1NfVFJBQ0sgPSBDTEFTU19QUkVGSVggKyBcInRyYWNrXCI7XG52YXIgQ0xBU1NfTElTVCA9IENMQVNTX1BSRUZJWCArIFwibGlzdFwiO1xudmFyIENMQVNTX1NMSURFID0gQ0xBU1NfUFJFRklYICsgXCJzbGlkZVwiO1xudmFyIENMQVNTX0NMT05FID0gQ0xBU1NfU0xJREUgKyBcIi0tY2xvbmVcIjtcbnZhciBDTEFTU19DT05UQUlORVIgPSBDTEFTU19TTElERSArIFwiX19jb250YWluZXJcIjtcbnZhciBDTEFTU19BUlJPV1MgPSBDTEFTU19QUkVGSVggKyBcImFycm93c1wiO1xudmFyIENMQVNTX0FSUk9XID0gQ0xBU1NfUFJFRklYICsgXCJhcnJvd1wiO1xudmFyIENMQVNTX0FSUk9XX1BSRVYgPSBDTEFTU19BUlJPVyArIFwiLS1wcmV2XCI7XG52YXIgQ0xBU1NfQVJST1dfTkVYVCA9IENMQVNTX0FSUk9XICsgXCItLW5leHRcIjtcbnZhciBDTEFTU19QQUdJTkFUSU9OID0gQ0xBU1NfUFJFRklYICsgXCJwYWdpbmF0aW9uXCI7XG52YXIgQ0xBU1NfUEFHSU5BVElPTl9QQUdFID0gQ0xBU1NfUEFHSU5BVElPTiArIFwiX19wYWdlXCI7XG52YXIgQ0xBU1NfUFJPR1JFU1MgPSBDTEFTU19QUkVGSVggKyBcInByb2dyZXNzXCI7XG52YXIgQ0xBU1NfUFJPR1JFU1NfQkFSID0gQ0xBU1NfUFJPR1JFU1MgKyBcIl9fYmFyXCI7XG52YXIgQ0xBU1NfVE9HR0xFID0gQ0xBU1NfUFJFRklYICsgXCJ0b2dnbGVcIjtcbnZhciBDTEFTU19UT0dHTEVfUExBWSA9IENMQVNTX1RPR0dMRSArIFwiX19wbGF5XCI7XG52YXIgQ0xBU1NfVE9HR0xFX1BBVVNFID0gQ0xBU1NfVE9HR0xFICsgXCJfX3BhdXNlXCI7XG52YXIgQ0xBU1NfU1BJTk5FUiA9IENMQVNTX1BSRUZJWCArIFwic3Bpbm5lclwiO1xudmFyIENMQVNTX1NSID0gQ0xBU1NfUFJFRklYICsgXCJzclwiO1xudmFyIENMQVNTX0lOSVRJQUxJWkVEID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwiaW5pdGlhbGl6ZWRcIjtcbnZhciBDTEFTU19BQ1RJVkUgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJhY3RpdmVcIjtcbnZhciBDTEFTU19QUkVWID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwicHJldlwiO1xudmFyIENMQVNTX05FWFQgPSBTVEFUVVNfQ0xBU1NfUFJFRklYICsgXCJuZXh0XCI7XG52YXIgQ0xBU1NfVklTSUJMRSA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcInZpc2libGVcIjtcbnZhciBDTEFTU19MT0FESU5HID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwibG9hZGluZ1wiO1xudmFyIENMQVNTX0ZPQ1VTX0lOID0gU1RBVFVTX0NMQVNTX1BSRUZJWCArIFwiZm9jdXMtaW5cIjtcbnZhciBDTEFTU19PVkVSRkxPVyA9IFNUQVRVU19DTEFTU19QUkVGSVggKyBcIm92ZXJmbG93XCI7XG52YXIgU1RBVFVTX0NMQVNTRVMgPSBbQ0xBU1NfQUNUSVZFLCBDTEFTU19WSVNJQkxFLCBDTEFTU19QUkVWLCBDTEFTU19ORVhULCBDTEFTU19MT0FESU5HLCBDTEFTU19GT0NVU19JTiwgQ0xBU1NfT1ZFUkZMT1ddO1xudmFyIENMQVNTRVMgPSB7XG4gIHNsaWRlOiBDTEFTU19TTElERSxcbiAgY2xvbmU6IENMQVNTX0NMT05FLFxuICBhcnJvd3M6IENMQVNTX0FSUk9XUyxcbiAgYXJyb3c6IENMQVNTX0FSUk9XLFxuICBwcmV2OiBDTEFTU19BUlJPV19QUkVWLFxuICBuZXh0OiBDTEFTU19BUlJPV19ORVhULFxuICBwYWdpbmF0aW9uOiBDTEFTU19QQUdJTkFUSU9OLFxuICBwYWdlOiBDTEFTU19QQUdJTkFUSU9OX1BBR0UsXG4gIHNwaW5uZXI6IENMQVNTX1NQSU5ORVJcbn07XG5cbmZ1bmN0aW9uIGNsb3Nlc3QoZnJvbSwgc2VsZWN0b3IpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZnJvbS5jbG9zZXN0KSkge1xuICAgIHJldHVybiBmcm9tLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICB9XG5cbiAgdmFyIGVsbSA9IGZyb207XG5cbiAgd2hpbGUgKGVsbSAmJiBlbG0ubm9kZVR5cGUgPT09IDEpIHtcbiAgICBpZiAobWF0Y2hlcyhlbG0sIHNlbGVjdG9yKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZWxtID0gZWxtLnBhcmVudEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZWxtO1xufVxuXG52YXIgRlJJQ1RJT04gPSA1O1xudmFyIExPR19JTlRFUlZBTCA9IDIwMDtcbnZhciBQT0lOVEVSX0RPV05fRVZFTlRTID0gXCJ0b3VjaHN0YXJ0IG1vdXNlZG93blwiO1xudmFyIFBPSU5URVJfTU9WRV9FVkVOVFMgPSBcInRvdWNobW92ZSBtb3VzZW1vdmVcIjtcbnZhciBQT0lOVEVSX1VQX0VWRU5UUyA9IFwidG91Y2hlbmQgdG91Y2hjYW5jZWwgbW91c2V1cCBjbGlja1wiO1xuXG5mdW5jdGlvbiBFbGVtZW50cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZS5vbixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UuYmluZDtcblxuICB2YXIgcm9vdCA9IFNwbGlkZTIucm9vdDtcbiAgdmFyIGkxOG4gPSBvcHRpb25zLmkxOG47XG4gIHZhciBlbGVtZW50cyA9IHt9O1xuICB2YXIgc2xpZGVzID0gW107XG4gIHZhciByb290Q2xhc3NlcyA9IFtdO1xuICB2YXIgdHJhY2tDbGFzc2VzID0gW107XG4gIHZhciB0cmFjaztcbiAgdmFyIGxpc3Q7XG4gIHZhciBpc1VzaW5nS2V5O1xuXG4gIGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIGNvbGxlY3QoKTtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9SRUZSRVNILCBkZXN0cm95KTtcbiAgICBvbihFVkVOVF9SRUZSRVNILCBzZXR1cCk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgdXBkYXRlKTtcbiAgICBiaW5kKGRvY3VtZW50LCBQT0lOVEVSX0RPV05fRVZFTlRTICsgXCIga2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaXNVc2luZ0tleSA9IGUudHlwZSA9PT0gXCJrZXlkb3duXCI7XG4gICAgfSwge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICAgIGJpbmQocm9vdCwgXCJmb2N1c2luXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRvZ2dsZUNsYXNzKHJvb3QsIENMQVNTX0ZPQ1VTX0lOLCAhIWlzVXNpbmdLZXkpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveShjb21wbGV0ZWx5KSB7XG4gICAgdmFyIGF0dHJzID0gQUxMX0FUVFJJQlVURVMuY29uY2F0KFwic3R5bGVcIik7XG4gICAgZW1wdHkoc2xpZGVzKTtcbiAgICByZW1vdmVDbGFzcyhyb290LCByb290Q2xhc3Nlcyk7XG4gICAgcmVtb3ZlQ2xhc3ModHJhY2ssIHRyYWNrQ2xhc3Nlcyk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKFt0cmFjaywgbGlzdF0sIGF0dHJzKTtcbiAgICByZW1vdmVBdHRyaWJ1dGUocm9vdCwgY29tcGxldGVseSA/IGF0dHJzIDogW1wic3R5bGVcIiwgQVJJQV9ST0xFREVTQ1JJUFRJT05dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICByZW1vdmVDbGFzcyhyb290LCByb290Q2xhc3Nlcyk7XG4gICAgcmVtb3ZlQ2xhc3ModHJhY2ssIHRyYWNrQ2xhc3Nlcyk7XG4gICAgcm9vdENsYXNzZXMgPSBnZXRDbGFzc2VzKENMQVNTX1JPT1QpO1xuICAgIHRyYWNrQ2xhc3NlcyA9IGdldENsYXNzZXMoQ0xBU1NfVFJBQ0spO1xuICAgIGFkZENsYXNzKHJvb3QsIHJvb3RDbGFzc2VzKTtcbiAgICBhZGRDbGFzcyh0cmFjaywgdHJhY2tDbGFzc2VzKTtcbiAgICBzZXRBdHRyaWJ1dGUocm9vdCwgQVJJQV9MQUJFTCwgb3B0aW9ucy5sYWJlbCk7XG4gICAgc2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfTEFCRUxMRURCWSwgb3B0aW9ucy5sYWJlbGxlZGJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbGxlY3QoKSB7XG4gICAgdHJhY2sgPSBmaW5kKFwiLlwiICsgQ0xBU1NfVFJBQ0spO1xuICAgIGxpc3QgPSBjaGlsZCh0cmFjaywgXCIuXCIgKyBDTEFTU19MSVNUKTtcbiAgICBhc3NlcnQodHJhY2sgJiYgbGlzdCwgXCJBIHRyYWNrL2xpc3QgZWxlbWVudCBpcyBtaXNzaW5nLlwiKTtcbiAgICBwdXNoKHNsaWRlcywgY2hpbGRyZW4obGlzdCwgXCIuXCIgKyBDTEFTU19TTElERSArIFwiOm5vdCguXCIgKyBDTEFTU19DTE9ORSArIFwiKVwiKSk7XG4gICAgZm9yT3duKHtcbiAgICAgIGFycm93czogQ0xBU1NfQVJST1dTLFxuICAgICAgcGFnaW5hdGlvbjogQ0xBU1NfUEFHSU5BVElPTixcbiAgICAgIHByZXY6IENMQVNTX0FSUk9XX1BSRVYsXG4gICAgICBuZXh0OiBDTEFTU19BUlJPV19ORVhULFxuICAgICAgYmFyOiBDTEFTU19QUk9HUkVTU19CQVIsXG4gICAgICB0b2dnbGU6IENMQVNTX1RPR0dMRVxuICAgIH0sIGZ1bmN0aW9uIChjbGFzc05hbWUsIGtleSkge1xuICAgICAgZWxlbWVudHNba2V5XSA9IGZpbmQoXCIuXCIgKyBjbGFzc05hbWUpO1xuICAgIH0pO1xuICAgIGFzc2lnbihlbGVtZW50cywge1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIHRyYWNrOiB0cmFjayxcbiAgICAgIGxpc3Q6IGxpc3QsXG4gICAgICBzbGlkZXM6IHNsaWRlc1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgaWQgPSByb290LmlkIHx8IHVuaXF1ZUlkKFBST0pFQ1RfQ09ERSk7XG4gICAgdmFyIHJvbGUgPSBvcHRpb25zLnJvbGU7XG4gICAgcm9vdC5pZCA9IGlkO1xuICAgIHRyYWNrLmlkID0gdHJhY2suaWQgfHwgaWQgKyBcIi10cmFja1wiO1xuICAgIGxpc3QuaWQgPSBsaXN0LmlkIHx8IGlkICsgXCItbGlzdFwiO1xuXG4gICAgaWYgKCFnZXRBdHRyaWJ1dGUocm9vdCwgUk9MRSkgJiYgcm9vdC50YWdOYW1lICE9PSBcIlNFQ1RJT05cIiAmJiByb2xlKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUocm9vdCwgUk9MRSwgcm9sZSk7XG4gICAgfVxuXG4gICAgc2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfUk9MRURFU0NSSVBUSU9OLCBpMThuLmNhcm91c2VsKTtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgUk9MRSwgXCJwcmVzZW50YXRpb25cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gICAgdmFyIGVsbSA9IHF1ZXJ5KHJvb3QsIHNlbGVjdG9yKTtcbiAgICByZXR1cm4gZWxtICYmIGNsb3Nlc3QoZWxtLCBcIi5cIiArIENMQVNTX1JPT1QpID09PSByb290ID8gZWxtIDogdm9pZCAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NlcyhiYXNlKSB7XG4gICAgcmV0dXJuIFtiYXNlICsgXCItLVwiICsgb3B0aW9ucy50eXBlLCBiYXNlICsgXCItLVwiICsgb3B0aW9ucy5kaXJlY3Rpb24sIG9wdGlvbnMuZHJhZyAmJiBiYXNlICsgXCItLWRyYWdnYWJsZVwiLCBvcHRpb25zLmlzTmF2aWdhdGlvbiAmJiBiYXNlICsgXCItLW5hdlwiLCBiYXNlID09PSBDTEFTU19ST09UICYmIENMQVNTX0FDVElWRV07XG4gIH1cblxuICByZXR1cm4gYXNzaWduKGVsZW1lbnRzLCB7XG4gICAgc2V0dXA6IHNldHVwLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH0pO1xufVxuXG52YXIgU0xJREUgPSBcInNsaWRlXCI7XG52YXIgTE9PUCA9IFwibG9vcFwiO1xudmFyIEZBREUgPSBcImZhZGVcIjtcblxuZnVuY3Rpb24gU2xpZGUkMShTcGxpZGUyLCBpbmRleCwgc2xpZGVJbmRleCwgc2xpZGUpIHtcbiAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIHZhciBvbiA9IGV2ZW50Lm9uLFxuICAgICAgZW1pdCA9IGV2ZW50LmVtaXQsXG4gICAgICBiaW5kID0gZXZlbnQuYmluZDtcbiAgdmFyIENvbXBvbmVudHMgPSBTcGxpZGUyLkNvbXBvbmVudHMsXG4gICAgICByb290ID0gU3BsaWRlMi5yb290LFxuICAgICAgb3B0aW9ucyA9IFNwbGlkZTIub3B0aW9ucztcbiAgdmFyIGlzTmF2aWdhdGlvbiA9IG9wdGlvbnMuaXNOYXZpZ2F0aW9uLFxuICAgICAgdXBkYXRlT25Nb3ZlID0gb3B0aW9ucy51cGRhdGVPbk1vdmUsXG4gICAgICBpMThuID0gb3B0aW9ucy5pMThuLFxuICAgICAgcGFnaW5hdGlvbiA9IG9wdGlvbnMucGFnaW5hdGlvbixcbiAgICAgIHNsaWRlRm9jdXMgPSBvcHRpb25zLnNsaWRlRm9jdXM7XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50cy5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIHN0eWxlcyA9IGdldEF0dHJpYnV0ZShzbGlkZSwgXCJzdHlsZVwiKTtcbiAgdmFyIGxhYmVsID0gZ2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMKTtcbiAgdmFyIGlzQ2xvbmUgPSBzbGlkZUluZGV4ID4gLTE7XG4gIHZhciBjb250YWluZXIgPSBjaGlsZChzbGlkZSwgXCIuXCIgKyBDTEFTU19DT05UQUlORVIpO1xuICB2YXIgZGVzdHJveWVkO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmICghaXNDbG9uZSkge1xuICAgICAgc2xpZGUuaWQgPSByb290LmlkICsgXCItc2xpZGVcIiArIHBhZChpbmRleCArIDEpO1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBST0xFLCBwYWdpbmF0aW9uID8gXCJ0YWJwYW5lbFwiIDogXCJncm91cFwiKTtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9ST0xFREVTQ1JJUFRJT04sIGkxOG4uc2xpZGUpO1xuICAgICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0xBQkVMLCBsYWJlbCB8fCBmb3JtYXQoaTE4bi5zbGlkZUxhYmVsLCBbaW5kZXggKyAxLCBTcGxpZGUyLmxlbmd0aF0pKTtcbiAgICB9XG5cbiAgICBsaXN0ZW4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICBiaW5kKHNsaWRlLCBcImNsaWNrXCIsIGFwcGx5KGVtaXQsIEVWRU5UX0NMSUNLLCBzZWxmKSk7XG4gICAgYmluZChzbGlkZSwgXCJrZXlkb3duXCIsIGFwcGx5KGVtaXQsIEVWRU5UX1NMSURFX0tFWURPV04sIHNlbGYpKTtcbiAgICBvbihbRVZFTlRfTU9WRUQsIEVWRU5UX1NISUZURUQsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgICBvbihFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIGluaXROYXZpZ2F0aW9uKTtcblxuICAgIGlmICh1cGRhdGVPbk1vdmUpIHtcbiAgICAgIG9uKEVWRU5UX01PVkUsIG9uTW92ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBkZXN0cm95ZWQgPSB0cnVlO1xuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgICByZW1vdmVDbGFzcyhzbGlkZSwgU1RBVFVTX0NMQVNTRVMpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShzbGlkZSwgQUxMX0FUVFJJQlVURVMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgXCJzdHlsZVwiLCBzdHlsZXMpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9MQUJFTCwgbGFiZWwgfHwgXCJcIik7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0TmF2aWdhdGlvbigpIHtcbiAgICB2YXIgY29udHJvbHMgPSBTcGxpZGUyLnNwbGlkZXMubWFwKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHZhciBTbGlkZTIgPSB0YXJnZXQuc3BsaWRlLkNvbXBvbmVudHMuU2xpZGVzLmdldEF0KGluZGV4KTtcbiAgICAgIHJldHVybiBTbGlkZTIgPyBTbGlkZTIuc2xpZGUuaWQgOiBcIlwiO1xuICAgIH0pLmpvaW4oXCIgXCIpO1xuICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9MQUJFTCwgZm9ybWF0KGkxOG4uc2xpZGVYLCAoaXNDbG9uZSA/IHNsaWRlSW5kZXggOiBpbmRleCkgKyAxKSk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBBUklBX0NPTlRST0xTLCBjb250cm9scyk7XG4gICAgc2V0QXR0cmlidXRlKHNsaWRlLCBST0xFLCBzbGlkZUZvY3VzID8gXCJidXR0b25cIiA6IFwiXCIpO1xuICAgIHNsaWRlRm9jdXMgJiYgcmVtb3ZlQXR0cmlidXRlKHNsaWRlLCBBUklBX1JPTEVERVNDUklQVElPTik7XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoKSB7XG4gICAgaWYgKCFkZXN0cm95ZWQpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBpZiAoIWRlc3Ryb3llZCkge1xuICAgICAgdmFyIGN1cnIgPSBTcGxpZGUyLmluZGV4O1xuICAgICAgdXBkYXRlQWN0aXZpdHkoKTtcbiAgICAgIHVwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICAgIHRvZ2dsZUNsYXNzKHNsaWRlLCBDTEFTU19QUkVWLCBpbmRleCA9PT0gY3VyciAtIDEpO1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX05FWFQsIGluZGV4ID09PSBjdXJyICsgMSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQWN0aXZpdHkoKSB7XG4gICAgdmFyIGFjdGl2ZSA9IGlzQWN0aXZlKCk7XG5cbiAgICBpZiAoYWN0aXZlICE9PSBoYXNDbGFzcyhzbGlkZSwgQ0xBU1NfQUNUSVZFKSkge1xuICAgICAgdG9nZ2xlQ2xhc3Moc2xpZGUsIENMQVNTX0FDVElWRSwgYWN0aXZlKTtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9DVVJSRU5ULCBpc05hdmlnYXRpb24gJiYgYWN0aXZlIHx8IFwiXCIpO1xuICAgICAgZW1pdChhY3RpdmUgPyBFVkVOVF9BQ1RJVkUgOiBFVkVOVF9JTkFDVElWRSwgc2VsZik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVmlzaWJpbGl0eSgpIHtcbiAgICB2YXIgdmlzaWJsZSA9IGlzVmlzaWJsZSgpO1xuICAgIHZhciBoaWRkZW4gPSAhdmlzaWJsZSAmJiAoIWlzQWN0aXZlKCkgfHwgaXNDbG9uZSk7XG5cbiAgICBpZiAoIVNwbGlkZTIuc3RhdGUuaXMoW01PVklORywgU0NST0xMSU5HXSkpIHtcbiAgICAgIHNldEF0dHJpYnV0ZShzbGlkZSwgQVJJQV9ISURERU4sIGhpZGRlbiB8fCBcIlwiKTtcbiAgICB9XG5cbiAgICBzZXRBdHRyaWJ1dGUocXVlcnlBbGwoc2xpZGUsIG9wdGlvbnMuZm9jdXNhYmxlTm9kZXMgfHwgXCJcIiksIFRBQl9JTkRFWCwgaGlkZGVuID8gLTEgOiBcIlwiKTtcblxuICAgIGlmIChzbGlkZUZvY3VzKSB7XG4gICAgICBzZXRBdHRyaWJ1dGUoc2xpZGUsIFRBQl9JTkRFWCwgaGlkZGVuID8gLTEgOiAwKTtcbiAgICB9XG5cbiAgICBpZiAodmlzaWJsZSAhPT0gaGFzQ2xhc3Moc2xpZGUsIENMQVNTX1ZJU0lCTEUpKSB7XG4gICAgICB0b2dnbGVDbGFzcyhzbGlkZSwgQ0xBU1NfVklTSUJMRSwgdmlzaWJsZSk7XG4gICAgICBlbWl0KHZpc2libGUgPyBFVkVOVF9WSVNJQkxFIDogRVZFTlRfSElEREVOLCBzZWxmKTtcbiAgICB9XG5cbiAgICBpZiAoIXZpc2libGUgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gc2xpZGUpIHtcbiAgICAgIHZhciBTbGlkZTIgPSBDb21wb25lbnRzLlNsaWRlcy5nZXRBdChTcGxpZGUyLmluZGV4KTtcbiAgICAgIFNsaWRlMiAmJiBmb2N1cyhTbGlkZTIuc2xpZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlJDEocHJvcCwgdmFsdWUsIHVzZUNvbnRhaW5lcikge1xuICAgIHN0eWxlKHVzZUNvbnRhaW5lciAmJiBjb250YWluZXIgfHwgc2xpZGUsIHByb3AsIHZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHZhciBjdXJyID0gU3BsaWRlMi5pbmRleDtcbiAgICByZXR1cm4gY3VyciA9PT0gaW5kZXggfHwgb3B0aW9ucy5jbG9uZVN0YXR1cyAmJiBjdXJyID09PSBzbGlkZUluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNWaXNpYmxlKCkge1xuICAgIGlmIChTcGxpZGUyLmlzKEZBREUpKSB7XG4gICAgICByZXR1cm4gaXNBY3RpdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhY2tSZWN0ID0gcmVjdChDb21wb25lbnRzLkVsZW1lbnRzLnRyYWNrKTtcbiAgICB2YXIgc2xpZGVSZWN0ID0gcmVjdChzbGlkZSk7XG4gICAgdmFyIGxlZnQgPSByZXNvbHZlKFwibGVmdFwiLCB0cnVlKTtcbiAgICB2YXIgcmlnaHQgPSByZXNvbHZlKFwicmlnaHRcIiwgdHJ1ZSk7XG4gICAgcmV0dXJuIGZsb29yKHRyYWNrUmVjdFtsZWZ0XSkgPD0gY2VpbChzbGlkZVJlY3RbbGVmdF0pICYmIGZsb29yKHNsaWRlUmVjdFtyaWdodF0pIDw9IGNlaWwodHJhY2tSZWN0W3JpZ2h0XSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1dpdGhpbihmcm9tLCBkaXN0YW5jZSkge1xuICAgIHZhciBkaWZmID0gYWJzKGZyb20gLSBpbmRleCk7XG5cbiAgICBpZiAoIWlzQ2xvbmUgJiYgKG9wdGlvbnMucmV3aW5kIHx8IFNwbGlkZTIuaXMoTE9PUCkpKSB7XG4gICAgICBkaWZmID0gbWluKGRpZmYsIFNwbGlkZTIubGVuZ3RoIC0gZGlmZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpZmYgPD0gZGlzdGFuY2U7XG4gIH1cblxuICB2YXIgc2VsZiA9IHtcbiAgICBpbmRleDogaW5kZXgsXG4gICAgc2xpZGVJbmRleDogc2xpZGVJbmRleCxcbiAgICBzbGlkZTogc2xpZGUsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgaXNDbG9uZTogaXNDbG9uZSxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBzdHlsZTogc3R5bGUkMSxcbiAgICBpc1dpdGhpbjogaXNXaXRoaW5cbiAgfTtcbiAgcmV0dXJuIHNlbGY7XG59XG5cbmZ1bmN0aW9uIFNsaWRlcyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMiA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UyLm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTIuZW1pdCxcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UyLmJpbmQ7XG5cbiAgdmFyIF9Db21wb25lbnRzMiRFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgc2xpZGVzID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzLnNsaWRlcyxcbiAgICAgIGxpc3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMubGlzdDtcbiAgdmFyIFNsaWRlczIgPSBbXTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgZGVzdHJveSk7XG4gICAgb24oRVZFTlRfUkVGUkVTSCwgaW5pdCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZSwgaW5kZXgpIHtcbiAgICAgIHJlZ2lzdGVyKHNsaWRlLCBpbmRleCwgLTEpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBmb3JFYWNoJDEoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgU2xpZGUyLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBlbXB0eShTbGlkZXMyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBmb3JFYWNoJDEoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgU2xpZGUyLnVwZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIoc2xpZGUsIGluZGV4LCBzbGlkZUluZGV4KSB7XG4gICAgdmFyIG9iamVjdCA9IFNsaWRlJDEoU3BsaWRlMiwgaW5kZXgsIHNsaWRlSW5kZXgsIHNsaWRlKTtcbiAgICBvYmplY3QubW91bnQoKTtcbiAgICBTbGlkZXMyLnB1c2gob2JqZWN0KTtcbiAgICBTbGlkZXMyLnNvcnQoZnVuY3Rpb24gKFNsaWRlMSwgU2xpZGUyKSB7XG4gICAgICByZXR1cm4gU2xpZGUxLmluZGV4IC0gU2xpZGUyLmluZGV4O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0KGV4Y2x1ZGVDbG9uZXMpIHtcbiAgICByZXR1cm4gZXhjbHVkZUNsb25lcyA/IGZpbHRlcihmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gIVNsaWRlMi5pc0Nsb25lO1xuICAgIH0pIDogU2xpZGVzMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEluKHBhZ2UpIHtcbiAgICB2YXIgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXI7XG4gICAgdmFyIGluZGV4ID0gQ29udHJvbGxlci50b0luZGV4KHBhZ2UpO1xuICAgIHZhciBtYXggPSBDb250cm9sbGVyLmhhc0ZvY3VzKCkgPyAxIDogb3B0aW9ucy5wZXJQYWdlO1xuICAgIHJldHVybiBmaWx0ZXIoZnVuY3Rpb24gKFNsaWRlMikge1xuICAgICAgcmV0dXJuIGJldHdlZW4oU2xpZGUyLmluZGV4LCBpbmRleCwgaW5kZXggKyBtYXggLSAxKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF0KGluZGV4KSB7XG4gICAgcmV0dXJuIGZpbHRlcihpbmRleClbMF07XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoaXRlbXMsIGluZGV4KSB7XG4gICAgZm9yRWFjaChpdGVtcywgZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgICBpZiAoaXNTdHJpbmcoc2xpZGUpKSB7XG4gICAgICAgIHNsaWRlID0gcGFyc2VIdG1sKHNsaWRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzSFRNTEVsZW1lbnQoc2xpZGUpKSB7XG4gICAgICAgIHZhciByZWYgPSBzbGlkZXNbaW5kZXhdO1xuICAgICAgICByZWYgPyBiZWZvcmUoc2xpZGUsIHJlZikgOiBhcHBlbmQobGlzdCwgc2xpZGUpO1xuICAgICAgICBhZGRDbGFzcyhzbGlkZSwgb3B0aW9ucy5jbGFzc2VzLnNsaWRlKTtcbiAgICAgICAgb2JzZXJ2ZUltYWdlcyhzbGlkZSwgYXBwbHkoZW1pdCwgRVZFTlRfUkVTSVpFKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZSQxKG1hdGNoZXIpIHtcbiAgICByZW1vdmUoZmlsdGVyKG1hdGNoZXIpLm1hcChmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gU2xpZGUyLnNsaWRlO1xuICAgIH0pKTtcbiAgICBlbWl0KEVWRU5UX1JFRlJFU0gpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yRWFjaCQxKGl0ZXJhdGVlLCBleGNsdWRlQ2xvbmVzKSB7XG4gICAgZ2V0KGV4Y2x1ZGVDbG9uZXMpLmZvckVhY2goaXRlcmF0ZWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyKG1hdGNoZXIpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5maWx0ZXIoaXNGdW5jdGlvbihtYXRjaGVyKSA/IG1hdGNoZXIgOiBmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICByZXR1cm4gaXNTdHJpbmcobWF0Y2hlcikgPyBtYXRjaGVzKFNsaWRlMi5zbGlkZSwgbWF0Y2hlcikgOiBpbmNsdWRlcyh0b0FycmF5KG1hdGNoZXIpLCBTbGlkZTIuaW5kZXgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGUocHJvcCwgdmFsdWUsIHVzZUNvbnRhaW5lcikge1xuICAgIGZvckVhY2gkMShmdW5jdGlvbiAoU2xpZGUyKSB7XG4gICAgICBTbGlkZTIuc3R5bGUocHJvcCwgdmFsdWUsIHVzZUNvbnRhaW5lcik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBvYnNlcnZlSW1hZ2VzKGVsbSwgY2FsbGJhY2spIHtcbiAgICB2YXIgaW1hZ2VzID0gcXVlcnlBbGwoZWxtLCBcImltZ1wiKTtcbiAgICB2YXIgbGVuZ3RoID0gaW1hZ2VzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbWcpIHtcbiAgICAgICAgYmluZChpbWcsIFwibG9hZCBlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCEgLS1sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExlbmd0aChleGNsdWRlQ2xvbmVzKSB7XG4gICAgcmV0dXJuIGV4Y2x1ZGVDbG9uZXMgPyBzbGlkZXMubGVuZ3RoIDogU2xpZGVzMi5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBpc0Vub3VnaCgpIHtcbiAgICByZXR1cm4gU2xpZGVzMi5sZW5ndGggPiBvcHRpb25zLnBlclBhZ2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICBnZXQ6IGdldCxcbiAgICBnZXRJbjogZ2V0SW4sXG4gICAgZ2V0QXQ6IGdldEF0LFxuICAgIGFkZDogYWRkLFxuICAgIHJlbW92ZTogcmVtb3ZlJDEsXG4gICAgZm9yRWFjaDogZm9yRWFjaCQxLFxuICAgIGZpbHRlcjogZmlsdGVyLFxuICAgIHN0eWxlOiBzdHlsZSxcbiAgICBnZXRMZW5ndGg6IGdldExlbmd0aCxcbiAgICBpc0Vub3VnaDogaXNFbm91Z2hcbiAgfTtcbn1cblxuZnVuY3Rpb24gTGF5b3V0KFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2UzID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTMub24sXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMy5iaW5kLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTMuZW1pdDtcblxuICB2YXIgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzO1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgX0NvbXBvbmVudHMyJEVsZW1lbnRzMiA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgcm9vdCA9IF9Db21wb25lbnRzMiRFbGVtZW50czIucm9vdCxcbiAgICAgIHRyYWNrID0gX0NvbXBvbmVudHMyJEVsZW1lbnRzMi50cmFjayxcbiAgICAgIGxpc3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMyLmxpc3Q7XG4gIHZhciBnZXRBdCA9IFNsaWRlcy5nZXRBdCxcbiAgICAgIHN0eWxlU2xpZGVzID0gU2xpZGVzLnN0eWxlO1xuICB2YXIgdmVydGljYWw7XG4gIHZhciByb290UmVjdDtcbiAgdmFyIG92ZXJmbG93O1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGluaXQoKTtcbiAgICBiaW5kKHdpbmRvdywgXCJyZXNpemUgbG9hZFwiLCBUaHJvdHRsZShhcHBseShlbWl0LCBFVkVOVF9SRVNJWkUpKSk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBpbml0KTtcbiAgICBvbihFVkVOVF9SRVNJWkUsIHJlc2l6ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZlcnRpY2FsID0gb3B0aW9ucy5kaXJlY3Rpb24gPT09IFRUQjtcbiAgICBzdHlsZShyb290LCBcIm1heFdpZHRoXCIsIHVuaXQob3B0aW9ucy53aWR0aCkpO1xuICAgIHN0eWxlKHRyYWNrLCByZXNvbHZlKFwicGFkZGluZ0xlZnRcIiksIGNzc1BhZGRpbmcoZmFsc2UpKTtcbiAgICBzdHlsZSh0cmFjaywgcmVzb2x2ZShcInBhZGRpbmdSaWdodFwiKSwgY3NzUGFkZGluZyh0cnVlKSk7XG4gICAgcmVzaXplKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzaXplKGZvcmNlKSB7XG4gICAgdmFyIG5ld1JlY3QgPSByZWN0KHJvb3QpO1xuXG4gICAgaWYgKGZvcmNlIHx8IHJvb3RSZWN0LndpZHRoICE9PSBuZXdSZWN0LndpZHRoIHx8IHJvb3RSZWN0LmhlaWdodCAhPT0gbmV3UmVjdC5oZWlnaHQpIHtcbiAgICAgIHN0eWxlKHRyYWNrLCBcImhlaWdodFwiLCBjc3NUcmFja0hlaWdodCgpKTtcbiAgICAgIHN0eWxlU2xpZGVzKHJlc29sdmUoXCJtYXJnaW5SaWdodFwiKSwgdW5pdChvcHRpb25zLmdhcCkpO1xuICAgICAgc3R5bGVTbGlkZXMoXCJ3aWR0aFwiLCBjc3NTbGlkZVdpZHRoKCkpO1xuICAgICAgc3R5bGVTbGlkZXMoXCJoZWlnaHRcIiwgY3NzU2xpZGVIZWlnaHQoKSwgdHJ1ZSk7XG4gICAgICByb290UmVjdCA9IG5ld1JlY3Q7XG4gICAgICBlbWl0KEVWRU5UX1JFU0laRUQpO1xuXG4gICAgICBpZiAob3ZlcmZsb3cgIT09IChvdmVyZmxvdyA9IGlzT3ZlcmZsb3coKSkpIHtcbiAgICAgICAgdG9nZ2xlQ2xhc3Mocm9vdCwgQ0xBU1NfT1ZFUkZMT1csIG92ZXJmbG93KTtcbiAgICAgICAgZW1pdChFVkVOVF9PVkVSRkxPVywgb3ZlcmZsb3cpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1BhZGRpbmcocmlnaHQpIHtcbiAgICB2YXIgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZztcbiAgICB2YXIgcHJvcCA9IHJlc29sdmUocmlnaHQgPyBcInJpZ2h0XCIgOiBcImxlZnRcIik7XG4gICAgcmV0dXJuIHBhZGRpbmcgJiYgdW5pdChwYWRkaW5nW3Byb3BdIHx8IChpc09iamVjdChwYWRkaW5nKSA/IDAgOiBwYWRkaW5nKSkgfHwgXCIwcHhcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1RyYWNrSGVpZ2h0KCkge1xuICAgIHZhciBoZWlnaHQgPSBcIlwiO1xuXG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBoZWlnaHQgPSBjc3NIZWlnaHQoKTtcbiAgICAgIGFzc2VydChoZWlnaHQsIFwiaGVpZ2h0IG9yIGhlaWdodFJhdGlvIGlzIG1pc3NpbmcuXCIpO1xuICAgICAgaGVpZ2h0ID0gXCJjYWxjKFwiICsgaGVpZ2h0ICsgXCIgLSBcIiArIGNzc1BhZGRpbmcoZmFsc2UpICsgXCIgLSBcIiArIGNzc1BhZGRpbmcodHJ1ZSkgKyBcIilcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVpZ2h0O1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzSGVpZ2h0KCkge1xuICAgIHJldHVybiB1bml0KG9wdGlvbnMuaGVpZ2h0IHx8IHJlY3QobGlzdCkud2lkdGggKiBvcHRpb25zLmhlaWdodFJhdGlvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNzc1NsaWRlV2lkdGgoKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYXV0b1dpZHRoID8gbnVsbCA6IHVuaXQob3B0aW9ucy5maXhlZFdpZHRoKSB8fCAodmVydGljYWwgPyBcIlwiIDogY3NzU2xpZGVTaXplKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzU2xpZGVIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHVuaXQob3B0aW9ucy5maXhlZEhlaWdodCkgfHwgKHZlcnRpY2FsID8gb3B0aW9ucy5hdXRvSGVpZ2h0ID8gbnVsbCA6IGNzc1NsaWRlU2l6ZSgpIDogY3NzSGVpZ2h0KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3NzU2xpZGVTaXplKCkge1xuICAgIHZhciBnYXAgPSB1bml0KG9wdGlvbnMuZ2FwKTtcbiAgICByZXR1cm4gXCJjYWxjKCgxMDAlXCIgKyAoZ2FwICYmIFwiICsgXCIgKyBnYXApICsgXCIpL1wiICsgKG9wdGlvbnMucGVyUGFnZSB8fCAxKSArIChnYXAgJiYgXCIgLSBcIiArIGdhcCkgKyBcIilcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RTaXplKCkge1xuICAgIHJldHVybiByZWN0KGxpc3QpW3Jlc29sdmUoXCJ3aWR0aFwiKV07XG4gIH1cblxuICBmdW5jdGlvbiBzbGlkZVNpemUoaW5kZXgsIHdpdGhvdXRHYXApIHtcbiAgICB2YXIgU2xpZGUgPSBnZXRBdChpbmRleCB8fCAwKTtcbiAgICByZXR1cm4gU2xpZGUgPyByZWN0KFNsaWRlLnNsaWRlKVtyZXNvbHZlKFwid2lkdGhcIildICsgKHdpdGhvdXRHYXAgPyAwIDogZ2V0R2FwKCkpIDogMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdGFsU2l6ZShpbmRleCwgd2l0aG91dEdhcCkge1xuICAgIHZhciBTbGlkZSA9IGdldEF0KGluZGV4KTtcblxuICAgIGlmIChTbGlkZSkge1xuICAgICAgdmFyIHJpZ2h0ID0gcmVjdChTbGlkZS5zbGlkZSlbcmVzb2x2ZShcInJpZ2h0XCIpXTtcbiAgICAgIHZhciBsZWZ0ID0gcmVjdChsaXN0KVtyZXNvbHZlKFwibGVmdFwiKV07XG4gICAgICByZXR1cm4gYWJzKHJpZ2h0IC0gbGVmdCkgKyAod2l0aG91dEdhcCA/IDAgOiBnZXRHYXAoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBmdW5jdGlvbiBzbGlkZXJTaXplKHdpdGhvdXRHYXApIHtcbiAgICByZXR1cm4gdG90YWxTaXplKFNwbGlkZTIubGVuZ3RoIC0gMSkgLSB0b3RhbFNpemUoMCkgKyBzbGlkZVNpemUoMCwgd2l0aG91dEdhcCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRHYXAoKSB7XG4gICAgdmFyIFNsaWRlID0gZ2V0QXQoMCk7XG4gICAgcmV0dXJuIFNsaWRlICYmIHBhcnNlRmxvYXQoc3R5bGUoU2xpZGUuc2xpZGUsIHJlc29sdmUoXCJtYXJnaW5SaWdodFwiKSkpIHx8IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYWRkaW5nKHJpZ2h0KSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGUodHJhY2ssIHJlc29sdmUoXCJwYWRkaW5nXCIgKyAocmlnaHQgPyBcIlJpZ2h0XCIgOiBcIkxlZnRcIikpKSkgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzT3ZlcmZsb3coKSB7XG4gICAgcmV0dXJuIFNwbGlkZTIuaXMoRkFERSkgfHwgc2xpZGVyU2l6ZSh0cnVlKSA+IGxpc3RTaXplKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICByZXNpemU6IHJlc2l6ZSxcbiAgICBsaXN0U2l6ZTogbGlzdFNpemUsXG4gICAgc2xpZGVTaXplOiBzbGlkZVNpemUsXG4gICAgc2xpZGVyU2l6ZTogc2xpZGVyU2l6ZSxcbiAgICB0b3RhbFNpemU6IHRvdGFsU2l6ZSxcbiAgICBnZXRQYWRkaW5nOiBnZXRQYWRkaW5nLFxuICAgIGlzT3ZlcmZsb3c6IGlzT3ZlcmZsb3dcbiAgfTtcbn1cblxudmFyIE1VTFRJUExJRVIgPSAyO1xuXG5mdW5jdGlvbiBDbG9uZXMoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gIHZhciBvbiA9IGV2ZW50Lm9uO1xuICB2YXIgRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcztcbiAgdmFyIHJlc29sdmUgPSBDb21wb25lbnRzMi5EaXJlY3Rpb24ucmVzb2x2ZTtcbiAgdmFyIGNsb25lcyA9IFtdO1xuICB2YXIgY2xvbmVDb3VudDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9SRUZSRVNILCByZW1vdW50KTtcbiAgICBvbihbRVZFTlRfVVBEQVRFRCwgRVZFTlRfUkVTSVpFXSwgb2JzZXJ2ZSk7XG5cbiAgICBpZiAoY2xvbmVDb3VudCA9IGNvbXB1dGVDbG9uZUNvdW50KCkpIHtcbiAgICAgIGdlbmVyYXRlKGNsb25lQ291bnQpO1xuICAgICAgQ29tcG9uZW50czIuTGF5b3V0LnJlc2l6ZSh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdW50KCkge1xuICAgIGRlc3Ryb3koKTtcbiAgICBtb3VudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICByZW1vdmUoY2xvbmVzKTtcbiAgICBlbXB0eShjbG9uZXMpO1xuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ic2VydmUoKSB7XG4gICAgdmFyIGNvdW50ID0gY29tcHV0ZUNsb25lQ291bnQoKTtcblxuICAgIGlmIChjbG9uZUNvdW50ICE9PSBjb3VudCkge1xuICAgICAgaWYgKGNsb25lQ291bnQgPCBjb3VudCB8fCAhY291bnQpIHtcbiAgICAgICAgZXZlbnQuZW1pdChFVkVOVF9SRUZSRVNIKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5lcmF0ZShjb3VudCkge1xuICAgIHZhciBzbGlkZXMgPSBTbGlkZXMuZ2V0KCkuc2xpY2UoKTtcbiAgICB2YXIgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIHdoaWxlIChzbGlkZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgcHVzaChzbGlkZXMsIHNsaWRlcyk7XG4gICAgICB9XG5cbiAgICAgIHB1c2goc2xpZGVzLnNsaWNlKC1jb3VudCksIHNsaWRlcy5zbGljZSgwLCBjb3VudCkpLmZvckVhY2goZnVuY3Rpb24gKFNsaWRlLCBpbmRleCkge1xuICAgICAgICB2YXIgaXNIZWFkID0gaW5kZXggPCBjb3VudDtcbiAgICAgICAgdmFyIGNsb25lID0gY2xvbmVEZWVwKFNsaWRlLnNsaWRlLCBpbmRleCk7XG4gICAgICAgIGlzSGVhZCA/IGJlZm9yZShjbG9uZSwgc2xpZGVzWzBdLnNsaWRlKSA6IGFwcGVuZChFbGVtZW50cy5saXN0LCBjbG9uZSk7XG4gICAgICAgIHB1c2goY2xvbmVzLCBjbG9uZSk7XG4gICAgICAgIFNsaWRlcy5yZWdpc3RlcihjbG9uZSwgaW5kZXggLSBjb3VudCArIChpc0hlYWQgPyAwIDogbGVuZ3RoKSwgU2xpZGUuaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvbmVEZWVwKGVsbSwgaW5kZXgpIHtcbiAgICB2YXIgY2xvbmUgPSBlbG0uY2xvbmVOb2RlKHRydWUpO1xuICAgIGFkZENsYXNzKGNsb25lLCBvcHRpb25zLmNsYXNzZXMuY2xvbmUpO1xuICAgIGNsb25lLmlkID0gU3BsaWRlMi5yb290LmlkICsgXCItY2xvbmVcIiArIHBhZChpbmRleCArIDEpO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVDbG9uZUNvdW50KCkge1xuICAgIHZhciBjbG9uZXMyID0gb3B0aW9ucy5jbG9uZXM7XG5cbiAgICBpZiAoIVNwbGlkZTIuaXMoTE9PUCkpIHtcbiAgICAgIGNsb25lczIgPSAwO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQoY2xvbmVzMikpIHtcbiAgICAgIHZhciBmaXhlZFNpemUgPSBvcHRpb25zW3Jlc29sdmUoXCJmaXhlZFdpZHRoXCIpXSAmJiBDb21wb25lbnRzMi5MYXlvdXQuc2xpZGVTaXplKDApO1xuICAgICAgdmFyIGZpeGVkQ291bnQgPSBmaXhlZFNpemUgJiYgY2VpbChyZWN0KEVsZW1lbnRzLnRyYWNrKVtyZXNvbHZlKFwid2lkdGhcIildIC8gZml4ZWRTaXplKTtcbiAgICAgIGNsb25lczIgPSBmaXhlZENvdW50IHx8IG9wdGlvbnNbcmVzb2x2ZShcImF1dG9XaWR0aFwiKV0gJiYgU3BsaWRlMi5sZW5ndGggfHwgb3B0aW9ucy5wZXJQYWdlICogTVVMVElQTElFUjtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVzMjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfTtcbn1cblxuZnVuY3Rpb24gTW92ZShTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlNCA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U0Lm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTQuZW1pdDtcblxuICB2YXIgc2V0ID0gU3BsaWRlMi5zdGF0ZS5zZXQ7XG4gIHZhciBfQ29tcG9uZW50czIkTGF5b3V0ID0gQ29tcG9uZW50czIuTGF5b3V0LFxuICAgICAgc2xpZGVTaXplID0gX0NvbXBvbmVudHMyJExheW91dC5zbGlkZVNpemUsXG4gICAgICBnZXRQYWRkaW5nID0gX0NvbXBvbmVudHMyJExheW91dC5nZXRQYWRkaW5nLFxuICAgICAgdG90YWxTaXplID0gX0NvbXBvbmVudHMyJExheW91dC50b3RhbFNpemUsXG4gICAgICBsaXN0U2l6ZSA9IF9Db21wb25lbnRzMiRMYXlvdXQubGlzdFNpemUsXG4gICAgICBzbGlkZXJTaXplID0gX0NvbXBvbmVudHMyJExheW91dC5zbGlkZXJTaXplO1xuICB2YXIgX0NvbXBvbmVudHMyJERpcmVjdGlvID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLFxuICAgICAgcmVzb2x2ZSA9IF9Db21wb25lbnRzMiREaXJlY3Rpby5yZXNvbHZlLFxuICAgICAgb3JpZW50ID0gX0NvbXBvbmVudHMyJERpcmVjdGlvLm9yaWVudDtcbiAgdmFyIF9Db21wb25lbnRzMiRFbGVtZW50czMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIGxpc3QgPSBfQ29tcG9uZW50czIkRWxlbWVudHMzLmxpc3QsXG4gICAgICB0cmFjayA9IF9Db21wb25lbnRzMiRFbGVtZW50czMudHJhY2s7XG4gIHZhciBUcmFuc2l0aW9uO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIFRyYW5zaXRpb24gPSBDb21wb25lbnRzMi5UcmFuc2l0aW9uO1xuICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9SRVNJWkVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgcmVwb3NpdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiByZXBvc2l0aW9uKCkge1xuICAgIGlmICghQ29tcG9uZW50czIuQ29udHJvbGxlci5pc0J1c3koKSkge1xuICAgICAgQ29tcG9uZW50czIuU2Nyb2xsLmNhbmNlbCgpO1xuICAgICAganVtcChTcGxpZGUyLmluZGV4KTtcbiAgICAgIENvbXBvbmVudHMyLlNsaWRlcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKGRlc3QsIGluZGV4LCBwcmV2LCBjYWxsYmFjaykge1xuICAgIGlmIChkZXN0ICE9PSBpbmRleCAmJiBjYW5TaGlmdChkZXN0ID4gcHJldikpIHtcbiAgICAgIGNhbmNlbCgpO1xuICAgICAgdHJhbnNsYXRlKHNoaWZ0KGdldFBvc2l0aW9uKCksIGRlc3QgPiBwcmV2KSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgc2V0KE1PVklORyk7XG4gICAgZW1pdChFVkVOVF9NT1ZFLCBpbmRleCwgcHJldiwgZGVzdCk7XG4gICAgVHJhbnNpdGlvbi5zdGFydChpbmRleCwgZnVuY3Rpb24gKCkge1xuICAgICAgc2V0KElETEUpO1xuICAgICAgZW1pdChFVkVOVF9NT1ZFRCwgaW5kZXgsIHByZXYsIGRlc3QpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bXAoaW5kZXgpIHtcbiAgICB0cmFuc2xhdGUodG9Qb3NpdGlvbihpbmRleCwgdHJ1ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHBvc2l0aW9uLCBwcmV2ZW50TG9vcCkge1xuICAgIGlmICghU3BsaWRlMi5pcyhGQURFKSkge1xuICAgICAgdmFyIGRlc3RpbmF0aW9uID0gcHJldmVudExvb3AgPyBwb3NpdGlvbiA6IGxvb3AocG9zaXRpb24pO1xuICAgICAgc3R5bGUobGlzdCwgXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGVcIiArIHJlc29sdmUoXCJYXCIpICsgXCIoXCIgKyBkZXN0aW5hdGlvbiArIFwicHgpXCIpO1xuICAgICAgcG9zaXRpb24gIT09IGRlc3RpbmF0aW9uICYmIGVtaXQoRVZFTlRfU0hJRlRFRCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9vcChwb3NpdGlvbikge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApKSB7XG4gICAgICB2YXIgaW5kZXggPSB0b0luZGV4KHBvc2l0aW9uKTtcbiAgICAgIHZhciBleGNlZWRlZE1heCA9IGluZGV4ID4gQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRFbmQoKTtcbiAgICAgIHZhciBleGNlZWRlZE1pbiA9IGluZGV4IDwgMDtcblxuICAgICAgaWYgKGV4Y2VlZGVkTWluIHx8IGV4Y2VlZGVkTWF4KSB7XG4gICAgICAgIHBvc2l0aW9uID0gc2hpZnQocG9zaXRpb24sIGV4Y2VlZGVkTWF4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBzaGlmdChwb3NpdGlvbiwgYmFja3dhcmRzKSB7XG4gICAgdmFyIGV4Y2VzcyA9IHBvc2l0aW9uIC0gZ2V0TGltaXQoYmFja3dhcmRzKTtcbiAgICB2YXIgc2l6ZSA9IHNsaWRlclNpemUoKTtcbiAgICBwb3NpdGlvbiAtPSBvcmllbnQoc2l6ZSAqIChjZWlsKGFicyhleGNlc3MpIC8gc2l6ZSkgfHwgMSkpICogKGJhY2t3YXJkcyA/IDEgOiAtMSk7XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHRyYW5zbGF0ZShnZXRQb3NpdGlvbigpLCB0cnVlKTtcbiAgICBUcmFuc2l0aW9uLmNhbmNlbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9JbmRleChwb3NpdGlvbikge1xuICAgIHZhciBTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMuZ2V0KCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgU2xpZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2xpZGVJbmRleCA9IFNsaWRlc1tpXS5pbmRleDtcbiAgICAgIHZhciBkaXN0YW5jZSA9IGFicyh0b1Bvc2l0aW9uKHNsaWRlSW5kZXgsIHRydWUpIC0gcG9zaXRpb24pO1xuXG4gICAgICBpZiAoZGlzdGFuY2UgPD0gbWluRGlzdGFuY2UpIHtcbiAgICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgaW5kZXggPSBzbGlkZUluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gdG9Qb3NpdGlvbihpbmRleCwgdHJpbW1pbmcpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBvcmllbnQodG90YWxTaXplKGluZGV4IC0gMSkgLSBvZmZzZXQoaW5kZXgpKTtcbiAgICByZXR1cm4gdHJpbW1pbmcgPyB0cmltKHBvc2l0aW9uKSA6IHBvc2l0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UG9zaXRpb24oKSB7XG4gICAgdmFyIGxlZnQgPSByZXNvbHZlKFwibGVmdFwiKTtcbiAgICByZXR1cm4gcmVjdChsaXN0KVtsZWZ0XSAtIHJlY3QodHJhY2spW2xlZnRdICsgb3JpZW50KGdldFBhZGRpbmcoZmFsc2UpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW0ocG9zaXRpb24pIHtcbiAgICBpZiAob3B0aW9ucy50cmltU3BhY2UgJiYgU3BsaWRlMi5pcyhTTElERSkpIHtcbiAgICAgIHBvc2l0aW9uID0gY2xhbXAocG9zaXRpb24sIDAsIG9yaWVudChzbGlkZXJTaXplKHRydWUpIC0gbGlzdFNpemUoKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZnNldChpbmRleCkge1xuICAgIHZhciBmb2N1cyA9IG9wdGlvbnMuZm9jdXM7XG4gICAgcmV0dXJuIGZvY3VzID09PSBcImNlbnRlclwiID8gKGxpc3RTaXplKCkgLSBzbGlkZVNpemUoaW5kZXgsIHRydWUpKSAvIDIgOiArZm9jdXMgKiBzbGlkZVNpemUoaW5kZXgpIHx8IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaW1pdChtYXgpIHtcbiAgICByZXR1cm4gdG9Qb3NpdGlvbihtYXggPyBDb21wb25lbnRzMi5Db250cm9sbGVyLmdldEVuZCgpIDogMCwgISFvcHRpb25zLnRyaW1TcGFjZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5TaGlmdChiYWNrd2FyZHMpIHtcbiAgICB2YXIgc2hpZnRlZCA9IG9yaWVudChzaGlmdChnZXRQb3NpdGlvbigpLCBiYWNrd2FyZHMpKTtcbiAgICByZXR1cm4gYmFja3dhcmRzID8gc2hpZnRlZCA+PSAwIDogc2hpZnRlZCA8PSBsaXN0W3Jlc29sdmUoXCJzY3JvbGxXaWR0aFwiKV0gLSByZWN0KHRyYWNrKVtyZXNvbHZlKFwid2lkdGhcIildO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhjZWVkZWRMaW1pdChtYXgsIHBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBpc1VuZGVmaW5lZChwb3NpdGlvbikgPyBnZXRQb3NpdGlvbigpIDogcG9zaXRpb247XG4gICAgdmFyIGV4Y2VlZGVkTWluID0gbWF4ICE9PSB0cnVlICYmIG9yaWVudChwb3NpdGlvbikgPCBvcmllbnQoZ2V0TGltaXQoZmFsc2UpKTtcbiAgICB2YXIgZXhjZWVkZWRNYXggPSBtYXggIT09IGZhbHNlICYmIG9yaWVudChwb3NpdGlvbikgPiBvcmllbnQoZ2V0TGltaXQodHJ1ZSkpO1xuICAgIHJldHVybiBleGNlZWRlZE1pbiB8fCBleGNlZWRlZE1heDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIG1vdmU6IG1vdmUsXG4gICAganVtcDoganVtcCxcbiAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICBzaGlmdDogc2hpZnQsXG4gICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgdG9JbmRleDogdG9JbmRleCxcbiAgICB0b1Bvc2l0aW9uOiB0b1Bvc2l0aW9uLFxuICAgIGdldFBvc2l0aW9uOiBnZXRQb3NpdGlvbixcbiAgICBnZXRMaW1pdDogZ2V0TGltaXQsXG4gICAgZXhjZWVkZWRMaW1pdDogZXhjZWVkZWRMaW1pdCxcbiAgICByZXBvc2l0aW9uOiByZXBvc2l0aW9uXG4gIH07XG59XG5cbmZ1bmN0aW9uIENvbnRyb2xsZXIoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTUgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNS5vbixcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2U1LmVtaXQ7XG5cbiAgdmFyIE1vdmUgPSBDb21wb25lbnRzMi5Nb3ZlO1xuICB2YXIgZ2V0UG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uLFxuICAgICAgZ2V0TGltaXQgPSBNb3ZlLmdldExpbWl0LFxuICAgICAgdG9Qb3NpdGlvbiA9IE1vdmUudG9Qb3NpdGlvbjtcbiAgdmFyIF9Db21wb25lbnRzMiRTbGlkZXMgPSBDb21wb25lbnRzMi5TbGlkZXMsXG4gICAgICBpc0Vub3VnaCA9IF9Db21wb25lbnRzMiRTbGlkZXMuaXNFbm91Z2gsXG4gICAgICBnZXRMZW5ndGggPSBfQ29tcG9uZW50czIkU2xpZGVzLmdldExlbmd0aDtcbiAgdmFyIG9taXRFbmQgPSBvcHRpb25zLm9taXRFbmQ7XG4gIHZhciBpc0xvb3AgPSBTcGxpZGUyLmlzKExPT1ApO1xuICB2YXIgaXNTbGlkZSA9IFNwbGlkZTIuaXMoU0xJREUpO1xuICB2YXIgZ2V0TmV4dCA9IGFwcGx5KGdldEFkamFjZW50LCBmYWxzZSk7XG4gIHZhciBnZXRQcmV2ID0gYXBwbHkoZ2V0QWRqYWNlbnQsIHRydWUpO1xuICB2YXIgY3VyckluZGV4ID0gb3B0aW9ucy5zdGFydCB8fCAwO1xuICB2YXIgZW5kSW5kZXg7XG4gIHZhciBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gIHZhciBzbGlkZUNvdW50O1xuICB2YXIgcGVyTW92ZTtcbiAgdmFyIHBlclBhZ2U7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKFtFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNILCBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRF0sIGluaXQpO1xuICAgIG9uKEVWRU5UX1JFU0laRUQsIG9uUmVzaXplZCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHNsaWRlQ291bnQgPSBnZXRMZW5ndGgodHJ1ZSk7XG4gICAgcGVyTW92ZSA9IG9wdGlvbnMucGVyTW92ZTtcbiAgICBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlO1xuICAgIGVuZEluZGV4ID0gZ2V0RW5kKCk7XG4gICAgdmFyIGluZGV4ID0gY2xhbXAoY3VyckluZGV4LCAwLCBvbWl0RW5kID8gZW5kSW5kZXggOiBzbGlkZUNvdW50IC0gMSk7XG5cbiAgICBpZiAoaW5kZXggIT09IGN1cnJJbmRleCkge1xuICAgICAgY3VyckluZGV4ID0gaW5kZXg7XG4gICAgICBNb3ZlLnJlcG9zaXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblJlc2l6ZWQoKSB7XG4gICAgaWYgKGVuZEluZGV4ICE9PSBnZXRFbmQoKSkge1xuICAgICAgZW1pdChFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ28oY29udHJvbCwgYWxsb3dTYW1lSW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFpc0J1c3koKSkge1xuICAgICAgdmFyIGRlc3QgPSBwYXJzZShjb250cm9sKTtcbiAgICAgIHZhciBpbmRleCA9IGxvb3AoZGVzdCk7XG5cbiAgICAgIGlmIChpbmRleCA+IC0xICYmIChhbGxvd1NhbWVJbmRleCB8fCBpbmRleCAhPT0gY3VyckluZGV4KSkge1xuICAgICAgICBzZXRJbmRleChpbmRleCk7XG4gICAgICAgIE1vdmUubW92ZShkZXN0LCBpbmRleCwgcHJldkluZGV4LCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsKGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgc25hcCwgY2FsbGJhY2spIHtcbiAgICBDb21wb25lbnRzMi5TY3JvbGwuc2Nyb2xsKGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgc25hcCwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGluZGV4ID0gbG9vcChNb3ZlLnRvSW5kZXgoZ2V0UG9zaXRpb24oKSkpO1xuICAgICAgc2V0SW5kZXgob21pdEVuZCA/IG1pbihpbmRleCwgZW5kSW5kZXgpIDogaW5kZXgpO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlKGNvbnRyb2wpIHtcbiAgICB2YXIgaW5kZXggPSBjdXJySW5kZXg7XG5cbiAgICBpZiAoaXNTdHJpbmcoY29udHJvbCkpIHtcbiAgICAgIHZhciBfcmVmID0gY29udHJvbC5tYXRjaCgvKFsrXFwtPD5dKShcXGQrKT8vKSB8fCBbXSxcbiAgICAgICAgICBpbmRpY2F0b3IgPSBfcmVmWzFdLFxuICAgICAgICAgIG51bWJlciA9IF9yZWZbMl07XG5cbiAgICAgIGlmIChpbmRpY2F0b3IgPT09IFwiK1wiIHx8IGluZGljYXRvciA9PT0gXCItXCIpIHtcbiAgICAgICAgaW5kZXggPSBjb21wdXRlRGVzdEluZGV4KGN1cnJJbmRleCArICsoXCJcIiArIGluZGljYXRvciArICgrbnVtYmVyIHx8IDEpKSwgY3VyckluZGV4KTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kaWNhdG9yID09PSBcIj5cIikge1xuICAgICAgICBpbmRleCA9IG51bWJlciA/IHRvSW5kZXgoK251bWJlcikgOiBnZXROZXh0KHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChpbmRpY2F0b3IgPT09IFwiPFwiKSB7XG4gICAgICAgIGluZGV4ID0gZ2V0UHJldih0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5kZXggPSBpc0xvb3AgPyBjb250cm9sIDogY2xhbXAoY29udHJvbCwgMCwgZW5kSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFkamFjZW50KHByZXYsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIG51bWJlciA9IHBlck1vdmUgfHwgKGhhc0ZvY3VzKCkgPyAxIDogcGVyUGFnZSk7XG4gICAgdmFyIGRlc3QgPSBjb21wdXRlRGVzdEluZGV4KGN1cnJJbmRleCArIG51bWJlciAqIChwcmV2ID8gLTEgOiAxKSwgY3VyckluZGV4LCAhKHBlck1vdmUgfHwgaGFzRm9jdXMoKSkpO1xuXG4gICAgaWYgKGRlc3QgPT09IC0xICYmIGlzU2xpZGUpIHtcbiAgICAgIGlmICghYXBwcm94aW1hdGVseUVxdWFsKGdldFBvc2l0aW9uKCksIGdldExpbWl0KCFwcmV2KSwgMSkpIHtcbiAgICAgICAgcmV0dXJuIHByZXYgPyAwIDogZW5kSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uID8gZGVzdCA6IGxvb3AoZGVzdCk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlRGVzdEluZGV4KGRlc3QsIGZyb20sIHNuYXBQYWdlKSB7XG4gICAgaWYgKGlzRW5vdWdoKCkgfHwgaGFzRm9jdXMoKSkge1xuICAgICAgdmFyIGluZGV4ID0gY29tcHV0ZU1vdmFibGVEZXN0SW5kZXgoZGVzdCk7XG5cbiAgICAgIGlmIChpbmRleCAhPT0gZGVzdCkge1xuICAgICAgICBmcm9tID0gZGVzdDtcbiAgICAgICAgZGVzdCA9IGluZGV4O1xuICAgICAgICBzbmFwUGFnZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVzdCA8IDAgfHwgZGVzdCA+IGVuZEluZGV4KSB7XG4gICAgICAgIGlmICghcGVyTW92ZSAmJiAoYmV0d2VlbigwLCBkZXN0LCBmcm9tLCB0cnVlKSB8fCBiZXR3ZWVuKGVuZEluZGV4LCBmcm9tLCBkZXN0LCB0cnVlKSkpIHtcbiAgICAgICAgICBkZXN0ID0gdG9JbmRleCh0b1BhZ2UoZGVzdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0xvb3ApIHtcbiAgICAgICAgICAgIGRlc3QgPSBzbmFwUGFnZSA/IGRlc3QgPCAwID8gLShzbGlkZUNvdW50ICUgcGVyUGFnZSB8fCBwZXJQYWdlKSA6IHNsaWRlQ291bnQgOiBkZXN0O1xuICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5yZXdpbmQpIHtcbiAgICAgICAgICAgIGRlc3QgPSBkZXN0IDwgMCA/IGVuZEluZGV4IDogMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdCA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNuYXBQYWdlICYmIGRlc3QgIT09IGZyb20pIHtcbiAgICAgICAgICBkZXN0ID0gdG9JbmRleCh0b1BhZ2UoZnJvbSkgKyAoZGVzdCA8IGZyb20gPyAtMSA6IDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZXN0ID0gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlTW92YWJsZURlc3RJbmRleChkZXN0KSB7XG4gICAgaWYgKGlzU2xpZGUgJiYgb3B0aW9ucy50cmltU3BhY2UgPT09IFwibW92ZVwiICYmIGRlc3QgIT09IGN1cnJJbmRleCkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcblxuICAgICAgd2hpbGUgKHBvc2l0aW9uID09PSB0b1Bvc2l0aW9uKGRlc3QsIHRydWUpICYmIGJldHdlZW4oZGVzdCwgMCwgU3BsaWRlMi5sZW5ndGggLSAxLCAhb3B0aW9ucy5yZXdpbmQpKSB7XG4gICAgICAgIGRlc3QgPCBjdXJySW5kZXggPyAtLWRlc3QgOiArK2Rlc3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBsb29wKGluZGV4KSB7XG4gICAgcmV0dXJuIGlzTG9vcCA/IChpbmRleCArIHNsaWRlQ291bnQpICUgc2xpZGVDb3VudCB8fCAwIDogaW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFbmQoKSB7XG4gICAgdmFyIGVuZCA9IHNsaWRlQ291bnQgLSAoaGFzRm9jdXMoKSB8fCBpc0xvb3AgJiYgcGVyTW92ZSA/IDEgOiBwZXJQYWdlKTtcblxuICAgIHdoaWxlIChvbWl0RW5kICYmIGVuZC0tID4gMCkge1xuICAgICAgaWYgKHRvUG9zaXRpb24oc2xpZGVDb3VudCAtIDEsIHRydWUpICE9PSB0b1Bvc2l0aW9uKGVuZCwgdHJ1ZSkpIHtcbiAgICAgICAgZW5kKys7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbGFtcChlbmQsIDAsIHNsaWRlQ291bnQgLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSW5kZXgocGFnZSkge1xuICAgIHJldHVybiBjbGFtcChoYXNGb2N1cygpID8gcGFnZSA6IHBlclBhZ2UgKiBwYWdlLCAwLCBlbmRJbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiB0b1BhZ2UoaW5kZXgpIHtcbiAgICByZXR1cm4gaGFzRm9jdXMoKSA/IG1pbihpbmRleCwgZW5kSW5kZXgpIDogZmxvb3IoKGluZGV4ID49IGVuZEluZGV4ID8gc2xpZGVDb3VudCAtIDEgOiBpbmRleCkgLyBwZXJQYWdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvRGVzdChkZXN0aW5hdGlvbikge1xuICAgIHZhciBjbG9zZXN0ID0gTW92ZS50b0luZGV4KGRlc3RpbmF0aW9uKTtcbiAgICByZXR1cm4gaXNTbGlkZSA/IGNsYW1wKGNsb3Nlc3QsIDAsIGVuZEluZGV4KSA6IGNsb3Nlc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbmRleChpbmRleCkge1xuICAgIGlmIChpbmRleCAhPT0gY3VyckluZGV4KSB7XG4gICAgICBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gICAgICBjdXJySW5kZXggPSBpbmRleDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbmRleChwcmV2KSB7XG4gICAgcmV0dXJuIHByZXYgPyBwcmV2SW5kZXggOiBjdXJySW5kZXg7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gIWlzVW5kZWZpbmVkKG9wdGlvbnMuZm9jdXMpIHx8IG9wdGlvbnMuaXNOYXZpZ2F0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNCdXN5KCkge1xuICAgIHJldHVybiBTcGxpZGUyLnN0YXRlLmlzKFtNT1ZJTkcsIFNDUk9MTElOR10pICYmICEhb3B0aW9ucy53YWl0Rm9yVHJhbnNpdGlvbjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGdvOiBnbyxcbiAgICBzY3JvbGw6IHNjcm9sbCxcbiAgICBnZXROZXh0OiBnZXROZXh0LFxuICAgIGdldFByZXY6IGdldFByZXYsXG4gICAgZ2V0QWRqYWNlbnQ6IGdldEFkamFjZW50LFxuICAgIGdldEVuZDogZ2V0RW5kLFxuICAgIHNldEluZGV4OiBzZXRJbmRleCxcbiAgICBnZXRJbmRleDogZ2V0SW5kZXgsXG4gICAgdG9JbmRleDogdG9JbmRleCxcbiAgICB0b1BhZ2U6IHRvUGFnZSxcbiAgICB0b0Rlc3Q6IHRvRGVzdCxcbiAgICBoYXNGb2N1czogaGFzRm9jdXMsXG4gICAgaXNCdXN5OiBpc0J1c3lcbiAgfTtcbn1cblxudmFyIFhNTF9OQU1FX1NQQUNFID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xudmFyIFBBVEggPSBcIm0xNS41IDAuOTMyLTQuMyA0LjM4IDE0LjUgMTQuNi0xNC41IDE0LjUgNC4zIDQuNCAxNC42LTE0LjYgNC40LTQuMy00LjQtNC40LTE0LjYtMTQuNnpcIjtcbnZhciBTSVpFID0gNDA7XG5cbmZ1bmN0aW9uIEFycm93cyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgdmFyIG9uID0gZXZlbnQub24sXG4gICAgICBiaW5kID0gZXZlbnQuYmluZCxcbiAgICAgIGVtaXQgPSBldmVudC5lbWl0O1xuICB2YXIgY2xhc3NlcyA9IG9wdGlvbnMuY2xhc3NlcyxcbiAgICAgIGkxOG4gPSBvcHRpb25zLmkxOG47XG4gIHZhciBFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgQ29udHJvbGxlciA9IENvbXBvbmVudHMyLkNvbnRyb2xsZXI7XG4gIHZhciBwbGFjZWhvbGRlciA9IEVsZW1lbnRzLmFycm93cyxcbiAgICAgIHRyYWNrID0gRWxlbWVudHMudHJhY2s7XG4gIHZhciB3cmFwcGVyID0gcGxhY2Vob2xkZXI7XG4gIHZhciBwcmV2ID0gRWxlbWVudHMucHJldjtcbiAgdmFyIG5leHQgPSBFbGVtZW50cy5uZXh0O1xuICB2YXIgY3JlYXRlZDtcbiAgdmFyIHdyYXBwZXJDbGFzc2VzO1xuICB2YXIgYXJyb3dzID0ge307XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaW5pdCgpO1xuICAgIG9uKEVWRU5UX1VQREFURUQsIHJlbW91bnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGVuYWJsZWQgPSBvcHRpb25zLmFycm93cztcblxuICAgIGlmIChlbmFibGVkICYmICEocHJldiAmJiBuZXh0KSkge1xuICAgICAgY3JlYXRlQXJyb3dzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByZXYgJiYgbmV4dCkge1xuICAgICAgYXNzaWduKGFycm93cywge1xuICAgICAgICBwcmV2OiBwcmV2LFxuICAgICAgICBuZXh0OiBuZXh0XG4gICAgICB9KTtcbiAgICAgIGRpc3BsYXkod3JhcHBlciwgZW5hYmxlZCA/IFwiXCIgOiBcIm5vbmVcIik7XG4gICAgICBhZGRDbGFzcyh3cmFwcGVyLCB3cmFwcGVyQ2xhc3NlcyA9IENMQVNTX0FSUk9XUyArIFwiLS1cIiArIG9wdGlvbnMuZGlyZWN0aW9uKTtcblxuICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgbGlzdGVuKCk7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgICBzZXRBdHRyaWJ1dGUoW3ByZXYsIG5leHRdLCBBUklBX0NPTlRST0xTLCB0cmFjay5pZCk7XG4gICAgICAgIGVtaXQoRVZFTlRfQVJST1dTX01PVU5URUQsIHByZXYsIG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgZXZlbnQuZGVzdHJveSgpO1xuICAgIHJlbW92ZUNsYXNzKHdyYXBwZXIsIHdyYXBwZXJDbGFzc2VzKTtcblxuICAgIGlmIChjcmVhdGVkKSB7XG4gICAgICByZW1vdmUocGxhY2Vob2xkZXIgPyBbcHJldiwgbmV4dF0gOiB3cmFwcGVyKTtcbiAgICAgIHByZXYgPSBuZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlQXR0cmlidXRlKFtwcmV2LCBuZXh0XSwgQUxMX0FUVFJJQlVURVMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfTU9WRUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX1NDUk9MTEVELCBFVkVOVF9FTkRfSU5ERVhfQ0hBTkdFRF0sIHVwZGF0ZSk7XG4gICAgYmluZChuZXh0LCBcImNsaWNrXCIsIGFwcGx5KGdvLCBcIj5cIikpO1xuICAgIGJpbmQocHJldiwgXCJjbGlja1wiLCBhcHBseShnbywgXCI8XCIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGNvbnRyb2wpIHtcbiAgICBDb250cm9sbGVyLmdvKGNvbnRyb2wsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3dzKCkge1xuICAgIHdyYXBwZXIgPSBwbGFjZWhvbGRlciB8fCBjcmVhdGUoXCJkaXZcIiwgY2xhc3Nlcy5hcnJvd3MpO1xuICAgIHByZXYgPSBjcmVhdGVBcnJvdyh0cnVlKTtcbiAgICBuZXh0ID0gY3JlYXRlQXJyb3coZmFsc2UpO1xuICAgIGNyZWF0ZWQgPSB0cnVlO1xuICAgIGFwcGVuZCh3cmFwcGVyLCBbcHJldiwgbmV4dF0pO1xuICAgICFwbGFjZWhvbGRlciAmJiBiZWZvcmUod3JhcHBlciwgdHJhY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyb3cocHJldjIpIHtcbiAgICB2YXIgYXJyb3cgPSBcIjxidXR0b24gY2xhc3M9XFxcIlwiICsgY2xhc3Nlcy5hcnJvdyArIFwiIFwiICsgKHByZXYyID8gY2xhc3Nlcy5wcmV2IDogY2xhc3Nlcy5uZXh0KSArIFwiXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiPjxzdmcgeG1sbnM9XFxcIlwiICsgWE1MX05BTUVfU1BBQ0UgKyBcIlxcXCIgdmlld0JveD1cXFwiMCAwIFwiICsgU0laRSArIFwiIFwiICsgU0laRSArIFwiXFxcIiB3aWR0aD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiIGZvY3VzYWJsZT1cXFwiZmFsc2VcXFwiPjxwYXRoIGQ9XFxcIlwiICsgKG9wdGlvbnMuYXJyb3dQYXRoIHx8IFBBVEgpICsgXCJcXFwiIC8+XCI7XG4gICAgcmV0dXJuIHBhcnNlSHRtbChhcnJvdyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgaWYgKHByZXYgJiYgbmV4dCkge1xuICAgICAgdmFyIGluZGV4ID0gU3BsaWRlMi5pbmRleDtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBDb250cm9sbGVyLmdldFByZXYoKTtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBDb250cm9sbGVyLmdldE5leHQoKTtcbiAgICAgIHZhciBwcmV2TGFiZWwgPSBwcmV2SW5kZXggPiAtMSAmJiBpbmRleCA8IHByZXZJbmRleCA/IGkxOG4ubGFzdCA6IGkxOG4ucHJldjtcbiAgICAgIHZhciBuZXh0TGFiZWwgPSBuZXh0SW5kZXggPiAtMSAmJiBpbmRleCA+IG5leHRJbmRleCA/IGkxOG4uZmlyc3QgOiBpMThuLm5leHQ7XG4gICAgICBwcmV2LmRpc2FibGVkID0gcHJldkluZGV4IDwgMDtcbiAgICAgIG5leHQuZGlzYWJsZWQgPSBuZXh0SW5kZXggPCAwO1xuICAgICAgc2V0QXR0cmlidXRlKHByZXYsIEFSSUFfTEFCRUwsIHByZXZMYWJlbCk7XG4gICAgICBzZXRBdHRyaWJ1dGUobmV4dCwgQVJJQV9MQUJFTCwgbmV4dExhYmVsKTtcbiAgICAgIGVtaXQoRVZFTlRfQVJST1dTX1VQREFURUQsIHByZXYsIG5leHQsIHByZXZJbmRleCwgbmV4dEluZGV4KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFycm93czogYXJyb3dzLFxuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIHVwZGF0ZTogdXBkYXRlXG4gIH07XG59XG5cbnZhciBJTlRFUlZBTF9EQVRBX0FUVFJJQlVURSA9IERBVEFfQVRUUklCVVRFICsgXCItaW50ZXJ2YWxcIjtcblxuZnVuY3Rpb24gQXV0b3BsYXkoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTYgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNi5vbixcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2U2LmJpbmQsXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlNi5lbWl0O1xuXG4gIHZhciBpbnRlcnZhbCA9IFJlcXVlc3RJbnRlcnZhbChvcHRpb25zLmludGVydmFsLCBTcGxpZGUyLmdvLmJpbmQoU3BsaWRlMiwgXCI+XCIpLCBvbkFuaW1hdGlvbkZyYW1lKTtcbiAgdmFyIGlzUGF1c2VkID0gaW50ZXJ2YWwuaXNQYXVzZWQ7XG4gIHZhciBFbGVtZW50cyA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgX0NvbXBvbmVudHMyJEVsZW1lbnRzNCA9IENvbXBvbmVudHMyLkVsZW1lbnRzLFxuICAgICAgcm9vdCA9IF9Db21wb25lbnRzMiRFbGVtZW50czQucm9vdCxcbiAgICAgIHRvZ2dsZSA9IF9Db21wb25lbnRzMiRFbGVtZW50czQudG9nZ2xlO1xuICB2YXIgYXV0b3BsYXkgPSBvcHRpb25zLmF1dG9wbGF5O1xuICB2YXIgaG92ZXJlZDtcbiAgdmFyIGZvY3VzZWQ7XG4gIHZhciBzdG9wcGVkID0gYXV0b3BsYXkgPT09IFwicGF1c2VcIjtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgIGxpc3RlbigpO1xuICAgICAgdG9nZ2xlICYmIHNldEF0dHJpYnV0ZSh0b2dnbGUsIEFSSUFfQ09OVFJPTFMsIEVsZW1lbnRzLnRyYWNrLmlkKTtcbiAgICAgIHN0b3BwZWQgfHwgcGxheSgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKCkge1xuICAgIGlmIChvcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgYmluZChyb290LCBcIm1vdXNlZW50ZXIgbW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBob3ZlcmVkID0gZS50eXBlID09PSBcIm1vdXNlZW50ZXJcIjtcbiAgICAgICAgYXV0b1RvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucGF1c2VPbkZvY3VzKSB7XG4gICAgICBiaW5kKHJvb3QsIFwiZm9jdXNpbiBmb2N1c291dFwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBmb2N1c2VkID0gZS50eXBlID09PSBcImZvY3VzaW5cIjtcbiAgICAgICAgYXV0b1RvZ2dsZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRvZ2dsZSkge1xuICAgICAgYmluZCh0b2dnbGUsIFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wcGVkID8gcGxheSgpIDogcGF1c2UodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBvbihbRVZFTlRfTU9WRSwgRVZFTlRfU0NST0xMLCBFVkVOVF9SRUZSRVNIXSwgaW50ZXJ2YWwucmV3aW5kKTtcbiAgICBvbihFVkVOVF9NT1ZFLCBvbk1vdmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoaXNQYXVzZWQoKSAmJiBDb21wb25lbnRzMi5TbGlkZXMuaXNFbm91Z2goKSkge1xuICAgICAgaW50ZXJ2YWwuc3RhcnQoIW9wdGlvbnMucmVzZXRQcm9ncmVzcyk7XG4gICAgICBmb2N1c2VkID0gaG92ZXJlZCA9IHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgZW1pdChFVkVOVF9BVVRPUExBWV9QTEFZKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZShzdG9wKSB7XG4gICAgaWYgKHN0b3AgPT09IHZvaWQgMCkge1xuICAgICAgc3RvcCA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RvcHBlZCA9ICEhc3RvcDtcbiAgICB1cGRhdGUoKTtcblxuICAgIGlmICghaXNQYXVzZWQoKSkge1xuICAgICAgaW50ZXJ2YWwucGF1c2UoKTtcbiAgICAgIGVtaXQoRVZFTlRfQVVUT1BMQVlfUEFVU0UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGF1dG9Ub2dnbGUoKSB7XG4gICAgaWYgKCFzdG9wcGVkKSB7XG4gICAgICBob3ZlcmVkIHx8IGZvY3VzZWQgPyBwYXVzZShmYWxzZSkgOiBwbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGlmICh0b2dnbGUpIHtcbiAgICAgIHRvZ2dsZUNsYXNzKHRvZ2dsZSwgQ0xBU1NfQUNUSVZFLCAhc3RvcHBlZCk7XG4gICAgICBzZXRBdHRyaWJ1dGUodG9nZ2xlLCBBUklBX0xBQkVMLCBvcHRpb25zLmkxOG5bc3RvcHBlZCA/IFwicGxheVwiIDogXCJwYXVzZVwiXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZShyYXRlKSB7XG4gICAgdmFyIGJhciA9IEVsZW1lbnRzLmJhcjtcbiAgICBiYXIgJiYgc3R5bGUoYmFyLCBcIndpZHRoXCIsIHJhdGUgKiAxMDAgKyBcIiVcIik7XG4gICAgZW1pdChFVkVOVF9BVVRPUExBWV9QTEFZSU5HLCByYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW92ZShpbmRleCkge1xuICAgIHZhciBTbGlkZSA9IENvbXBvbmVudHMyLlNsaWRlcy5nZXRBdChpbmRleCk7XG4gICAgaW50ZXJ2YWwuc2V0KFNsaWRlICYmICtnZXRBdHRyaWJ1dGUoU2xpZGUuc2xpZGUsIElOVEVSVkFMX0RBVEFfQVRUUklCVVRFKSB8fCBvcHRpb25zLmludGVydmFsKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGludGVydmFsLmNhbmNlbCxcbiAgICBwbGF5OiBwbGF5LFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBpc1BhdXNlZDogaXNQYXVzZWRcbiAgfTtcbn1cblxuZnVuY3Rpb24gQ292ZXIoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTcgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlNy5vbjtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpZiAob3B0aW9ucy5jb3Zlcikge1xuICAgICAgb24oRVZFTlRfTEFaWUxPQURfTE9BREVELCBhcHBseSh0b2dnbGUsIHRydWUpKTtcbiAgICAgIG9uKFtFVkVOVF9NT1VOVEVELCBFVkVOVF9VUERBVEVELCBFVkVOVF9SRUZSRVNIXSwgYXBwbHkoY292ZXIsIHRydWUpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3Zlcihjb3ZlcjIpIHtcbiAgICBDb21wb25lbnRzMi5TbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgIHZhciBpbWcgPSBjaGlsZChTbGlkZS5jb250YWluZXIgfHwgU2xpZGUuc2xpZGUsIFwiaW1nXCIpO1xuXG4gICAgICBpZiAoaW1nICYmIGltZy5zcmMpIHtcbiAgICAgICAgdG9nZ2xlKGNvdmVyMiwgaW1nLCBTbGlkZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGUoY292ZXIyLCBpbWcsIFNsaWRlKSB7XG4gICAgU2xpZGUuc3R5bGUoXCJiYWNrZ3JvdW5kXCIsIGNvdmVyMiA/IFwiY2VudGVyL2NvdmVyIG5vLXJlcGVhdCB1cmwoXFxcIlwiICsgaW1nLnNyYyArIFwiXFxcIilcIiA6IFwiXCIsIHRydWUpO1xuICAgIGRpc3BsYXkoaW1nLCBjb3ZlcjIgPyBcIm5vbmVcIiA6IFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogYXBwbHkoY292ZXIsIGZhbHNlKVxuICB9O1xufVxuXG52YXIgQk9VTkNFX0RJRkZfVEhSRVNIT0xEID0gMTA7XG52YXIgQk9VTkNFX0RVUkFUSU9OID0gNjAwO1xudmFyIEZSSUNUSU9OX0ZBQ1RPUiA9IDAuNjtcbnZhciBCQVNFX1ZFTE9DSVRZID0gMS41O1xudmFyIE1JTl9EVVJBVElPTiA9IDgwMDtcblxuZnVuY3Rpb24gU2Nyb2xsKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBfRXZlbnRJbnRlcmZhY2U4ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTgub24sXG4gICAgICBlbWl0ID0gX0V2ZW50SW50ZXJmYWNlOC5lbWl0O1xuXG4gIHZhciBzZXQgPSBTcGxpZGUyLnN0YXRlLnNldDtcbiAgdmFyIE1vdmUgPSBDb21wb25lbnRzMi5Nb3ZlO1xuICB2YXIgZ2V0UG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uLFxuICAgICAgZ2V0TGltaXQgPSBNb3ZlLmdldExpbWl0LFxuICAgICAgZXhjZWVkZWRMaW1pdCA9IE1vdmUuZXhjZWVkZWRMaW1pdCxcbiAgICAgIHRyYW5zbGF0ZSA9IE1vdmUudHJhbnNsYXRlO1xuICB2YXIgaXNTbGlkZSA9IFNwbGlkZTIuaXMoU0xJREUpO1xuICB2YXIgaW50ZXJ2YWw7XG4gIHZhciBjYWxsYmFjaztcbiAgdmFyIGZyaWN0aW9uID0gMTtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBvbihFVkVOVF9NT1ZFLCBjbGVhcik7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0hdLCBjYW5jZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2Nyb2xsKGRlc3RpbmF0aW9uLCBkdXJhdGlvbiwgc25hcCwgb25TY3JvbGxlZCwgbm9Db25zdHJhaW4pIHtcbiAgICB2YXIgZnJvbSA9IGdldFBvc2l0aW9uKCk7XG4gICAgY2xlYXIoKTtcblxuICAgIGlmIChzbmFwICYmICghaXNTbGlkZSB8fCAhZXhjZWVkZWRMaW1pdCgpKSkge1xuICAgICAgdmFyIHNpemUgPSBDb21wb25lbnRzMi5MYXlvdXQuc2xpZGVyU2l6ZSgpO1xuICAgICAgdmFyIG9mZnNldCA9IHNpZ24oZGVzdGluYXRpb24pICogc2l6ZSAqIGZsb29yKGFicyhkZXN0aW5hdGlvbikgLyBzaXplKSB8fCAwO1xuICAgICAgZGVzdGluYXRpb24gPSBNb3ZlLnRvUG9zaXRpb24oQ29tcG9uZW50czIuQ29udHJvbGxlci50b0Rlc3QoZGVzdGluYXRpb24gJSBzaXplKSkgKyBvZmZzZXQ7XG4gICAgfVxuXG4gICAgdmFyIG5vRGlzdGFuY2UgPSBhcHByb3hpbWF0ZWx5RXF1YWwoZnJvbSwgZGVzdGluYXRpb24sIDEpO1xuICAgIGZyaWN0aW9uID0gMTtcbiAgICBkdXJhdGlvbiA9IG5vRGlzdGFuY2UgPyAwIDogZHVyYXRpb24gfHwgbWF4KGFicyhkZXN0aW5hdGlvbiAtIGZyb20pIC8gQkFTRV9WRUxPQ0lUWSwgTUlOX0RVUkFUSU9OKTtcbiAgICBjYWxsYmFjayA9IG9uU2Nyb2xsZWQ7XG4gICAgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoZHVyYXRpb24sIG9uRW5kLCBhcHBseSh1cGRhdGUsIGZyb20sIGRlc3RpbmF0aW9uLCBub0NvbnN0cmFpbiksIDEpO1xuICAgIHNldChTQ1JPTExJTkcpO1xuICAgIGVtaXQoRVZFTlRfU0NST0xMKTtcbiAgICBpbnRlcnZhbC5zdGFydCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25FbmQoKSB7XG4gICAgc2V0KElETEUpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgZW1pdChFVkVOVF9TQ1JPTExFRCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoZnJvbSwgdG8sIG5vQ29uc3RyYWluLCByYXRlKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgICB2YXIgdGFyZ2V0ID0gZnJvbSArICh0byAtIGZyb20pICogZWFzaW5nKHJhdGUpO1xuICAgIHZhciBkaWZmID0gKHRhcmdldCAtIHBvc2l0aW9uKSAqIGZyaWN0aW9uO1xuICAgIHRyYW5zbGF0ZShwb3NpdGlvbiArIGRpZmYpO1xuXG4gICAgaWYgKGlzU2xpZGUgJiYgIW5vQ29uc3RyYWluICYmIGV4Y2VlZGVkTGltaXQoKSkge1xuICAgICAgZnJpY3Rpb24gKj0gRlJJQ1RJT05fRkFDVE9SO1xuXG4gICAgICBpZiAoYWJzKGRpZmYpIDwgQk9VTkNFX0RJRkZfVEhSRVNIT0xEKSB7XG4gICAgICAgIHNjcm9sbChnZXRMaW1pdChleGNlZWRlZExpbWl0KHRydWUpKSwgQk9VTkNFX0RVUkFUSU9OLCBmYWxzZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGlmIChpbnRlcnZhbCkge1xuICAgICAgaW50ZXJ2YWwuY2FuY2VsKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmIChpbnRlcnZhbCAmJiAhaW50ZXJ2YWwuaXNQYXVzZWQoKSkge1xuICAgICAgY2xlYXIoKTtcbiAgICAgIG9uRW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZWFzaW5nKHQpIHtcbiAgICB2YXIgZWFzaW5nRnVuYyA9IG9wdGlvbnMuZWFzaW5nRnVuYztcbiAgICByZXR1cm4gZWFzaW5nRnVuYyA/IGVhc2luZ0Z1bmModCkgOiAxIC0gTWF0aC5wb3coMSAtIHQsIDQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogY2xlYXIsXG4gICAgc2Nyb2xsOiBzY3JvbGwsXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn1cblxudmFyIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TID0ge1xuICBwYXNzaXZlOiBmYWxzZSxcbiAgY2FwdHVyZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gRHJhZyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlOSA9IEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLFxuICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2U5Lm9uLFxuICAgICAgZW1pdCA9IF9FdmVudEludGVyZmFjZTkuZW1pdCxcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2U5LmJpbmQsXG4gICAgICB1bmJpbmQgPSBfRXZlbnRJbnRlcmZhY2U5LnVuYmluZDtcblxuICB2YXIgc3RhdGUgPSBTcGxpZGUyLnN0YXRlO1xuICB2YXIgTW92ZSA9IENvbXBvbmVudHMyLk1vdmUsXG4gICAgICBTY3JvbGwgPSBDb21wb25lbnRzMi5TY3JvbGwsXG4gICAgICBDb250cm9sbGVyID0gQ29tcG9uZW50czIuQ29udHJvbGxlcixcbiAgICAgIHRyYWNrID0gQ29tcG9uZW50czIuRWxlbWVudHMudHJhY2ssXG4gICAgICByZWR1Y2UgPSBDb21wb25lbnRzMi5NZWRpYS5yZWR1Y2U7XG4gIHZhciBfQ29tcG9uZW50czIkRGlyZWN0aW8yID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLFxuICAgICAgcmVzb2x2ZSA9IF9Db21wb25lbnRzMiREaXJlY3RpbzIucmVzb2x2ZSxcbiAgICAgIG9yaWVudCA9IF9Db21wb25lbnRzMiREaXJlY3RpbzIub3JpZW50O1xuICB2YXIgZ2V0UG9zaXRpb24gPSBNb3ZlLmdldFBvc2l0aW9uLFxuICAgICAgZXhjZWVkZWRMaW1pdCA9IE1vdmUuZXhjZWVkZWRMaW1pdDtcbiAgdmFyIGJhc2VQb3NpdGlvbjtcbiAgdmFyIGJhc2VFdmVudDtcbiAgdmFyIHByZXZCYXNlRXZlbnQ7XG4gIHZhciBpc0ZyZWU7XG4gIHZhciBkcmFnZ2luZztcbiAgdmFyIGV4Y2VlZGVkID0gZmFsc2U7XG4gIHZhciBjbGlja1ByZXZlbnRlZDtcbiAgdmFyIGRpc2FibGVkO1xuICB2YXIgdGFyZ2V0O1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGJpbmQodHJhY2ssIFBPSU5URVJfTU9WRV9FVkVOVFMsIG5vb3AsIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBQT0lOVEVSX1VQX0VWRU5UUywgbm9vcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgIGJpbmQodHJhY2ssIFBPSU5URVJfRE9XTl9FVkVOVFMsIG9uUG9pbnRlckRvd24sIFNDUk9MTF9MSVNURU5FUl9PUFRJT05TKTtcbiAgICBiaW5kKHRyYWNrLCBcImNsaWNrXCIsIG9uQ2xpY2ssIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KTtcbiAgICBiaW5kKHRyYWNrLCBcImRyYWdzdGFydFwiLCBwcmV2ZW50KTtcbiAgICBvbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfVVBEQVRFRF0sIGluaXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgZHJhZyA9IG9wdGlvbnMuZHJhZztcbiAgICBkaXNhYmxlKCFkcmFnKTtcbiAgICBpc0ZyZWUgPSBkcmFnID09PSBcImZyZWVcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlckRvd24oZSkge1xuICAgIGNsaWNrUHJldmVudGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICB2YXIgaXNUb3VjaCA9IGlzVG91Y2hFdmVudChlKTtcblxuICAgICAgaWYgKGlzRHJhZ2dhYmxlKGUudGFyZ2V0KSAmJiAoaXNUb3VjaCB8fCAhZS5idXR0b24pKSB7XG4gICAgICAgIGlmICghQ29udHJvbGxlci5pc0J1c3koKSkge1xuICAgICAgICAgIHRhcmdldCA9IGlzVG91Y2ggPyB0cmFjayA6IHdpbmRvdztcbiAgICAgICAgICBkcmFnZ2luZyA9IHN0YXRlLmlzKFtNT1ZJTkcsIFNDUk9MTElOR10pO1xuICAgICAgICAgIHByZXZCYXNlRXZlbnQgPSBudWxsO1xuICAgICAgICAgIGJpbmQodGFyZ2V0LCBQT0lOVEVSX01PVkVfRVZFTlRTLCBvblBvaW50ZXJNb3ZlLCBTQ1JPTExfTElTVEVORVJfT1BUSU9OUyk7XG4gICAgICAgICAgYmluZCh0YXJnZXQsIFBPSU5URVJfVVBfRVZFTlRTLCBvblBvaW50ZXJVcCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgICAgICAgIE1vdmUuY2FuY2VsKCk7XG4gICAgICAgICAgU2Nyb2xsLmNhbmNlbCgpO1xuICAgICAgICAgIHNhdmUoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlck1vdmUoZSkge1xuICAgIGlmICghc3RhdGUuaXMoRFJBR0dJTkcpKSB7XG4gICAgICBzdGF0ZS5zZXQoRFJBR0dJTkcpO1xuICAgICAgZW1pdChFVkVOVF9EUkFHKTtcbiAgICB9XG5cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBpZiAoZHJhZ2dpbmcpIHtcbiAgICAgICAgTW92ZS50cmFuc2xhdGUoYmFzZVBvc2l0aW9uICsgY29uc3RyYWluKGRpZmZDb29yZChlKSkpO1xuICAgICAgICB2YXIgZXhwaXJlZCA9IGRpZmZUaW1lKGUpID4gTE9HX0lOVEVSVkFMO1xuICAgICAgICB2YXIgaGFzRXhjZWVkZWQgPSBleGNlZWRlZCAhPT0gKGV4Y2VlZGVkID0gZXhjZWVkZWRMaW1pdCgpKTtcblxuICAgICAgICBpZiAoZXhwaXJlZCB8fCBoYXNFeGNlZWRlZCkge1xuICAgICAgICAgIHNhdmUoZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjbGlja1ByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgIGVtaXQoRVZFTlRfRFJBR0dJTkcpO1xuICAgICAgICBwcmV2ZW50KGUpO1xuICAgICAgfSBlbHNlIGlmIChpc1NsaWRlckRpcmVjdGlvbihlKSkge1xuICAgICAgICBkcmFnZ2luZyA9IHNob3VsZFN0YXJ0KGUpO1xuICAgICAgICBwcmV2ZW50KGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9pbnRlclVwKGUpIHtcbiAgICBpZiAoc3RhdGUuaXMoRFJBR0dJTkcpKSB7XG4gICAgICBzdGF0ZS5zZXQoSURMRSk7XG4gICAgICBlbWl0KEVWRU5UX0RSQUdHRUQpO1xuICAgIH1cblxuICAgIGlmIChkcmFnZ2luZykge1xuICAgICAgbW92ZShlKTtcbiAgICAgIHByZXZlbnQoZSk7XG4gICAgfVxuXG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9NT1ZFX0VWRU5UUywgb25Qb2ludGVyTW92ZSk7XG4gICAgdW5iaW5kKHRhcmdldCwgUE9JTlRFUl9VUF9FVkVOVFMsIG9uUG9pbnRlclVwKTtcbiAgICBkcmFnZ2luZyA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgaWYgKCFkaXNhYmxlZCAmJiBjbGlja1ByZXZlbnRlZCkge1xuICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzYXZlKGUpIHtcbiAgICBwcmV2QmFzZUV2ZW50ID0gYmFzZUV2ZW50O1xuICAgIGJhc2VFdmVudCA9IGU7XG4gICAgYmFzZVBvc2l0aW9uID0gZ2V0UG9zaXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmUoZSkge1xuICAgIHZhciB2ZWxvY2l0eSA9IGNvbXB1dGVWZWxvY2l0eShlKTtcbiAgICB2YXIgZGVzdGluYXRpb24gPSBjb21wdXRlRGVzdGluYXRpb24odmVsb2NpdHkpO1xuICAgIHZhciByZXdpbmQgPSBvcHRpb25zLnJld2luZCAmJiBvcHRpb25zLnJld2luZEJ5RHJhZztcbiAgICByZWR1Y2UoZmFsc2UpO1xuXG4gICAgaWYgKGlzRnJlZSkge1xuICAgICAgQ29udHJvbGxlci5zY3JvbGwoZGVzdGluYXRpb24sIDAsIG9wdGlvbnMuc25hcCk7XG4gICAgfSBlbHNlIGlmIChTcGxpZGUyLmlzKEZBREUpKSB7XG4gICAgICBDb250cm9sbGVyLmdvKG9yaWVudChzaWduKHZlbG9jaXR5KSkgPCAwID8gcmV3aW5kID8gXCI8XCIgOiBcIi1cIiA6IHJld2luZCA/IFwiPlwiIDogXCIrXCIpO1xuICAgIH0gZWxzZSBpZiAoU3BsaWRlMi5pcyhTTElERSkgJiYgZXhjZWVkZWQgJiYgcmV3aW5kKSB7XG4gICAgICBDb250cm9sbGVyLmdvKGV4Y2VlZGVkTGltaXQodHJ1ZSkgPyBcIj5cIiA6IFwiPFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQ29udHJvbGxlci5nbyhDb250cm9sbGVyLnRvRGVzdChkZXN0aW5hdGlvbiksIHRydWUpO1xuICAgIH1cblxuICAgIHJlZHVjZSh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFN0YXJ0KGUpIHtcbiAgICB2YXIgdGhyZXNob2xkcyA9IG9wdGlvbnMuZHJhZ01pblRocmVzaG9sZDtcbiAgICB2YXIgaXNPYmogPSBpc09iamVjdCh0aHJlc2hvbGRzKTtcbiAgICB2YXIgbW91c2UgPSBpc09iaiAmJiB0aHJlc2hvbGRzLm1vdXNlIHx8IDA7XG4gICAgdmFyIHRvdWNoID0gKGlzT2JqID8gdGhyZXNob2xkcy50b3VjaCA6ICt0aHJlc2hvbGRzKSB8fCAxMDtcbiAgICByZXR1cm4gYWJzKGRpZmZDb29yZChlKSkgPiAoaXNUb3VjaEV2ZW50KGUpID8gdG91Y2ggOiBtb3VzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1NsaWRlckRpcmVjdGlvbihlKSB7XG4gICAgcmV0dXJuIGFicyhkaWZmQ29vcmQoZSkpID4gYWJzKGRpZmZDb29yZChlLCB0cnVlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wdXRlVmVsb2NpdHkoZSkge1xuICAgIGlmIChTcGxpZGUyLmlzKExPT1ApIHx8ICFleGNlZWRlZCkge1xuICAgICAgdmFyIHRpbWUgPSBkaWZmVGltZShlKTtcblxuICAgICAgaWYgKHRpbWUgJiYgdGltZSA8IExPR19JTlRFUlZBTCkge1xuICAgICAgICByZXR1cm4gZGlmZkNvb3JkKGUpIC8gdGltZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVEZXN0aW5hdGlvbih2ZWxvY2l0eSkge1xuICAgIHJldHVybiBnZXRQb3NpdGlvbigpICsgc2lnbih2ZWxvY2l0eSkgKiBtaW4oYWJzKHZlbG9jaXR5KSAqIChvcHRpb25zLmZsaWNrUG93ZXIgfHwgNjAwKSwgaXNGcmVlID8gSW5maW5pdHkgOiBDb21wb25lbnRzMi5MYXlvdXQubGlzdFNpemUoKSAqIChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlmZkNvb3JkKGUsIG9ydGhvZ29uYWwpIHtcbiAgICByZXR1cm4gY29vcmRPZihlLCBvcnRob2dvbmFsKSAtIGNvb3JkT2YoZ2V0QmFzZUV2ZW50KGUpLCBvcnRob2dvbmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpZmZUaW1lKGUpIHtcbiAgICByZXR1cm4gdGltZU9mKGUpIC0gdGltZU9mKGdldEJhc2VFdmVudChlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlRXZlbnQoZSkge1xuICAgIHJldHVybiBiYXNlRXZlbnQgPT09IGUgJiYgcHJldkJhc2VFdmVudCB8fCBiYXNlRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBjb29yZE9mKGUsIG9ydGhvZ29uYWwpIHtcbiAgICByZXR1cm4gKGlzVG91Y2hFdmVudChlKSA/IGUuY2hhbmdlZFRvdWNoZXNbMF0gOiBlKVtcInBhZ2VcIiArIHJlc29sdmUob3J0aG9nb25hbCA/IFwiWVwiIDogXCJYXCIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0cmFpbihkaWZmKSB7XG4gICAgcmV0dXJuIGRpZmYgLyAoZXhjZWVkZWQgJiYgU3BsaWRlMi5pcyhTTElERSkgPyBGUklDVElPTiA6IDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNEcmFnZ2FibGUodGFyZ2V0Mikge1xuICAgIHZhciBub0RyYWcgPSBvcHRpb25zLm5vRHJhZztcbiAgICByZXR1cm4gIW1hdGNoZXModGFyZ2V0MiwgXCIuXCIgKyBDTEFTU19QQUdJTkFUSU9OX1BBR0UgKyBcIiwgLlwiICsgQ0xBU1NfQVJST1cpICYmICghbm9EcmFnIHx8ICFtYXRjaGVzKHRhcmdldDIsIG5vRHJhZykpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUb3VjaEV2ZW50KGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIFRvdWNoRXZlbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgZSBpbnN0YW5jZW9mIFRvdWNoRXZlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBpc0RyYWdnaW5nKCkge1xuICAgIHJldHVybiBkcmFnZ2luZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUodmFsdWUpIHtcbiAgICBkaXNhYmxlZCA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGlzYWJsZTogZGlzYWJsZSxcbiAgICBpc0RyYWdnaW5nOiBpc0RyYWdnaW5nXG4gIH07XG59XG5cbnZhciBOT1JNQUxJWkFUSU9OX01BUCA9IHtcbiAgU3BhY2ViYXI6IFwiIFwiLFxuICBSaWdodDogQVJST1dfUklHSFQsXG4gIExlZnQ6IEFSUk9XX0xFRlQsXG4gIFVwOiBBUlJPV19VUCxcbiAgRG93bjogQVJST1dfRE9XTlxufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICBrZXkgPSBpc1N0cmluZyhrZXkpID8ga2V5IDoga2V5LmtleTtcbiAgcmV0dXJuIE5PUk1BTElaQVRJT05fTUFQW2tleV0gfHwga2V5O1xufVxuXG52YXIgS0VZQk9BUkRfRVZFTlQgPSBcImtleWRvd25cIjtcblxuZnVuY3Rpb24gS2V5Ym9hcmQoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTEwID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTEwLm9uLFxuICAgICAgYmluZCA9IF9FdmVudEludGVyZmFjZTEwLmJpbmQsXG4gICAgICB1bmJpbmQgPSBfRXZlbnRJbnRlcmZhY2UxMC51bmJpbmQ7XG5cbiAgdmFyIHJvb3QgPSBTcGxpZGUyLnJvb3Q7XG4gIHZhciByZXNvbHZlID0gQ29tcG9uZW50czIuRGlyZWN0aW9uLnJlc29sdmU7XG4gIHZhciB0YXJnZXQ7XG4gIHZhciBkaXNhYmxlZDtcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBpbml0KCk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgZGVzdHJveSk7XG4gICAgb24oRVZFTlRfVVBEQVRFRCwgaW5pdCk7XG4gICAgb24oRVZFTlRfTU9WRSwgb25Nb3ZlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGtleWJvYXJkID0gb3B0aW9ucy5rZXlib2FyZDtcblxuICAgIGlmIChrZXlib2FyZCkge1xuICAgICAgdGFyZ2V0ID0ga2V5Ym9hcmQgPT09IFwiZ2xvYmFsXCIgPyB3aW5kb3cgOiByb290O1xuICAgICAgYmluZCh0YXJnZXQsIEtFWUJPQVJEX0VWRU5ULCBvbktleWRvd24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdW5iaW5kKHRhcmdldCwgS0VZQk9BUkRfRVZFTlQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZSh2YWx1ZSkge1xuICAgIGRpc2FibGVkID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoKSB7XG4gICAgdmFyIF9kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNhYmxlZCA9IF9kaXNhYmxlZDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihlKSB7XG4gICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleShlKTtcblxuICAgICAgaWYgKGtleSA9PT0gcmVzb2x2ZShBUlJPV19MRUZUKSkge1xuICAgICAgICBTcGxpZGUyLmdvKFwiPFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSByZXNvbHZlKEFSUk9XX1JJR0hUKSkge1xuICAgICAgICBTcGxpZGUyLmdvKFwiPlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIGRpc2FibGU6IGRpc2FibGVcbiAgfTtcbn1cblxudmFyIFNSQ19EQVRBX0FUVFJJQlVURSA9IERBVEFfQVRUUklCVVRFICsgXCItbGF6eVwiO1xudmFyIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSA9IFNSQ19EQVRBX0FUVFJJQlVURSArIFwiLXNyY3NldFwiO1xudmFyIElNQUdFX1NFTEVDVE9SID0gXCJbXCIgKyBTUkNfREFUQV9BVFRSSUJVVEUgKyBcIl0sIFtcIiArIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSArIFwiXVwiO1xuXG5mdW5jdGlvbiBMYXp5TG9hZChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMTEgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIG9uID0gX0V2ZW50SW50ZXJmYWNlMTEub24sXG4gICAgICBvZmYgPSBfRXZlbnRJbnRlcmZhY2UxMS5vZmYsXG4gICAgICBiaW5kID0gX0V2ZW50SW50ZXJmYWNlMTEuYmluZCxcbiAgICAgIGVtaXQgPSBfRXZlbnRJbnRlcmZhY2UxMS5lbWl0O1xuXG4gIHZhciBpc1NlcXVlbnRpYWwgPSBvcHRpb25zLmxhenlMb2FkID09PSBcInNlcXVlbnRpYWxcIjtcbiAgdmFyIGV2ZW50cyA9IFtFVkVOVF9NT1ZFRCwgRVZFTlRfU0NST0xMRURdO1xuICB2YXIgZW50cmllcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChvcHRpb25zLmxhenlMb2FkKSB7XG4gICAgICBpbml0KCk7XG4gICAgICBvbihFVkVOVF9SRUZSRVNILCBpbml0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGVtcHR5KGVudHJpZXMpO1xuICAgIHJlZ2lzdGVyKCk7XG5cbiAgICBpZiAoaXNTZXF1ZW50aWFsKSB7XG4gICAgICBsb2FkTmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvZmYoZXZlbnRzKTtcbiAgICAgIG9uKGV2ZW50cywgY2hlY2spO1xuICAgICAgY2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICBDb21wb25lbnRzMi5TbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgIHF1ZXJ5QWxsKFNsaWRlLnNsaWRlLCBJTUFHRV9TRUxFQ1RPUikuZm9yRWFjaChmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAgIHZhciBzcmMgPSBnZXRBdHRyaWJ1dGUoaW1nLCBTUkNfREFUQV9BVFRSSUJVVEUpO1xuICAgICAgICB2YXIgc3Jjc2V0ID0gZ2V0QXR0cmlidXRlKGltZywgU1JDU0VUX0RBVEFfQVRUUklCVVRFKTtcblxuICAgICAgICBpZiAoc3JjICE9PSBpbWcuc3JjIHx8IHNyY3NldCAhPT0gaW1nLnNyY3NldCkge1xuICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzZXMuc3Bpbm5lcjtcbiAgICAgICAgICB2YXIgcGFyZW50ID0gaW1nLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgdmFyIHNwaW5uZXIgPSBjaGlsZChwYXJlbnQsIFwiLlwiICsgY2xhc3NOYW1lKSB8fCBjcmVhdGUoXCJzcGFuXCIsIGNsYXNzTmFtZSwgcGFyZW50KTtcbiAgICAgICAgICBlbnRyaWVzLnB1c2goW2ltZywgU2xpZGUsIHNwaW5uZXJdKTtcbiAgICAgICAgICBpbWcuc3JjIHx8IGRpc3BsYXkoaW1nLCBcIm5vbmVcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2soKSB7XG4gICAgZW50cmllcyA9IGVudHJpZXMuZmlsdGVyKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBvcHRpb25zLnBlclBhZ2UgKiAoKG9wdGlvbnMucHJlbG9hZFBhZ2VzIHx8IDEpICsgMSkgLSAxO1xuICAgICAgcmV0dXJuIGRhdGFbMV0uaXNXaXRoaW4oU3BsaWRlMi5pbmRleCwgZGlzdGFuY2UpID8gbG9hZChkYXRhKSA6IHRydWU7XG4gICAgfSk7XG4gICAgZW50cmllcy5sZW5ndGggfHwgb2ZmKGV2ZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkKGRhdGEpIHtcbiAgICB2YXIgaW1nID0gZGF0YVswXTtcbiAgICBhZGRDbGFzcyhkYXRhWzFdLnNsaWRlLCBDTEFTU19MT0FESU5HKTtcbiAgICBiaW5kKGltZywgXCJsb2FkIGVycm9yXCIsIGFwcGx5KG9uTG9hZCwgZGF0YSkpO1xuICAgIHNldEF0dHJpYnV0ZShpbWcsIFwic3JjXCIsIGdldEF0dHJpYnV0ZShpbWcsIFNSQ19EQVRBX0FUVFJJQlVURSkpO1xuICAgIHNldEF0dHJpYnV0ZShpbWcsIFwic3Jjc2V0XCIsIGdldEF0dHJpYnV0ZShpbWcsIFNSQ1NFVF9EQVRBX0FUVFJJQlVURSkpO1xuICAgIHJlbW92ZUF0dHJpYnV0ZShpbWcsIFNSQ19EQVRBX0FUVFJJQlVURSk7XG4gICAgcmVtb3ZlQXR0cmlidXRlKGltZywgU1JDU0VUX0RBVEFfQVRUUklCVVRFKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTG9hZChkYXRhLCBlKSB7XG4gICAgdmFyIGltZyA9IGRhdGFbMF0sXG4gICAgICAgIFNsaWRlID0gZGF0YVsxXTtcbiAgICByZW1vdmVDbGFzcyhTbGlkZS5zbGlkZSwgQ0xBU1NfTE9BRElORyk7XG5cbiAgICBpZiAoZS50eXBlICE9PSBcImVycm9yXCIpIHtcbiAgICAgIHJlbW92ZShkYXRhWzJdKTtcbiAgICAgIGRpc3BsYXkoaW1nLCBcIlwiKTtcbiAgICAgIGVtaXQoRVZFTlRfTEFaWUxPQURfTE9BREVELCBpbWcsIFNsaWRlKTtcbiAgICAgIGVtaXQoRVZFTlRfUkVTSVpFKTtcbiAgICB9XG5cbiAgICBpc1NlcXVlbnRpYWwgJiYgbG9hZE5leHQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWROZXh0KCkge1xuICAgIGVudHJpZXMubGVuZ3RoICYmIGxvYWQoZW50cmllcy5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGFwcGx5KGVtcHR5LCBlbnRyaWVzKSxcbiAgICBjaGVjazogY2hlY2tcbiAgfTtcbn1cblxuZnVuY3Rpb24gUGFnaW5hdGlvbihTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKTtcbiAgdmFyIG9uID0gZXZlbnQub24sXG4gICAgICBlbWl0ID0gZXZlbnQuZW1pdCxcbiAgICAgIGJpbmQgPSBldmVudC5iaW5kO1xuICB2YXIgU2xpZGVzID0gQ29tcG9uZW50czIuU2xpZGVzLFxuICAgICAgRWxlbWVudHMgPSBDb21wb25lbnRzMi5FbGVtZW50cyxcbiAgICAgIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyO1xuICB2YXIgaGFzRm9jdXMgPSBDb250cm9sbGVyLmhhc0ZvY3VzLFxuICAgICAgZ2V0SW5kZXggPSBDb250cm9sbGVyLmdldEluZGV4LFxuICAgICAgZ28gPSBDb250cm9sbGVyLmdvO1xuICB2YXIgcmVzb2x2ZSA9IENvbXBvbmVudHMyLkRpcmVjdGlvbi5yZXNvbHZlO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBFbGVtZW50cy5wYWdpbmF0aW9uO1xuICB2YXIgaXRlbXMgPSBbXTtcbiAgdmFyIGxpc3Q7XG4gIHZhciBwYWdpbmF0aW9uQ2xhc3NlcztcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgb24oW0VWRU5UX1VQREFURUQsIEVWRU5UX1JFRlJFU0gsIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VEXSwgbW91bnQpO1xuICAgIHZhciBlbmFibGVkID0gb3B0aW9ucy5wYWdpbmF0aW9uO1xuICAgIHBsYWNlaG9sZGVyICYmIGRpc3BsYXkocGxhY2Vob2xkZXIsIGVuYWJsZWQgPyBcIlwiIDogXCJub25lXCIpO1xuXG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIG9uKFtFVkVOVF9NT1ZFLCBFVkVOVF9TQ1JPTEwsIEVWRU5UX1NDUk9MTEVEXSwgdXBkYXRlKTtcbiAgICAgIGNyZWF0ZVBhZ2luYXRpb24oKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgZW1pdChFVkVOVF9QQUdJTkFUSU9OX01PVU5URUQsIHtcbiAgICAgICAgbGlzdDogbGlzdCxcbiAgICAgICAgaXRlbXM6IGl0ZW1zXG4gICAgICB9LCBnZXRBdChTcGxpZGUyLmluZGV4KSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGlzdCkge1xuICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyID8gc2xpY2UobGlzdC5jaGlsZHJlbikgOiBsaXN0KTtcbiAgICAgIHJlbW92ZUNsYXNzKGxpc3QsIHBhZ2luYXRpb25DbGFzc2VzKTtcbiAgICAgIGVtcHR5KGl0ZW1zKTtcbiAgICAgIGxpc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhZ2luYXRpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9IFNwbGlkZTIubGVuZ3RoO1xuICAgIHZhciBjbGFzc2VzID0gb3B0aW9ucy5jbGFzc2VzLFxuICAgICAgICBpMThuID0gb3B0aW9ucy5pMThuLFxuICAgICAgICBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlO1xuICAgIHZhciBtYXggPSBoYXNGb2N1cygpID8gQ29udHJvbGxlci5nZXRFbmQoKSArIDEgOiBjZWlsKGxlbmd0aCAvIHBlclBhZ2UpO1xuICAgIGxpc3QgPSBwbGFjZWhvbGRlciB8fCBjcmVhdGUoXCJ1bFwiLCBjbGFzc2VzLnBhZ2luYXRpb24sIEVsZW1lbnRzLnRyYWNrLnBhcmVudEVsZW1lbnQpO1xuICAgIGFkZENsYXNzKGxpc3QsIHBhZ2luYXRpb25DbGFzc2VzID0gQ0xBU1NfUEFHSU5BVElPTiArIFwiLS1cIiArIGdldERpcmVjdGlvbigpKTtcbiAgICBzZXRBdHRyaWJ1dGUobGlzdCwgUk9MRSwgXCJ0YWJsaXN0XCIpO1xuICAgIHNldEF0dHJpYnV0ZShsaXN0LCBBUklBX0xBQkVMLCBpMThuLnNlbGVjdCk7XG4gICAgc2V0QXR0cmlidXRlKGxpc3QsIEFSSUFfT1JJRU5UQVRJT04sIGdldERpcmVjdGlvbigpID09PSBUVEIgPyBcInZlcnRpY2FsXCIgOiBcIlwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICAgIHZhciBsaSA9IGNyZWF0ZShcImxpXCIsIG51bGwsIGxpc3QpO1xuICAgICAgdmFyIGJ1dHRvbiA9IGNyZWF0ZShcImJ1dHRvblwiLCB7XG4gICAgICAgIGNsYXNzOiBjbGFzc2VzLnBhZ2UsXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgIH0sIGxpKTtcbiAgICAgIHZhciBjb250cm9scyA9IFNsaWRlcy5nZXRJbihpKS5tYXAoZnVuY3Rpb24gKFNsaWRlKSB7XG4gICAgICAgIHJldHVybiBTbGlkZS5zbGlkZS5pZDtcbiAgICAgIH0pO1xuICAgICAgdmFyIHRleHQgPSAhaGFzRm9jdXMoKSAmJiBwZXJQYWdlID4gMSA/IGkxOG4ucGFnZVggOiBpMThuLnNsaWRlWDtcbiAgICAgIGJpbmQoYnV0dG9uLCBcImNsaWNrXCIsIGFwcGx5KG9uQ2xpY2ssIGkpKTtcblxuICAgICAgaWYgKG9wdGlvbnMucGFnaW5hdGlvbktleWJvYXJkKSB7XG4gICAgICAgIGJpbmQoYnV0dG9uLCBcImtleWRvd25cIiwgYXBwbHkob25LZXlkb3duLCBpKSk7XG4gICAgICB9XG5cbiAgICAgIHNldEF0dHJpYnV0ZShsaSwgUk9MRSwgXCJwcmVzZW50YXRpb25cIik7XG4gICAgICBzZXRBdHRyaWJ1dGUoYnV0dG9uLCBST0xFLCBcInRhYlwiKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIEFSSUFfQ09OVFJPTFMsIGNvbnRyb2xzLmpvaW4oXCIgXCIpKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIEFSSUFfTEFCRUwsIGZvcm1hdCh0ZXh0LCBpICsgMSkpO1xuICAgICAgc2V0QXR0cmlidXRlKGJ1dHRvbiwgVEFCX0lOREVYLCAtMSk7XG4gICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgbGk6IGxpLFxuICAgICAgICBidXR0b246IGJ1dHRvbixcbiAgICAgICAgcGFnZTogaVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhwYWdlKSB7XG4gICAgZ28oXCI+XCIgKyBwYWdlLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5ZG93bihwYWdlLCBlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5KGUpO1xuICAgIHZhciBkaXIgPSBnZXREaXJlY3Rpb24oKTtcbiAgICB2YXIgbmV4dFBhZ2UgPSAtMTtcblxuICAgIGlmIChrZXkgPT09IHJlc29sdmUoQVJST1dfUklHSFQsIGZhbHNlLCBkaXIpKSB7XG4gICAgICBuZXh0UGFnZSA9ICsrcGFnZSAlIGxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gcmVzb2x2ZShBUlJPV19MRUZULCBmYWxzZSwgZGlyKSkge1xuICAgICAgbmV4dFBhZ2UgPSAoLS1wYWdlICsgbGVuZ3RoKSAlIGxlbmd0aDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJIb21lXCIpIHtcbiAgICAgIG5leHRQYWdlID0gMDtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJFbmRcIikge1xuICAgICAgbmV4dFBhZ2UgPSBsZW5ndGggLSAxO1xuICAgIH1cblxuICAgIHZhciBpdGVtID0gaXRlbXNbbmV4dFBhZ2VdO1xuXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGZvY3VzKGl0ZW0uYnV0dG9uKTtcbiAgICAgIGdvKFwiPlwiICsgbmV4dFBhZ2UpO1xuICAgICAgcHJldmVudChlLCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMucGFnaW5hdGlvbkRpcmVjdGlvbiB8fCBvcHRpb25zLmRpcmVjdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF0KGluZGV4KSB7XG4gICAgcmV0dXJuIGl0ZW1zW0NvbnRyb2xsZXIudG9QYWdlKGluZGV4KV07XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHByZXYgPSBnZXRBdChnZXRJbmRleCh0cnVlKSk7XG4gICAgdmFyIGN1cnIgPSBnZXRBdChnZXRJbmRleCgpKTtcblxuICAgIGlmIChwcmV2KSB7XG4gICAgICB2YXIgYnV0dG9uID0gcHJldi5idXR0b247XG4gICAgICByZW1vdmVDbGFzcyhidXR0b24sIENMQVNTX0FDVElWRSk7XG4gICAgICByZW1vdmVBdHRyaWJ1dGUoYnV0dG9uLCBBUklBX1NFTEVDVEVEKTtcbiAgICAgIHNldEF0dHJpYnV0ZShidXR0b24sIFRBQl9JTkRFWCwgLTEpO1xuICAgIH1cblxuICAgIGlmIChjdXJyKSB7XG4gICAgICB2YXIgX2J1dHRvbiA9IGN1cnIuYnV0dG9uO1xuICAgICAgYWRkQ2xhc3MoX2J1dHRvbiwgQ0xBU1NfQUNUSVZFKTtcbiAgICAgIHNldEF0dHJpYnV0ZShfYnV0dG9uLCBBUklBX1NFTEVDVEVELCB0cnVlKTtcbiAgICAgIHNldEF0dHJpYnV0ZShfYnV0dG9uLCBUQUJfSU5ERVgsIFwiXCIpO1xuICAgIH1cblxuICAgIGVtaXQoRVZFTlRfUEFHSU5BVElPTl9VUERBVEVELCB7XG4gICAgICBsaXN0OiBsaXN0LFxuICAgICAgaXRlbXM6IGl0ZW1zXG4gICAgfSwgcHJldiwgY3Vycik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGl0ZW1zOiBpdGVtcyxcbiAgICBtb3VudDogbW91bnQsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBnZXRBdDogZ2V0QXQsXG4gICAgdXBkYXRlOiB1cGRhdGVcbiAgfTtcbn1cblxudmFyIFRSSUdHRVJfS0VZUyA9IFtcIiBcIiwgXCJFbnRlclwiXTtcblxuZnVuY3Rpb24gU3luYyhTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgaXNOYXZpZ2F0aW9uID0gb3B0aW9ucy5pc05hdmlnYXRpb24sXG4gICAgICBzbGlkZUZvY3VzID0gb3B0aW9ucy5zbGlkZUZvY3VzO1xuICB2YXIgZXZlbnRzID0gW107XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgU3BsaWRlMi5zcGxpZGVzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgaWYgKCF0YXJnZXQuaXNQYXJlbnQpIHtcbiAgICAgICAgc3luYyhTcGxpZGUyLCB0YXJnZXQuc3BsaWRlKTtcbiAgICAgICAgc3luYyh0YXJnZXQuc3BsaWRlLCBTcGxpZGUyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChpc05hdmlnYXRpb24pIHtcbiAgICAgIG5hdmlnYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBlbXB0eShldmVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3VudCgpIHtcbiAgICBkZXN0cm95KCk7XG4gICAgbW91bnQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN5bmMoc3BsaWRlLCB0YXJnZXQpIHtcbiAgICB2YXIgZXZlbnQgPSBFdmVudEludGVyZmFjZShzcGxpZGUpO1xuICAgIGV2ZW50Lm9uKEVWRU5UX01PVkUsIGZ1bmN0aW9uIChpbmRleCwgcHJldiwgZGVzdCkge1xuICAgICAgdGFyZ2V0LmdvKHRhcmdldC5pcyhMT09QKSA/IGRlc3QgOiBpbmRleCk7XG4gICAgfSk7XG4gICAgZXZlbnRzLnB1c2goZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgdmFyIGV2ZW50ID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMik7XG4gICAgdmFyIG9uID0gZXZlbnQub247XG4gICAgb24oRVZFTlRfQ0xJQ0ssIG9uQ2xpY2spO1xuICAgIG9uKEVWRU5UX1NMSURFX0tFWURPV04sIG9uS2V5ZG93bik7XG4gICAgb24oW0VWRU5UX01PVU5URUQsIEVWRU5UX1VQREFURURdLCB1cGRhdGUpO1xuICAgIGV2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICBldmVudC5lbWl0KEVWRU5UX05BVklHQVRJT05fTU9VTlRFRCwgU3BsaWRlMi5zcGxpZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICBzZXRBdHRyaWJ1dGUoQ29tcG9uZW50czIuRWxlbWVudHMubGlzdCwgQVJJQV9PUklFTlRBVElPTiwgb3B0aW9ucy5kaXJlY3Rpb24gPT09IFRUQiA/IFwidmVydGljYWxcIiA6IFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhTbGlkZSkge1xuICAgIFNwbGlkZTIuZ28oU2xpZGUuaW5kZXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25LZXlkb3duKFNsaWRlLCBlKSB7XG4gICAgaWYgKGluY2x1ZGVzKFRSSUdHRVJfS0VZUywgbm9ybWFsaXplS2V5KGUpKSkge1xuICAgICAgb25DbGljayhTbGlkZSk7XG4gICAgICBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0dXA6IGFwcGx5KENvbXBvbmVudHMyLk1lZGlhLnNldCwge1xuICAgICAgc2xpZGVGb2N1czogaXNVbmRlZmluZWQoc2xpZGVGb2N1cykgPyBpc05hdmlnYXRpb24gOiBzbGlkZUZvY3VzXG4gICAgfSwgdHJ1ZSksXG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgcmVtb3VudDogcmVtb3VudFxuICB9O1xufVxuXG5mdW5jdGlvbiBXaGVlbChTcGxpZGUyLCBDb21wb25lbnRzMiwgb3B0aW9ucykge1xuICB2YXIgX0V2ZW50SW50ZXJmYWNlMTIgPSBFdmVudEludGVyZmFjZShTcGxpZGUyKSxcbiAgICAgIGJpbmQgPSBfRXZlbnRJbnRlcmZhY2UxMi5iaW5kO1xuXG4gIHZhciBsYXN0VGltZSA9IDA7XG5cbiAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgaWYgKG9wdGlvbnMud2hlZWwpIHtcbiAgICAgIGJpbmQoQ29tcG9uZW50czIuRWxlbWVudHMudHJhY2ssIFwid2hlZWxcIiwgb25XaGVlbCwgU0NST0xMX0xJU1RFTkVSX09QVElPTlMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uV2hlZWwoZSkge1xuICAgIGlmIChlLmNhbmNlbGFibGUpIHtcbiAgICAgIHZhciBkZWx0YVkgPSBlLmRlbHRhWTtcbiAgICAgIHZhciBiYWNrd2FyZHMgPSBkZWx0YVkgPCAwO1xuICAgICAgdmFyIHRpbWVTdGFtcCA9IHRpbWVPZihlKTtcblxuICAgICAgdmFyIF9taW4gPSBvcHRpb25zLndoZWVsTWluVGhyZXNob2xkIHx8IDA7XG5cbiAgICAgIHZhciBzbGVlcCA9IG9wdGlvbnMud2hlZWxTbGVlcCB8fCAwO1xuXG4gICAgICBpZiAoYWJzKGRlbHRhWSkgPiBfbWluICYmIHRpbWVTdGFtcCAtIGxhc3RUaW1lID4gc2xlZXApIHtcbiAgICAgICAgU3BsaWRlMi5nbyhiYWNrd2FyZHMgPyBcIjxcIiA6IFwiPlwiKTtcbiAgICAgICAgbGFzdFRpbWUgPSB0aW1lU3RhbXA7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFByZXZlbnQoYmFja3dhcmRzKSAmJiBwcmV2ZW50KGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZFByZXZlbnQoYmFja3dhcmRzKSB7XG4gICAgcmV0dXJuICFvcHRpb25zLnJlbGVhc2VXaGVlbCB8fCBTcGxpZGUyLnN0YXRlLmlzKE1PVklORykgfHwgQ29tcG9uZW50czIuQ29udHJvbGxlci5nZXRBZGphY2VudChiYWNrd2FyZHMpICE9PSAtMTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50XG4gIH07XG59XG5cbnZhciBTUl9SRU1PVkFMX0RFTEFZID0gOTA7XG5cbmZ1bmN0aW9uIExpdmUoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIF9FdmVudEludGVyZmFjZTEzID0gRXZlbnRJbnRlcmZhY2UoU3BsaWRlMiksXG4gICAgICBvbiA9IF9FdmVudEludGVyZmFjZTEzLm9uO1xuXG4gIHZhciB0cmFjayA9IENvbXBvbmVudHMyLkVsZW1lbnRzLnRyYWNrO1xuICB2YXIgZW5hYmxlZCA9IG9wdGlvbnMubGl2ZSAmJiAhb3B0aW9ucy5pc05hdmlnYXRpb247XG4gIHZhciBzciA9IGNyZWF0ZShcInNwYW5cIiwgQ0xBU1NfU1IpO1xuICB2YXIgaW50ZXJ2YWwgPSBSZXF1ZXN0SW50ZXJ2YWwoU1JfUkVNT1ZBTF9ERUxBWSwgYXBwbHkodG9nZ2xlLCBmYWxzZSkpO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGlmIChlbmFibGVkKSB7XG4gICAgICBkaXNhYmxlKCFDb21wb25lbnRzMi5BdXRvcGxheS5pc1BhdXNlZCgpKTtcbiAgICAgIHNldEF0dHJpYnV0ZSh0cmFjaywgQVJJQV9BVE9NSUMsIHRydWUpO1xuICAgICAgc3IudGV4dENvbnRlbnQgPSBcIlxcdTIwMjZcIjtcbiAgICAgIG9uKEVWRU5UX0FVVE9QTEFZX1BMQVksIGFwcGx5KGRpc2FibGUsIHRydWUpKTtcbiAgICAgIG9uKEVWRU5UX0FVVE9QTEFZX1BBVVNFLCBhcHBseShkaXNhYmxlLCBmYWxzZSkpO1xuICAgICAgb24oW0VWRU5UX01PVkVELCBFVkVOVF9TQ1JPTExFRF0sIGFwcGx5KHRvZ2dsZSwgdHJ1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZShhY3RpdmUpIHtcbiAgICBzZXRBdHRyaWJ1dGUodHJhY2ssIEFSSUFfQlVTWSwgYWN0aXZlKTtcblxuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIGFwcGVuZCh0cmFjaywgc3IpO1xuICAgICAgaW50ZXJ2YWwuc3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKHNyKTtcbiAgICAgIGludGVydmFsLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgcmVtb3ZlQXR0cmlidXRlKHRyYWNrLCBbQVJJQV9MSVZFLCBBUklBX0FUT01JQywgQVJJQV9CVVNZXSk7XG4gICAgcmVtb3ZlKHNyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRpc2FibGUoZGlzYWJsZWQpIHtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgc2V0QXR0cmlidXRlKHRyYWNrLCBBUklBX0xJVkUsIGRpc2FibGVkID8gXCJvZmZcIiA6IFwicG9saXRlXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbW91bnQ6IG1vdW50LFxuICAgIGRpc2FibGU6IGRpc2FibGUsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9O1xufVxuXG52YXIgQ29tcG9uZW50Q29uc3RydWN0b3JzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIE1lZGlhOiBNZWRpYSxcbiAgRGlyZWN0aW9uOiBEaXJlY3Rpb24sXG4gIEVsZW1lbnRzOiBFbGVtZW50cyxcbiAgU2xpZGVzOiBTbGlkZXMsXG4gIExheW91dDogTGF5b3V0LFxuICBDbG9uZXM6IENsb25lcyxcbiAgTW92ZTogTW92ZSxcbiAgQ29udHJvbGxlcjogQ29udHJvbGxlcixcbiAgQXJyb3dzOiBBcnJvd3MsXG4gIEF1dG9wbGF5OiBBdXRvcGxheSxcbiAgQ292ZXI6IENvdmVyLFxuICBTY3JvbGw6IFNjcm9sbCxcbiAgRHJhZzogRHJhZyxcbiAgS2V5Ym9hcmQ6IEtleWJvYXJkLFxuICBMYXp5TG9hZDogTGF6eUxvYWQsXG4gIFBhZ2luYXRpb246IFBhZ2luYXRpb24sXG4gIFN5bmM6IFN5bmMsXG4gIFdoZWVsOiBXaGVlbCxcbiAgTGl2ZTogTGl2ZVxufSk7XG52YXIgSTE4TiA9IHtcbiAgcHJldjogXCJQcmV2aW91cyBzbGlkZVwiLFxuICBuZXh0OiBcIk5leHQgc2xpZGVcIixcbiAgZmlyc3Q6IFwiR28gdG8gZmlyc3Qgc2xpZGVcIixcbiAgbGFzdDogXCJHbyB0byBsYXN0IHNsaWRlXCIsXG4gIHNsaWRlWDogXCJHbyB0byBzbGlkZSAlc1wiLFxuICBwYWdlWDogXCJHbyB0byBwYWdlICVzXCIsXG4gIHBsYXk6IFwiU3RhcnQgYXV0b3BsYXlcIixcbiAgcGF1c2U6IFwiUGF1c2UgYXV0b3BsYXlcIixcbiAgY2Fyb3VzZWw6IFwiY2Fyb3VzZWxcIixcbiAgc2xpZGU6IFwic2xpZGVcIixcbiAgc2VsZWN0OiBcIlNlbGVjdCBhIHNsaWRlIHRvIHNob3dcIixcbiAgc2xpZGVMYWJlbDogXCIlcyBvZiAlc1wiXG59O1xudmFyIERFRkFVTFRTID0ge1xuICB0eXBlOiBcInNsaWRlXCIsXG4gIHJvbGU6IFwicmVnaW9uXCIsXG4gIHNwZWVkOiA0MDAsXG4gIHBlclBhZ2U6IDEsXG4gIGNsb25lU3RhdHVzOiB0cnVlLFxuICBhcnJvd3M6IHRydWUsXG4gIHBhZ2luYXRpb246IHRydWUsXG4gIHBhZ2luYXRpb25LZXlib2FyZDogdHJ1ZSxcbiAgaW50ZXJ2YWw6IDVlMyxcbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gIHJlc2V0UHJvZ3Jlc3M6IHRydWUsXG4gIGVhc2luZzogXCJjdWJpYy1iZXppZXIoMC4yNSwgMSwgMC41LCAxKVwiLFxuICBkcmFnOiB0cnVlLFxuICBkaXJlY3Rpb246IFwibHRyXCIsXG4gIHRyaW1TcGFjZTogdHJ1ZSxcbiAgZm9jdXNhYmxlTm9kZXM6IFwiYSwgYnV0dG9uLCB0ZXh0YXJlYSwgaW5wdXQsIHNlbGVjdCwgaWZyYW1lXCIsXG4gIGxpdmU6IHRydWUsXG4gIGNsYXNzZXM6IENMQVNTRVMsXG4gIGkxOG46IEkxOE4sXG4gIHJlZHVjZWRNb3Rpb246IHtcbiAgICBzcGVlZDogMCxcbiAgICByZXdpbmRTcGVlZDogMCxcbiAgICBhdXRvcGxheTogXCJwYXVzZVwiXG4gIH1cbn07XG5cbmZ1bmN0aW9uIEZhZGUoU3BsaWRlMiwgQ29tcG9uZW50czIsIG9wdGlvbnMpIHtcbiAgdmFyIFNsaWRlcyA9IENvbXBvbmVudHMyLlNsaWRlcztcblxuICBmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBFdmVudEludGVyZmFjZShTcGxpZGUyKS5vbihbRVZFTlRfTU9VTlRFRCwgRVZFTlRfUkVGUkVTSF0sIGluaXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBTbGlkZXMuZm9yRWFjaChmdW5jdGlvbiAoU2xpZGUpIHtcbiAgICAgIFNsaWRlLnN0eWxlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlWCgtXCIgKyAxMDAgKiBTbGlkZS5pbmRleCArIFwiJSlcIik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChpbmRleCwgZG9uZSkge1xuICAgIFNsaWRlcy5zdHlsZShcInRyYW5zaXRpb25cIiwgXCJvcGFjaXR5IFwiICsgb3B0aW9ucy5zcGVlZCArIFwibXMgXCIgKyBvcHRpb25zLmVhc2luZyk7XG4gICAgbmV4dFRpY2soZG9uZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgY2FuY2VsOiBub29wXG4gIH07XG59XG5cbmZ1bmN0aW9uIFNsaWRlKFNwbGlkZTIsIENvbXBvbmVudHMyLCBvcHRpb25zKSB7XG4gIHZhciBNb3ZlID0gQ29tcG9uZW50czIuTW92ZSxcbiAgICAgIENvbnRyb2xsZXIgPSBDb21wb25lbnRzMi5Db250cm9sbGVyLFxuICAgICAgU2Nyb2xsID0gQ29tcG9uZW50czIuU2Nyb2xsO1xuICB2YXIgbGlzdCA9IENvbXBvbmVudHMyLkVsZW1lbnRzLmxpc3Q7XG4gIHZhciB0cmFuc2l0aW9uID0gYXBwbHkoc3R5bGUsIGxpc3QsIFwidHJhbnNpdGlvblwiKTtcbiAgdmFyIGVuZENhbGxiYWNrO1xuXG4gIGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIEV2ZW50SW50ZXJmYWNlKFNwbGlkZTIpLmJpbmQobGlzdCwgXCJ0cmFuc2l0aW9uZW5kXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgPT09IGxpc3QgJiYgZW5kQ2FsbGJhY2spIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIGVuZENhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChpbmRleCwgZG9uZSkge1xuICAgIHZhciBkZXN0aW5hdGlvbiA9IE1vdmUudG9Qb3NpdGlvbihpbmRleCwgdHJ1ZSk7XG4gICAgdmFyIHBvc2l0aW9uID0gTW92ZS5nZXRQb3NpdGlvbigpO1xuICAgIHZhciBzcGVlZCA9IGdldFNwZWVkKGluZGV4KTtcblxuICAgIGlmIChhYnMoZGVzdGluYXRpb24gLSBwb3NpdGlvbikgPj0gMSAmJiBzcGVlZCA+PSAxKSB7XG4gICAgICBpZiAob3B0aW9ucy51c2VTY3JvbGwpIHtcbiAgICAgICAgU2Nyb2xsLnNjcm9sbChkZXN0aW5hdGlvbiwgc3BlZWQsIGZhbHNlLCBkb25lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb24oXCJ0cmFuc2Zvcm0gXCIgKyBzcGVlZCArIFwibXMgXCIgKyBvcHRpb25zLmVhc2luZyk7XG4gICAgICAgIE1vdmUudHJhbnNsYXRlKGRlc3RpbmF0aW9uLCB0cnVlKTtcbiAgICAgICAgZW5kQ2FsbGJhY2sgPSBkb25lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBNb3ZlLmp1bXAoaW5kZXgpO1xuICAgICAgZG9uZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICB0cmFuc2l0aW9uKFwiXCIpO1xuICAgIFNjcm9sbC5jYW5jZWwoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWVkKGluZGV4KSB7XG4gICAgdmFyIHJld2luZFNwZWVkID0gb3B0aW9ucy5yZXdpbmRTcGVlZDtcblxuICAgIGlmIChTcGxpZGUyLmlzKFNMSURFKSAmJiByZXdpbmRTcGVlZCkge1xuICAgICAgdmFyIHByZXYgPSBDb250cm9sbGVyLmdldEluZGV4KHRydWUpO1xuICAgICAgdmFyIGVuZCA9IENvbnRyb2xsZXIuZ2V0RW5kKCk7XG5cbiAgICAgIGlmIChwcmV2ID09PSAwICYmIGluZGV4ID49IGVuZCB8fCBwcmV2ID49IGVuZCAmJiBpbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmV3aW5kU3BlZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnMuc3BlZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1vdW50OiBtb3VudCxcbiAgICBzdGFydDogc3RhcnQsXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn1cblxudmFyIF9TcGxpZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfU3BsaWRlKHRhcmdldCwgb3B0aW9ucykge1xuICAgIHRoaXMuZXZlbnQgPSBFdmVudEludGVyZmFjZSgpO1xuICAgIHRoaXMuQ29tcG9uZW50cyA9IHt9O1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZShDUkVBVEVEKTtcbiAgICB0aGlzLnNwbGlkZXMgPSBbXTtcbiAgICB0aGlzLl9vID0ge307XG4gICAgdGhpcy5fRSA9IHt9O1xuICAgIHZhciByb290ID0gaXNTdHJpbmcodGFyZ2V0KSA/IHF1ZXJ5KGRvY3VtZW50LCB0YXJnZXQpIDogdGFyZ2V0O1xuICAgIGFzc2VydChyb290LCByb290ICsgXCIgaXMgaW52YWxpZC5cIik7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICBvcHRpb25zID0gbWVyZ2Uoe1xuICAgICAgbGFiZWw6IGdldEF0dHJpYnV0ZShyb290LCBBUklBX0xBQkVMKSB8fCBcIlwiLFxuICAgICAgbGFiZWxsZWRieTogZ2V0QXR0cmlidXRlKHJvb3QsIEFSSUFfTEFCRUxMRURCWSkgfHwgXCJcIlxuICAgIH0sIERFRkFVTFRTLCBfU3BsaWRlLmRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIHRyeSB7XG4gICAgICBtZXJnZShvcHRpb25zLCBKU09OLnBhcnNlKGdldEF0dHJpYnV0ZShyb290LCBEQVRBX0FUVFJJQlVURSkpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsIFwiSW52YWxpZCBKU09OXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX28gPSBPYmplY3QuY3JlYXRlKG1lcmdlKHt9LCBvcHRpb25zKSk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gX1NwbGlkZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm1vdW50ID0gZnVuY3Rpb24gbW91bnQoRXh0ZW5zaW9ucywgVHJhbnNpdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBDb21wb25lbnRzMiA9IHRoaXMuQ29tcG9uZW50cztcbiAgICBhc3NlcnQoc3RhdGUuaXMoW0NSRUFURUQsIERFU1RST1lFRF0pLCBcIkFscmVhZHkgbW91bnRlZCFcIik7XG4gICAgc3RhdGUuc2V0KENSRUFURUQpO1xuICAgIHRoaXMuX0MgPSBDb21wb25lbnRzMjtcbiAgICB0aGlzLl9UID0gVHJhbnNpdGlvbiB8fCB0aGlzLl9UIHx8ICh0aGlzLmlzKEZBREUpID8gRmFkZSA6IFNsaWRlKTtcbiAgICB0aGlzLl9FID0gRXh0ZW5zaW9ucyB8fCB0aGlzLl9FO1xuICAgIHZhciBDb25zdHJ1Y3RvcnMgPSBhc3NpZ24oe30sIENvbXBvbmVudENvbnN0cnVjdG9ycywgdGhpcy5fRSwge1xuICAgICAgVHJhbnNpdGlvbjogdGhpcy5fVFxuICAgIH0pO1xuICAgIGZvck93bihDb25zdHJ1Y3RvcnMsIGZ1bmN0aW9uIChDb21wb25lbnQsIGtleSkge1xuICAgICAgdmFyIGNvbXBvbmVudCA9IENvbXBvbmVudChfdGhpcywgQ29tcG9uZW50czIsIF90aGlzLl9vKTtcbiAgICAgIENvbXBvbmVudHMyW2tleV0gPSBjb21wb25lbnQ7XG4gICAgICBjb21wb25lbnQuc2V0dXAgJiYgY29tcG9uZW50LnNldHVwKCk7XG4gICAgfSk7XG4gICAgZm9yT3duKENvbXBvbmVudHMyLCBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICBjb21wb25lbnQubW91bnQgJiYgY29tcG9uZW50Lm1vdW50KCk7XG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KEVWRU5UX01PVU5URUQpO1xuICAgIGFkZENsYXNzKHRoaXMucm9vdCwgQ0xBU1NfSU5JVElBTElaRUQpO1xuICAgIHN0YXRlLnNldChJRExFKTtcbiAgICB0aGlzLmVtaXQoRVZFTlRfUkVBRFkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5zeW5jID0gZnVuY3Rpb24gc3luYyhzcGxpZGUpIHtcbiAgICB0aGlzLnNwbGlkZXMucHVzaCh7XG4gICAgICBzcGxpZGU6IHNwbGlkZVxuICAgIH0pO1xuICAgIHNwbGlkZS5zcGxpZGVzLnB1c2goe1xuICAgICAgc3BsaWRlOiB0aGlzLFxuICAgICAgaXNQYXJlbnQ6IHRydWVcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmlzKElETEUpKSB7XG4gICAgICB0aGlzLl9DLlN5bmMucmVtb3VudCgpO1xuXG4gICAgICBzcGxpZGUuQ29tcG9uZW50cy5TeW5jLnJlbW91bnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZ28gPSBmdW5jdGlvbiBnbyhjb250cm9sKSB7XG4gICAgdGhpcy5fQy5Db250cm9sbGVyLmdvKGNvbnRyb2wpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLm9uID0gZnVuY3Rpb24gb24oZXZlbnRzLCBjYWxsYmFjaykge1xuICAgIHRoaXMuZXZlbnQub24oZXZlbnRzLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLm9mZiA9IGZ1bmN0aW9uIG9mZihldmVudHMpIHtcbiAgICB0aGlzLmV2ZW50Lm9mZihldmVudHMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5lbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudCkge1xuICAgIHZhciBfdGhpcyRldmVudDtcblxuICAgIChfdGhpcyRldmVudCA9IHRoaXMuZXZlbnQpLmVtaXQuYXBwbHkoX3RoaXMkZXZlbnQsIFtldmVudF0uY29uY2F0KHNsaWNlKGFyZ3VtZW50cywgMSkpKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoc2xpZGVzLCBpbmRleCkge1xuICAgIHRoaXMuX0MuU2xpZGVzLmFkZChzbGlkZXMsIGluZGV4KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobWF0Y2hlcikge1xuICAgIHRoaXMuX0MuU2xpZGVzLnJlbW92ZShtYXRjaGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by5pcyA9IGZ1bmN0aW9uIGlzKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fby50eXBlID09PSB0eXBlO1xuICB9O1xuXG4gIF9wcm90by5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICB0aGlzLmVtaXQoRVZFTlRfUkVGUkVTSCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KGNvbXBsZXRlbHkpIHtcbiAgICBpZiAoY29tcGxldGVseSA9PT0gdm9pZCAwKSB7XG4gICAgICBjb21wbGV0ZWx5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZXZlbnQgPSB0aGlzLmV2ZW50LFxuICAgICAgICBzdGF0ZSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAoc3RhdGUuaXMoQ1JFQVRFRCkpIHtcbiAgICAgIEV2ZW50SW50ZXJmYWNlKHRoaXMpLm9uKEVWRU5UX1JFQURZLCB0aGlzLmRlc3Ryb3kuYmluZCh0aGlzLCBjb21wbGV0ZWx5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck93bih0aGlzLl9DLCBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIGNvbXBvbmVudC5kZXN0cm95ICYmIGNvbXBvbmVudC5kZXN0cm95KGNvbXBsZXRlbHkpO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBldmVudC5lbWl0KEVWRU5UX0RFU1RST1kpO1xuICAgICAgZXZlbnQuZGVzdHJveSgpO1xuICAgICAgY29tcGxldGVseSAmJiBlbXB0eSh0aGlzLnNwbGlkZXMpO1xuICAgICAgc3RhdGUuc2V0KERFU1RST1lFRCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKF9TcGxpZGUsIFt7XG4gICAga2V5OiBcIm9wdGlvbnNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob3B0aW9ucykge1xuICAgICAgdGhpcy5fQy5NZWRpYS5zZXQob3B0aW9ucywgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxlbmd0aFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX0MuU2xpZGVzLmdldExlbmd0aCh0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5kZXhcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9DLkNvbnRyb2xsZXIuZ2V0SW5kZXgoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gX1NwbGlkZTtcbn0oKTtcblxudmFyIFNwbGlkZSA9IF9TcGxpZGU7XG5TcGxpZGUuZGVmYXVsdHMgPSB7fTtcblNwbGlkZS5TVEFURVMgPSBTVEFURVM7XG52YXIgQ0xBU1NfUkVOREVSRUQgPSBcImlzLXJlbmRlcmVkXCI7XG52YXIgUkVOREVSRVJfREVGQVVMVF9DT05GSUcgPSB7XG4gIGxpc3RUYWc6IFwidWxcIixcbiAgc2xpZGVUYWc6IFwibGlcIlxufTtcblxudmFyIFN0eWxlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGUoaWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnN0eWxlcyA9IHt9O1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBTdHlsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5ydWxlID0gZnVuY3Rpb24gcnVsZShzZWxlY3RvciwgcHJvcCwgdmFsdWUsIGJyZWFrcG9pbnQpIHtcbiAgICBicmVha3BvaW50ID0gYnJlYWtwb2ludCB8fCBcImRlZmF1bHRcIjtcbiAgICB2YXIgc2VsZWN0b3JzID0gdGhpcy5zdHlsZXNbYnJlYWtwb2ludF0gPSB0aGlzLnN0eWxlc1ticmVha3BvaW50XSB8fCB7fTtcbiAgICB2YXIgc3R5bGVzID0gc2VsZWN0b3JzW3NlbGVjdG9yXSA9IHNlbGVjdG9yc1tzZWxlY3Rvcl0gfHwge307XG4gICAgc3R5bGVzW3Byb3BdID0gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvMi5idWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgICBpZiAodGhpcy5zdHlsZXMuZGVmYXVsdCkge1xuICAgICAgY3NzICs9IHRoaXMuYnVpbGRTZWxlY3RvcnModGhpcy5zdHlsZXMuZGVmYXVsdCk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXModGhpcy5zdHlsZXMpLnNvcnQoZnVuY3Rpb24gKG4sIG0pIHtcbiAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5tZWRpYVF1ZXJ5ID09PSBcIm1pblwiID8gK24gLSArbSA6ICttIC0gK247XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoYnJlYWtwb2ludCkge1xuICAgICAgaWYgKGJyZWFrcG9pbnQgIT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIGNzcyArPSBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IFwiICsgYnJlYWtwb2ludCArIFwicHgpIHtcIjtcbiAgICAgICAgY3NzICs9IF90aGlzMi5idWlsZFNlbGVjdG9ycyhfdGhpczIuc3R5bGVzW2JyZWFrcG9pbnRdKTtcbiAgICAgICAgY3NzICs9IFwifVwiO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjc3M7XG4gIH07XG5cbiAgX3Byb3RvMi5idWlsZFNlbGVjdG9ycyA9IGZ1bmN0aW9uIGJ1aWxkU2VsZWN0b3JzKHNlbGVjdG9ycykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGNzcyA9IFwiXCI7XG4gICAgZm9yT3duKHNlbGVjdG9ycywgZnVuY3Rpb24gKHN0eWxlcywgc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gKFwiI1wiICsgX3RoaXMzLmlkICsgXCIgXCIgKyBzZWxlY3RvcikudHJpbSgpO1xuICAgICAgY3NzICs9IHNlbGVjdG9yICsgXCIge1wiO1xuICAgICAgZm9yT3duKHN0eWxlcywgZnVuY3Rpb24gKHZhbHVlLCBwcm9wKSB7XG4gICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgIGNzcyArPSBwcm9wICsgXCI6IFwiICsgdmFsdWUgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjc3MgKz0gXCJ9XCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICByZXR1cm4gU3R5bGU7XG59KCk7XG5cbnZhciBTcGxpZGVSZW5kZXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNwbGlkZVJlbmRlcmVyKGNvbnRlbnRzLCBvcHRpb25zLCBjb25maWcsIGRlZmF1bHRzKSB7XG4gICAgdGhpcy5zbGlkZXMgPSBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgICB0aGlzLmJyZWFrcG9pbnRzID0gW107XG4gICAgbWVyZ2UoREVGQVVMVFMsIGRlZmF1bHRzIHx8IHt9KTtcbiAgICBtZXJnZShtZXJnZSh0aGlzLm9wdGlvbnMsIERFRkFVTFRTKSwgb3B0aW9ucyB8fCB7fSk7XG4gICAgdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgIHRoaXMuY29uZmlnID0gYXNzaWduKHt9LCBSRU5ERVJFUl9ERUZBVUxUX0NPTkZJRywgY29uZmlnIHx8IHt9KTtcbiAgICB0aGlzLmlkID0gdGhpcy5jb25maWcuaWQgfHwgdW5pcXVlSWQoXCJzcGxpZGVcIik7XG4gICAgdGhpcy5TdHlsZSA9IG5ldyBTdHlsZSh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuRGlyZWN0aW9uID0gRGlyZWN0aW9uKG51bGwsIG51bGwsIHRoaXMub3B0aW9ucyk7XG4gICAgYXNzZXJ0KHRoaXMuY29udGVudHMubGVuZ3RoLCBcIlByb3ZpZGUgYXQgbGVhc3QgMSBjb250ZW50LlwiKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIFNwbGlkZVJlbmRlcmVyLmNsZWFuID0gZnVuY3Rpb24gY2xlYW4oc3BsaWRlKSB7XG4gICAgdmFyIF9FdmVudEludGVyZmFjZTE0ID0gRXZlbnRJbnRlcmZhY2Uoc3BsaWRlKSxcbiAgICAgICAgb24gPSBfRXZlbnRJbnRlcmZhY2UxNC5vbjtcblxuICAgIHZhciByb290ID0gc3BsaWRlLnJvb3Q7XG4gICAgdmFyIGNsb25lcyA9IHF1ZXJ5QWxsKHJvb3QsIFwiLlwiICsgQ0xBU1NfQ0xPTkUpO1xuICAgIG9uKEVWRU5UX01PVU5URUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZShjaGlsZChyb290LCBcInN0eWxlXCIpKTtcbiAgICB9KTtcbiAgICByZW1vdmUoY2xvbmVzKTtcbiAgfTtcblxuICB2YXIgX3Byb3RvMyA9IFNwbGlkZVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMucGFyc2VCcmVha3BvaW50cygpO1xuICAgIHRoaXMuaW5pdFNsaWRlcygpO1xuICAgIHRoaXMucmVnaXN0ZXJSb290U3R5bGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclRyYWNrU3R5bGVzKCk7XG4gICAgdGhpcy5yZWdpc3RlclNsaWRlU3R5bGVzKCk7XG4gICAgdGhpcy5yZWdpc3Rlckxpc3RTdHlsZXMoKTtcbiAgfTtcblxuICBfcHJvdG8zLmluaXRTbGlkZXMgPSBmdW5jdGlvbiBpbml0U2xpZGVzKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgcHVzaCh0aGlzLnNsaWRlcywgdGhpcy5jb250ZW50cy5tYXAoZnVuY3Rpb24gKGNvbnRlbnQsIGluZGV4KSB7XG4gICAgICBjb250ZW50ID0gaXNTdHJpbmcoY29udGVudCkgPyB7XG4gICAgICAgIGh0bWw6IGNvbnRlbnRcbiAgICAgIH0gOiBjb250ZW50O1xuICAgICAgY29udGVudC5zdHlsZXMgPSBjb250ZW50LnN0eWxlcyB8fCB7fTtcbiAgICAgIGNvbnRlbnQuYXR0cnMgPSBjb250ZW50LmF0dHJzIHx8IHt9O1xuXG4gICAgICBfdGhpczQuY292ZXIoY29udGVudCk7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gX3RoaXM0Lm9wdGlvbnMuY2xhc3Nlcy5zbGlkZSArIFwiIFwiICsgKGluZGV4ID09PSAwID8gQ0xBU1NfQUNUSVZFIDogXCJcIik7XG4gICAgICBhc3NpZ24oY29udGVudC5hdHRycywge1xuICAgICAgICBjbGFzczogKGNsYXNzZXMgKyBcIiBcIiArIChjb250ZW50LmF0dHJzLmNsYXNzIHx8IFwiXCIpKS50cmltKCksXG4gICAgICAgIHN0eWxlOiBfdGhpczQuYnVpbGRTdHlsZXMoY29udGVudC5zdHlsZXMpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pKTtcblxuICAgIGlmICh0aGlzLmlzTG9vcCgpKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlQ2xvbmVzKHRoaXMuc2xpZGVzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMy5yZWdpc3RlclJvb3RTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclJvb3RTdHlsZXMoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB0aGlzLmJyZWFrcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgd2lkdGggPSBfcmVmMlswXSxcbiAgICAgICAgICBvcHRpb25zID0gX3JlZjJbMV07XG5cbiAgICAgIF90aGlzNS5TdHlsZS5ydWxlKFwiIFwiLCBcIm1heC13aWR0aFwiLCB1bml0KG9wdGlvbnMud2lkdGgpLCB3aWR0aCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZWdpc3RlclRyYWNrU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJUcmFja1N0eWxlcygpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBTdHlsZTIgPSB0aGlzLlN0eWxlO1xuICAgIHZhciBzZWxlY3RvciA9IFwiLlwiICsgQ0xBU1NfVFJBQ0s7XG4gICAgdGhpcy5icmVha3BvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIHdpZHRoID0gX3JlZjNbMF0sXG4gICAgICAgICAgb3B0aW9ucyA9IF9yZWYzWzFdO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIF90aGlzNi5yZXNvbHZlKFwicGFkZGluZ0xlZnRcIiksIF90aGlzNi5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIF90aGlzNi5yZXNvbHZlKFwicGFkZGluZ1JpZ2h0XCIpLCBfdGhpczYuY3NzUGFkZGluZyhvcHRpb25zLCB0cnVlKSwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwiaGVpZ2h0XCIsIF90aGlzNi5jc3NUcmFja0hlaWdodChvcHRpb25zKSwgd2lkdGgpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMucmVnaXN0ZXJMaXN0U3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJMaXN0U3R5bGVzKCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIFN0eWxlMiA9IHRoaXMuU3R5bGU7XG4gICAgdmFyIHNlbGVjdG9yID0gXCIuXCIgKyBDTEFTU19MSVNUO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjQpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWY0WzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmNFsxXTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcInRyYW5zZm9ybVwiLCBfdGhpczcuYnVpbGRUcmFuc2xhdGUob3B0aW9ucyksIHdpZHRoKTtcblxuICAgICAgaWYgKCFfdGhpczcuY3NzU2xpZGVIZWlnaHQob3B0aW9ucykpIHtcbiAgICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IsIFwiYXNwZWN0LXJhdGlvXCIsIF90aGlzNy5jc3NBc3BlY3RSYXRpbyhvcHRpb25zKSwgd2lkdGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMucmVnaXN0ZXJTbGlkZVN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU2xpZGVTdHlsZXMoKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICB2YXIgU3R5bGUyID0gdGhpcy5TdHlsZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBcIi5cIiArIENMQVNTX1NMSURFO1xuICAgIHRoaXMuYnJlYWtwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjUpIHtcbiAgICAgIHZhciB3aWR0aCA9IF9yZWY1WzBdLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmNVsxXTtcbiAgICAgIFN0eWxlMi5ydWxlKHNlbGVjdG9yLCBcIndpZHRoXCIsIF90aGlzOC5jc3NTbGlkZVdpZHRoKG9wdGlvbnMpLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgXCJoZWlnaHRcIiwgX3RoaXM4LmNzc1NsaWRlSGVpZ2h0KG9wdGlvbnMpIHx8IFwiMTAwJVwiLCB3aWR0aCk7XG4gICAgICBTdHlsZTIucnVsZShzZWxlY3RvciwgX3RoaXM4LnJlc29sdmUoXCJtYXJnaW5SaWdodFwiKSwgdW5pdChvcHRpb25zLmdhcCkgfHwgXCIwcHhcIiwgd2lkdGgpO1xuICAgICAgU3R5bGUyLnJ1bGUoc2VsZWN0b3IgKyBcIiA+IGltZ1wiLCBcImRpc3BsYXlcIiwgb3B0aW9ucy5jb3ZlciA/IFwibm9uZVwiIDogXCJpbmxpbmVcIiwgd2lkdGgpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRUcmFuc2xhdGUgPSBmdW5jdGlvbiBidWlsZFRyYW5zbGF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJERpcmVjdGlvbiA9IHRoaXMuRGlyZWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3RoaXMkRGlyZWN0aW9uLnJlc29sdmUsXG4gICAgICAgIG9yaWVudCA9IF90aGlzJERpcmVjdGlvbi5vcmllbnQ7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhbHVlcy5wdXNoKHRoaXMuY3NzT2Zmc2V0Q2xvbmVzKG9wdGlvbnMpKTtcbiAgICB2YWx1ZXMucHVzaCh0aGlzLmNzc09mZnNldEdhcHMob3B0aW9ucykpO1xuXG4gICAgaWYgKHRoaXMuaXNDZW50ZXIob3B0aW9ucykpIHtcbiAgICAgIHZhbHVlcy5wdXNoKHRoaXMuYnVpbGRDc3NWYWx1ZShvcmllbnQoLTUwKSwgXCIlXCIpKTtcbiAgICAgIHZhbHVlcy5wdXNoLmFwcGx5KHZhbHVlcywgdGhpcy5jc3NPZmZzZXRDZW50ZXIob3B0aW9ucykpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMuZmlsdGVyKEJvb2xlYW4pLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZVwiICsgcmVzb2x2ZShcIlhcIikgKyBcIihcIiArIHZhbHVlICsgXCIpXCI7XG4gICAgfSkuam9pbihcIiBcIik7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NPZmZzZXRDbG9uZXMgPSBmdW5jdGlvbiBjc3NPZmZzZXRDbG9uZXMob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyREaXJlY3Rpb24yID0gdGhpcy5EaXJlY3Rpb24sXG4gICAgICAgIHJlc29sdmUgPSBfdGhpcyREaXJlY3Rpb24yLnJlc29sdmUsXG4gICAgICAgIG9yaWVudCA9IF90aGlzJERpcmVjdGlvbjIub3JpZW50O1xuICAgIHZhciBjbG9uZUNvdW50ID0gdGhpcy5nZXRDbG9uZUNvdW50KCk7XG5cbiAgICBpZiAodGhpcy5pc0ZpeGVkV2lkdGgob3B0aW9ucykpIHtcbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWUudmFsdWUsXG4gICAgICAgICAgdW5pdDIgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlLnVuaXQ7XG5cbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KHZhbHVlKSAqIGNsb25lQ291bnQsIHVuaXQyKTtcbiAgICB9XG5cbiAgICB2YXIgcGVyY2VudCA9IDEwMCAqIGNsb25lQ291bnQgLyBvcHRpb25zLnBlclBhZ2U7XG4gICAgcmV0dXJuIG9yaWVudChwZXJjZW50KSArIFwiJVwiO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzT2Zmc2V0Q2VudGVyID0gZnVuY3Rpb24gY3NzT2Zmc2V0Q2VudGVyKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkRGlyZWN0aW9uMyA9IHRoaXMuRGlyZWN0aW9uLFxuICAgICAgICByZXNvbHZlID0gX3RoaXMkRGlyZWN0aW9uMy5yZXNvbHZlLFxuICAgICAgICBvcmllbnQgPSBfdGhpcyREaXJlY3Rpb24zLm9yaWVudDtcblxuICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgdmFyIF90aGlzJHBhcnNlQ3NzVmFsdWUyID0gdGhpcy5wYXJzZUNzc1ZhbHVlKG9wdGlvbnNbcmVzb2x2ZShcImZpeGVkV2lkdGhcIildKSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWUyLnZhbHVlLFxuICAgICAgICAgIHVuaXQyID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTIudW5pdDtcblxuICAgICAgcmV0dXJuIFt0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KHZhbHVlIC8gMiksIHVuaXQyKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhciBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlLFxuICAgICAgICBnYXAgPSBvcHRpb25zLmdhcDtcbiAgICB2YWx1ZXMucHVzaChvcmllbnQoNTAgLyBwZXJQYWdlKSArIFwiJVwiKTtcblxuICAgIGlmIChnYXApIHtcbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlMyA9IHRoaXMucGFyc2VDc3NWYWx1ZShnYXApLFxuICAgICAgICAgIF92YWx1ZSA9IF90aGlzJHBhcnNlQ3NzVmFsdWUzLnZhbHVlLFxuICAgICAgICAgIF91bml0ID0gX3RoaXMkcGFyc2VDc3NWYWx1ZTMudW5pdDtcblxuICAgICAgdmFyIGdhcE9mZnNldCA9IChfdmFsdWUgLyBwZXJQYWdlIC0gX3ZhbHVlKSAvIDI7XG4gICAgICB2YWx1ZXMucHVzaCh0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KGdhcE9mZnNldCksIF91bml0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICBfcHJvdG8zLmNzc09mZnNldEdhcHMgPSBmdW5jdGlvbiBjc3NPZmZzZXRHYXBzKG9wdGlvbnMpIHtcbiAgICB2YXIgY2xvbmVDb3VudCA9IHRoaXMuZ2V0Q2xvbmVDb3VudCgpO1xuXG4gICAgaWYgKGNsb25lQ291bnQgJiYgb3B0aW9ucy5nYXApIHtcbiAgICAgIHZhciBvcmllbnQgPSB0aGlzLkRpcmVjdGlvbi5vcmllbnQ7XG5cbiAgICAgIHZhciBfdGhpcyRwYXJzZUNzc1ZhbHVlNCA9IHRoaXMucGFyc2VDc3NWYWx1ZShvcHRpb25zLmdhcCksXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwYXJzZUNzc1ZhbHVlNC52YWx1ZSxcbiAgICAgICAgICB1bml0MiA9IF90aGlzJHBhcnNlQ3NzVmFsdWU0LnVuaXQ7XG5cbiAgICAgIGlmICh0aGlzLmlzRml4ZWRXaWR0aChvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZENzc1ZhbHVlKG9yaWVudCh2YWx1ZSAqIGNsb25lQ291bnQpLCB1bml0Mik7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJQYWdlID0gb3B0aW9ucy5wZXJQYWdlO1xuICAgICAgdmFyIGdhcHMgPSBjbG9uZUNvdW50IC8gcGVyUGFnZTtcbiAgICAgIHJldHVybiB0aGlzLmJ1aWxkQ3NzVmFsdWUob3JpZW50KGdhcHMgKiB2YWx1ZSksIHVuaXQyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIjtcbiAgfTtcblxuICBfcHJvdG8zLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKHByb3ApIHtcbiAgICByZXR1cm4gY2FtZWxUb0tlYmFiKHRoaXMuRGlyZWN0aW9uLnJlc29sdmUocHJvcCkpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzUGFkZGluZyA9IGZ1bmN0aW9uIGNzc1BhZGRpbmcob3B0aW9ucywgcmlnaHQpIHtcbiAgICB2YXIgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZztcbiAgICB2YXIgcHJvcCA9IHRoaXMuRGlyZWN0aW9uLnJlc29sdmUocmlnaHQgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgdHJ1ZSk7XG4gICAgcmV0dXJuIHBhZGRpbmcgJiYgdW5pdChwYWRkaW5nW3Byb3BdIHx8IChpc09iamVjdChwYWRkaW5nKSA/IDAgOiBwYWRkaW5nKSkgfHwgXCIwcHhcIjtcbiAgfTtcblxuICBfcHJvdG8zLmNzc1RyYWNrSGVpZ2h0ID0gZnVuY3Rpb24gY3NzVHJhY2tIZWlnaHQob3B0aW9ucykge1xuICAgIHZhciBoZWlnaHQgPSBcIlwiO1xuXG4gICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLmNzc0hlaWdodChvcHRpb25zKTtcbiAgICAgIGFzc2VydChoZWlnaHQsICdcImhlaWdodFwiIGlzIG1pc3NpbmcuJyk7XG4gICAgICBoZWlnaHQgPSBcImNhbGMoXCIgKyBoZWlnaHQgKyBcIiAtIFwiICsgdGhpcy5jc3NQYWRkaW5nKG9wdGlvbnMsIGZhbHNlKSArIFwiIC0gXCIgKyB0aGlzLmNzc1BhZGRpbmcob3B0aW9ucywgdHJ1ZSkgKyBcIilcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVpZ2h0O1xuICB9O1xuXG4gIF9wcm90bzMuY3NzSGVpZ2h0ID0gZnVuY3Rpb24gY3NzSGVpZ2h0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdW5pdChvcHRpb25zLmhlaWdodCk7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NTbGlkZVdpZHRoID0gZnVuY3Rpb24gY3NzU2xpZGVXaWR0aChvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuYXV0b1dpZHRoID8gXCJcIiA6IHVuaXQob3B0aW9ucy5maXhlZFdpZHRoKSB8fCAodGhpcy5pc1ZlcnRpY2FsKCkgPyBcIlwiIDogdGhpcy5jc3NTbGlkZVNpemUob3B0aW9ucykpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzU2xpZGVIZWlnaHQgPSBmdW5jdGlvbiBjc3NTbGlkZUhlaWdodChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHVuaXQob3B0aW9ucy5maXhlZEhlaWdodCkgfHwgKHRoaXMuaXNWZXJ0aWNhbCgpID8gb3B0aW9ucy5hdXRvSGVpZ2h0ID8gXCJcIiA6IHRoaXMuY3NzU2xpZGVTaXplKG9wdGlvbnMpIDogdGhpcy5jc3NIZWlnaHQob3B0aW9ucykpO1xuICB9O1xuXG4gIF9wcm90bzMuY3NzU2xpZGVTaXplID0gZnVuY3Rpb24gY3NzU2xpZGVTaXplKG9wdGlvbnMpIHtcbiAgICB2YXIgZ2FwID0gdW5pdChvcHRpb25zLmdhcCk7XG4gICAgcmV0dXJuIFwiY2FsYygoMTAwJVwiICsgKGdhcCAmJiBcIiArIFwiICsgZ2FwKSArIFwiKS9cIiArIChvcHRpb25zLnBlclBhZ2UgfHwgMSkgKyAoZ2FwICYmIFwiIC0gXCIgKyBnYXApICsgXCIpXCI7XG4gIH07XG5cbiAgX3Byb3RvMy5jc3NBc3BlY3RSYXRpbyA9IGZ1bmN0aW9uIGNzc0FzcGVjdFJhdGlvKG9wdGlvbnMpIHtcbiAgICB2YXIgaGVpZ2h0UmF0aW8gPSBvcHRpb25zLmhlaWdodFJhdGlvO1xuICAgIHJldHVybiBoZWlnaHRSYXRpbyA/IFwiXCIgKyAxIC8gaGVpZ2h0UmF0aW8gOiBcIlwiO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRDc3NWYWx1ZSA9IGZ1bmN0aW9uIGJ1aWxkQ3NzVmFsdWUodmFsdWUsIHVuaXQyKSB7XG4gICAgcmV0dXJuIFwiXCIgKyB2YWx1ZSArIHVuaXQyO1xuICB9O1xuXG4gIF9wcm90bzMucGFyc2VDc3NWYWx1ZSA9IGZ1bmN0aW9uIHBhcnNlQ3NzVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YXIgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICAgIHZhciB1bml0MiA9IHZhbHVlLnJlcGxhY2UoL1xcZCooXFwuXFxkKik/LywgXCJcIikgfHwgXCJweFwiO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgICAgdW5pdDogdW5pdDJcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHVuaXQ6IFwicHhcIlxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvMy5wYXJzZUJyZWFrcG9pbnRzID0gZnVuY3Rpb24gcGFyc2VCcmVha3BvaW50cygpIHtcbiAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgIHZhciBicmVha3BvaW50cyA9IHRoaXMub3B0aW9ucy5icmVha3BvaW50cztcbiAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goW1wiZGVmYXVsdFwiLCB0aGlzLm9wdGlvbnNdKTtcblxuICAgIGlmIChicmVha3BvaW50cykge1xuICAgICAgZm9yT3duKGJyZWFrcG9pbnRzLCBmdW5jdGlvbiAob3B0aW9ucywgd2lkdGgpIHtcbiAgICAgICAgX3RoaXM5LmJyZWFrcG9pbnRzLnB1c2goW3dpZHRoLCBtZXJnZShtZXJnZSh7fSwgX3RoaXM5Lm9wdGlvbnMpLCBvcHRpb25zKV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90bzMuaXNGaXhlZFdpZHRoID0gZnVuY3Rpb24gaXNGaXhlZFdpZHRoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gISFvcHRpb25zW3RoaXMuRGlyZWN0aW9uLnJlc29sdmUoXCJmaXhlZFdpZHRoXCIpXTtcbiAgfTtcblxuICBfcHJvdG8zLmlzTG9vcCA9IGZ1bmN0aW9uIGlzTG9vcCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnR5cGUgPT09IExPT1A7XG4gIH07XG5cbiAgX3Byb3RvMy5pc0NlbnRlciA9IGZ1bmN0aW9uIGlzQ2VudGVyKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5mb2N1cyA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgaWYgKHRoaXMuaXNMb29wKCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudHlwZSA9PT0gU0xJREUpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLm9wdGlvbnMudHJpbVNwYWNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8zLmlzVmVydGljYWwgPSBmdW5jdGlvbiBpc1ZlcnRpY2FsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSBUVEI7XG4gIH07XG5cbiAgX3Byb3RvMy5idWlsZENsYXNzZXMgPSBmdW5jdGlvbiBidWlsZENsYXNzZXMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgcmV0dXJuIFtDTEFTU19ST09ULCBDTEFTU19ST09UICsgXCItLVwiICsgb3B0aW9ucy50eXBlLCBDTEFTU19ST09UICsgXCItLVwiICsgb3B0aW9ucy5kaXJlY3Rpb24sIG9wdGlvbnMuZHJhZyAmJiBDTEFTU19ST09UICsgXCItLWRyYWdnYWJsZVwiLCBvcHRpb25zLmlzTmF2aWdhdGlvbiAmJiBDTEFTU19ST09UICsgXCItLW5hdlwiLCBDTEFTU19BQ1RJVkUsICF0aGlzLmNvbmZpZy5oaWRkZW4gJiYgQ0xBU1NfUkVOREVSRURdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgfTtcblxuICBfcHJvdG8zLmJ1aWxkQXR0cnMgPSBmdW5jdGlvbiBidWlsZEF0dHJzKGF0dHJzKSB7XG4gICAgdmFyIGF0dHIgPSBcIlwiO1xuICAgIGZvck93bihhdHRycywgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgIGF0dHIgKz0gdmFsdWUgPyBcIiBcIiArIGNhbWVsVG9LZWJhYihrZXkpICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiA6IFwiXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF0dHIudHJpbSgpO1xuICB9O1xuXG4gIF9wcm90bzMuYnVpbGRTdHlsZXMgPSBmdW5jdGlvbiBidWlsZFN0eWxlcyhzdHlsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBcIlwiO1xuICAgIGZvck93bihzdHlsZXMsIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICBzdHlsZSArPSBcIiBcIiArIGNhbWVsVG9LZWJhYihrZXkpICsgXCI6XCIgKyB2YWx1ZSArIFwiO1wiO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHlsZS50cmltKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5yZW5kZXJTbGlkZXMgPSBmdW5jdGlvbiByZW5kZXJTbGlkZXMoKSB7XG4gICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgdmFyIHRhZyA9IHRoaXMuY29uZmlnLnNsaWRlVGFnO1xuICAgIHJldHVybiB0aGlzLnNsaWRlcy5tYXAoZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBcIjxcIiArIHRhZyArIFwiIFwiICsgX3RoaXMxMC5idWlsZEF0dHJzKGNvbnRlbnQuYXR0cnMpICsgXCI+XCIgKyAoY29udGVudC5odG1sIHx8IFwiXCIpICsgXCI8L1wiICsgdGFnICsgXCI+XCI7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICBfcHJvdG8zLmNvdmVyID0gZnVuY3Rpb24gY292ZXIoY29udGVudCkge1xuICAgIHZhciBzdHlsZXMgPSBjb250ZW50LnN0eWxlcyxcbiAgICAgICAgX2NvbnRlbnQkaHRtbCA9IGNvbnRlbnQuaHRtbCxcbiAgICAgICAgaHRtbCA9IF9jb250ZW50JGh0bWwgPT09IHZvaWQgMCA/IFwiXCIgOiBfY29udGVudCRodG1sO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb3ZlciAmJiAhdGhpcy5vcHRpb25zLmxhenlMb2FkKSB7XG4gICAgICB2YXIgc3JjID0gaHRtbC5tYXRjaCgvPGltZy4qP3NyY1xccyo9XFxzKihbJ1wiXSkoLis/KVxcMS4qPz4vKTtcblxuICAgICAgaWYgKHNyYyAmJiBzcmNbMl0pIHtcbiAgICAgICAgc3R5bGVzLmJhY2tncm91bmQgPSBcImNlbnRlci9jb3ZlciBuby1yZXBlYXQgdXJsKCdcIiArIHNyY1syXSArIFwiJylcIjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvMy5nZW5lcmF0ZUNsb25lcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQ2xvbmVzKGNvbnRlbnRzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSB0aGlzLm9wdGlvbnMuY2xhc3NlcztcbiAgICB2YXIgY291bnQgPSB0aGlzLmdldENsb25lQ291bnQoKTtcbiAgICB2YXIgc2xpZGVzID0gY29udGVudHMuc2xpY2UoKTtcblxuICAgIHdoaWxlIChzbGlkZXMubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgIHB1c2goc2xpZGVzLCBzbGlkZXMpO1xuICAgIH1cblxuICAgIHB1c2goc2xpZGVzLnNsaWNlKC1jb3VudCkucmV2ZXJzZSgpLCBzbGlkZXMuc2xpY2UoMCwgY291bnQpKS5mb3JFYWNoKGZ1bmN0aW9uIChjb250ZW50LCBpbmRleCkge1xuICAgICAgdmFyIGF0dHJzID0gYXNzaWduKHt9LCBjb250ZW50LmF0dHJzLCB7XG4gICAgICAgIGNsYXNzOiBjb250ZW50LmF0dHJzLmNsYXNzICsgXCIgXCIgKyBjbGFzc2VzLmNsb25lXG4gICAgICB9KTtcbiAgICAgIHZhciBjbG9uZSA9IGFzc2lnbih7fSwgY29udGVudCwge1xuICAgICAgICBhdHRyczogYXR0cnNcbiAgICAgIH0pO1xuICAgICAgaW5kZXggPCBjb3VudCA/IGNvbnRlbnRzLnVuc2hpZnQoY2xvbmUpIDogY29udGVudHMucHVzaChjbG9uZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRDbG9uZUNvdW50ID0gZnVuY3Rpb24gZ2V0Q2xvbmVDb3VudCgpIHtcbiAgICBpZiAodGhpcy5pc0xvb3AoKSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmIChvcHRpb25zLmNsb25lcykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5jbG9uZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJQYWdlID0gbWF4LmFwcGx5KHZvaWQgMCwgdGhpcy5icmVha3BvaW50cy5tYXAoZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICAgIHZhciBvcHRpb25zMiA9IF9yZWY2WzFdO1xuICAgICAgICByZXR1cm4gb3B0aW9uczIucGVyUGFnZTtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBwZXJQYWdlICogKChvcHRpb25zLmZsaWNrTWF4UGFnZXMgfHwgMSkgKyAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfTtcblxuICBfcHJvdG8zLnJlbmRlckFycm93cyA9IGZ1bmN0aW9uIHJlbmRlckFycm93cygpIHtcbiAgICB2YXIgaHRtbCA9IFwiXCI7XG4gICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9XFxcIlwiICsgdGhpcy5vcHRpb25zLmNsYXNzZXMuYXJyb3dzICsgXCJcXFwiPlwiO1xuICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJBcnJvdyh0cnVlKTtcbiAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3coZmFsc2UpO1xuICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICByZXR1cm4gaHRtbDtcbiAgfTtcblxuICBfcHJvdG8zLnJlbmRlckFycm93ID0gZnVuY3Rpb24gcmVuZGVyQXJyb3cocHJldikge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBjbGFzc2VzID0gX3RoaXMkb3B0aW9ucy5jbGFzc2VzLFxuICAgICAgICBpMThuID0gX3RoaXMkb3B0aW9ucy5pMThuO1xuICAgIHZhciBhdHRycyA9IHtcbiAgICAgIGNsYXNzOiBjbGFzc2VzLmFycm93ICsgXCIgXCIgKyAocHJldiA/IGNsYXNzZXMucHJldiA6IGNsYXNzZXMubmV4dCksXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgYXJpYUxhYmVsOiBwcmV2ID8gaTE4bi5wcmV2IDogaTE4bi5uZXh0XG4gICAgfTtcbiAgICByZXR1cm4gXCI8YnV0dG9uIFwiICsgdGhpcy5idWlsZEF0dHJzKGF0dHJzKSArIFwiPjxzdmcgeG1sbnM9XFxcIlwiICsgWE1MX05BTUVfU1BBQ0UgKyBcIlxcXCIgdmlld0JveD1cXFwiMCAwIFwiICsgU0laRSArIFwiIFwiICsgU0laRSArIFwiXFxcIiB3aWR0aD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiIGhlaWdodD1cXFwiXCIgKyBTSVpFICsgXCJcXFwiPjxwYXRoIGQ9XFxcIlwiICsgKHRoaXMub3B0aW9ucy5hcnJvd1BhdGggfHwgUEFUSCkgKyBcIlxcXCIgLz48L3N2Zz48L2J1dHRvbj5cIjtcbiAgfTtcblxuICBfcHJvdG8zLmh0bWwgPSBmdW5jdGlvbiBodG1sKCkge1xuICAgIHZhciBfdGhpcyRjb25maWcgPSB0aGlzLmNvbmZpZyxcbiAgICAgICAgcm9vdENsYXNzID0gX3RoaXMkY29uZmlnLnJvb3RDbGFzcyxcbiAgICAgICAgbGlzdFRhZyA9IF90aGlzJGNvbmZpZy5saXN0VGFnLFxuICAgICAgICBhcnJvd3MgPSBfdGhpcyRjb25maWcuYXJyb3dzLFxuICAgICAgICBiZWZvcmVUcmFjayA9IF90aGlzJGNvbmZpZy5iZWZvcmVUcmFjayxcbiAgICAgICAgYWZ0ZXJUcmFjayA9IF90aGlzJGNvbmZpZy5hZnRlclRyYWNrLFxuICAgICAgICBzbGlkZXIgPSBfdGhpcyRjb25maWcuc2xpZGVyLFxuICAgICAgICBiZWZvcmVTbGlkZXIgPSBfdGhpcyRjb25maWcuYmVmb3JlU2xpZGVyLFxuICAgICAgICBhZnRlclNsaWRlciA9IF90aGlzJGNvbmZpZy5hZnRlclNsaWRlcjtcbiAgICB2YXIgaHRtbCA9IFwiXCI7XG4gICAgaHRtbCArPSBcIjxkaXYgaWQ9XFxcIlwiICsgdGhpcy5pZCArIFwiXFxcIiBjbGFzcz1cXFwiXCIgKyB0aGlzLmJ1aWxkQ2xhc3NlcygpICsgXCIgXCIgKyAocm9vdENsYXNzIHx8IFwiXCIpICsgXCJcXFwiPlwiO1xuICAgIGh0bWwgKz0gXCI8c3R5bGU+XCIgKyB0aGlzLlN0eWxlLmJ1aWxkKCkgKyBcIjwvc3R5bGU+XCI7XG5cbiAgICBpZiAoc2xpZGVyKSB7XG4gICAgICBodG1sICs9IGJlZm9yZVNsaWRlciB8fCBcIlwiO1xuICAgICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9XFxcInNwbGlkZV9fc2xpZGVyXFxcIj5cIjtcbiAgICB9XG5cbiAgICBodG1sICs9IGJlZm9yZVRyYWNrIHx8IFwiXCI7XG5cbiAgICBpZiAoYXJyb3dzKSB7XG4gICAgICBodG1sICs9IHRoaXMucmVuZGVyQXJyb3dzKCk7XG4gICAgfVxuXG4gICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9XFxcInNwbGlkZV9fdHJhY2tcXFwiPlwiO1xuICAgIGh0bWwgKz0gXCI8XCIgKyBsaXN0VGFnICsgXCIgY2xhc3M9XFxcInNwbGlkZV9fbGlzdFxcXCI+XCI7XG4gICAgaHRtbCArPSB0aGlzLnJlbmRlclNsaWRlcygpO1xuICAgIGh0bWwgKz0gXCI8L1wiICsgbGlzdFRhZyArIFwiPlwiO1xuICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICBodG1sICs9IGFmdGVyVHJhY2sgfHwgXCJcIjtcblxuICAgIGlmIChzbGlkZXIpIHtcbiAgICAgIGh0bWwgKz0gXCI8L2Rpdj5cIjtcbiAgICAgIGh0bWwgKz0gYWZ0ZXJTbGlkZXIgfHwgXCJcIjtcbiAgICB9XG5cbiAgICBodG1sICs9IFwiPC9kaXY+XCI7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH07XG5cbiAgcmV0dXJuIFNwbGlkZVJlbmRlcmVyO1xufSgpO1xuXG5leHBvcnQgeyBDTEFTU0VTLCBDTEFTU19BQ1RJVkUsIENMQVNTX0FSUk9XLCBDTEFTU19BUlJPV1MsIENMQVNTX0FSUk9XX05FWFQsIENMQVNTX0FSUk9XX1BSRVYsIENMQVNTX0NMT05FLCBDTEFTU19DT05UQUlORVIsIENMQVNTX0ZPQ1VTX0lOLCBDTEFTU19JTklUSUFMSVpFRCwgQ0xBU1NfTElTVCwgQ0xBU1NfTE9BRElORywgQ0xBU1NfTkVYVCwgQ0xBU1NfT1ZFUkZMT1csIENMQVNTX1BBR0lOQVRJT04sIENMQVNTX1BBR0lOQVRJT05fUEFHRSwgQ0xBU1NfUFJFViwgQ0xBU1NfUFJPR1JFU1MsIENMQVNTX1BST0dSRVNTX0JBUiwgQ0xBU1NfUk9PVCwgQ0xBU1NfU0xJREUsIENMQVNTX1NQSU5ORVIsIENMQVNTX1NSLCBDTEFTU19UT0dHTEUsIENMQVNTX1RPR0dMRV9QQVVTRSwgQ0xBU1NfVE9HR0xFX1BMQVksIENMQVNTX1RSQUNLLCBDTEFTU19WSVNJQkxFLCBERUZBVUxUUywgRVZFTlRfQUNUSVZFLCBFVkVOVF9BUlJPV1NfTU9VTlRFRCwgRVZFTlRfQVJST1dTX1VQREFURUQsIEVWRU5UX0FVVE9QTEFZX1BBVVNFLCBFVkVOVF9BVVRPUExBWV9QTEFZLCBFVkVOVF9BVVRPUExBWV9QTEFZSU5HLCBFVkVOVF9DTElDSywgRVZFTlRfREVTVFJPWSwgRVZFTlRfRFJBRywgRVZFTlRfRFJBR0dFRCwgRVZFTlRfRFJBR0dJTkcsIEVWRU5UX0VORF9JTkRFWF9DSEFOR0VELCBFVkVOVF9ISURERU4sIEVWRU5UX0lOQUNUSVZFLCBFVkVOVF9MQVpZTE9BRF9MT0FERUQsIEVWRU5UX01PVU5URUQsIEVWRU5UX01PVkUsIEVWRU5UX01PVkVELCBFVkVOVF9OQVZJR0FUSU9OX01PVU5URUQsIEVWRU5UX09WRVJGTE9XLCBFVkVOVF9QQUdJTkFUSU9OX01PVU5URUQsIEVWRU5UX1BBR0lOQVRJT05fVVBEQVRFRCwgRVZFTlRfUkVBRFksIEVWRU5UX1JFRlJFU0gsIEVWRU5UX1JFU0laRSwgRVZFTlRfUkVTSVpFRCwgRVZFTlRfU0NST0xMLCBFVkVOVF9TQ1JPTExFRCwgRVZFTlRfU0hJRlRFRCwgRVZFTlRfU0xJREVfS0VZRE9XTiwgRVZFTlRfVVBEQVRFRCwgRVZFTlRfVklTSUJMRSwgRXZlbnRCaW5kZXIsIEV2ZW50SW50ZXJmYWNlLCBGQURFLCBMT09QLCBMVFIsIFJUTCwgUmVxdWVzdEludGVydmFsLCBTTElERSwgU1RBVFVTX0NMQVNTRVMsIFNwbGlkZSwgU3BsaWRlUmVuZGVyZXIsIFN0YXRlLCBUVEIsIFRocm90dGxlLCBTcGxpZGUgYXMgZGVmYXVsdCB9O1xuIiwiXHJcbi8vIENsYXNzIHRoYXQgaGFuZGxlcyB0aGUgcGxheWJhY2sgb2YgdGhlIHdob2xlIGJvb2tcclxuaW1wb3J0IHsgQm9vaywgQm9va1R5cGUsIFBhZ2UsIFRleHRFbGVtZW50LCBJbWFnZUVsZW1lbnQsIEF1ZGlvRWxlbWVudCAgfSBmcm9tIFwiLi4vTW9kZWxzL01vZGVsc1wiO1xyXG5pbXBvcnQgeyBTcGxpZGUgfSBmcm9tIFwiQHNwbGlkZWpzL3NwbGlkZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBsYXlCYWNrRW5naW5lIHtcclxuXHJcbiAgICBjdXJyZW50UGFnZTogbnVtYmVyO1xyXG4gICAgbnVtYmVyT2ZQYWdlczogbnVtYmVyO1xyXG4gICAgdHJhbnNpdGlvbmluZ1RvUGFnZTogYm9vbGVhbjtcclxuXHJcbiAgICBpbWFnZXNQYXRoOiBzdHJpbmc7XHJcbiAgICBhdWRpb1BhdGg6IHN0cmluZztcclxuXHJcbiAgICBlbXB0eUdsb3dJbWFnZVRhZzogc3RyaW5nID0gXCJlbXB0eV9nbG93X2ltYWdlXCI7XHJcblxyXG4gICAgc3BsaWRlSGFuZGxlOiBTcGxpZGU7XHJcblxyXG4gICAgY3VycmVudEJvb2tUeXBlOiBCb29rVHlwZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpbWFnZXNQYXRoOiBzdHJpbmcsIGF1ZGlvUGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5pbWFnZXNQYXRoID0gaW1hZ2VzUGF0aDtcclxuICAgICAgICB0aGlzLmF1ZGlvUGF0aCA9IGF1ZGlvUGF0aDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMDtcclxuICAgICAgICB0aGlzLnNwbGlkZUhhbmRsZSA9IG5ldyBTcGxpZGUoJy5zcGxpZGUnLCB7XHJcbiAgICAgICAgICAgIGZpeGVkSGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAyMCxcclxuICAgICAgICB9KS5tb3VudCgpO1xyXG4gICAgICAgIHRoaXMuYWRkUGFnZVJlc2l6ZUxpc3RlbmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUGFnZVJlc2l6ZUxpc3RlbmVyKCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3BsaWRlSGFuZGxlLm9wdGlvbnMuZml4ZWRIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAyMDtcclxuICAgICAgICAgICAgdGhpcy5zcGxpZGVIYW5kbGUucmVmcmVzaCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemVCb29rKGJvb2s6IEJvb2spIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRCb29rVHlwZSA9IGJvb2suYm9va1R5cGU7XHJcbiAgICAgICAgdGhpcy5udW1iZXJPZlBhZ2VzID0gYm9vay5wYWdlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRCb29rVHlwZSA9PT0gQm9va1R5cGUuQ3VyaW91c1JlYWRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVDdXJpb3VzUmVhZGVyQm9vayhib29rKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudEJvb2tUeXBlID09PSBCb29rVHlwZS5HREwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplR0RMQm9vayhib29rKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZUN1cmlvdXNSZWFkZXJCb29rKGJvb2s6IEJvb2spIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvb2sucGFnZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xyXG4gICAgICAgICAgICBzbGlkZS5jbGFzc0xpc3QuYWRkKCdzcGxpZGVfX3NsaWRlJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBmb3JlYWNoIHZpc3VhbGVsZW1lbnQgaW4gcGFnZSBhZGQgdG8gc2xpZGVcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib29rLnBhZ2VzW2ldLnZpc3VhbEVsZW1lbnRzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmlzdWFsRWxlbWVudCA9IGJvb2sucGFnZXNbaV0udmlzdWFsRWxlbWVudHNbal07XHJcbiAgICAgICAgICAgICAgICBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRFbGVtZW50OiBUZXh0RWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVUZXh0Q29udGFpbmVyKHRleHRFbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpc3VhbEVsZW1lbnQudHlwZSA9PSBcImltYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50OiBJbWFnZUVsZW1lbnQgPSB2aXN1YWxFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VFbGVtZW50LmltYWdlU291cmNlID09PSB0aGlzLmVtcHR5R2xvd0ltYWdlVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQodGhpcy5jcmVhdGVJbWFnZUNvbnRhaW5lcihpbWFnZUVsZW1lbnQpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmlzdWFsRWxlbWVudC50eXBlID09IFwiYXVkaW9cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdWRpb0VsZW1lbnQ6IEF1ZGlvRWxlbWVudCA9IHZpc3VhbEVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlQXVkaW9Db250YWluZXIoYXVkaW9FbGVtZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGxpZGVIYW5kbGUuYWRkKHNsaWRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVUZXh0Q29udGFpbmVyKHRleHRFbGVtZW50OiBUZXh0RWxlbWVudCk6IEhUTUxEaXZFbGVtZW50IHtcclxuICAgICAgICBsZXQgdGV4dEVsZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5jbGFzc0xpc3QuYWRkKCdjci10ZXh0Jyk7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUud2Via2l0VGV4dFN0cm9rZSA9IFwiMXB4ICMzMDMwMzBcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLnRleHRTaGFkb3cgPSBcIjAuMXJlbSAwLjE1cmVtIDAuMXJlbSAjMzAzMDMwXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udEZhbWlseSA9IFwiUXVpY2tzYW5kXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udFdlaWdodCA9IFwiODAwXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udFNpemUgPSBcIjEuN2VtXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUudG9wID0gdGV4dEVsZW1lbnQucG9zaXRpb25ZICsgXCIlXCI7XHJcbiAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUubGVmdCA9IHRleHRFbGVtZW50LnBvc2l0aW9uWCArIFwiJVwiO1xyXG4gICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLndpZHRoID0gdGV4dEVsZW1lbnQud2lkdGggKyBcIiVcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5oZWlnaHQgPSB0ZXh0RWxlbWVudC5oZWlnaHQgKyBcIiVcIjtcclxuICAgICAgICB0ZXh0RWxlbWVudERpdi5pbm5lckhUTUwgPSB0ZXh0RWxlbWVudC50ZXh0Q29udGVudEFzSFRNTDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRleHRFbGVtZW50RGl2O1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUltYWdlQ29udGFpbmVyKGltYWdlRWxlbWVudDogSW1hZ2VFbGVtZW50KTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIGxldCBpbWFnZUVsZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2NyLWltYWdlJyk7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgIGltYWdlRWxlbWVudERpdi5zdHlsZS50b3AgPSBpbWFnZUVsZW1lbnQucG9zaXRpb25ZICsgXCIlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLmxlZnQgPSBpbWFnZUVsZW1lbnQucG9zaXRpb25YICsgXCIlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLndpZHRoID0gaW1hZ2VFbGVtZW50LndpZHRoICsgXCIlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50RGl2LnN0eWxlLmhlaWdodCA9IGltYWdlRWxlbWVudC5oZWlnaHQgKyBcIiVcIjtcclxuXHJcbiAgICAgICAgbGV0IGltYWdlRWxlbWVudEltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIGltYWdlRWxlbWVudEltZy5zcmMgPSB0aGlzLmltYWdlc1BhdGggKyBpbWFnZUVsZW1lbnQuaW1hZ2VTb3VyY2UucmVwbGFjZShcImltYWdlcy9cIiwgXCJcIik7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50SW1nLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgaW1hZ2VFbGVtZW50SW1nLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIGltYWdlRWxlbWVudERpdi5hcHBlbmRDaGlsZChpbWFnZUVsZW1lbnRJbWcpO1xyXG5cclxuICAgICAgICByZXR1cm4gaW1hZ2VFbGVtZW50RGl2O1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUF1ZGlvQ29udGFpbmVyKGF1ZGlvRWxlbWVudDogQXVkaW9FbGVtZW50KTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIGxldCBhdWRpb0VsZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgYXVkaW9FbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2NyLWF1ZGlvJyk7XHJcbiAgICAgICAgYXVkaW9FbGVtZW50RGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgIC8vIGF1ZGlvRWxlbWVudERpdi5zdHlsZS50b3AgPSBhdWRpb0VsZW1lbnQucG9zaXRpb25ZICsgXCIlXCI7XHJcbiAgICAgICAgLy8gYXVkaW9FbGVtZW50RGl2LnN0eWxlLmxlZnQgPSBhdWRpb0VsZW1lbnQucG9zaXRpb25YICsgXCIlXCI7XHJcbiAgICAgICAgLy8gYXVkaW9FbGVtZW50RGl2LnN0eWxlLndpZHRoID0gYXVkaW9FbGVtZW50LndpZHRoICsgXCIlXCI7XHJcbiAgICAgICAgLy8gYXVkaW9FbGVtZW50RGl2LnN0eWxlLmhlaWdodCA9IGF1ZGlvRWxlbWVudC5oZWlnaHQgKyBcIiVcIjtcclxuXHJcbiAgICAgICAgbGV0IGF1ZGlvRWVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcclxuICAgICAgICBhdWRpb0VlbWVudC5zcmMgPSB0aGlzLmF1ZGlvUGF0aCArIGF1ZGlvRWxlbWVudC5hdWRpb1NyYy5yZXBsYWNlKFwiYXVkaW9zL1wiLCBcIlwiKTtcclxuICAgICAgICBhdWRpb0VlbWVudC5jb250cm9scyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGF1ZGlvRWVtZW50LnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgLy8gYXVkaW9FZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgYXVkaW9FbGVtZW50RGl2LmFwcGVuZENoaWxkKGF1ZGlvRWVtZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGF1ZGlvRWxlbWVudERpdjtcclxuICAgIH1cclxuXHJcbiAgICBpbml0aWFsaXplR0RMQm9vayhib29rOiBCb29rKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib29rLnBhZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgICAgICAgICAgc2xpZGUuY2xhc3NMaXN0LmFkZCgnc3BsaWRlX19zbGlkZScpO1xyXG5cclxuICAgICAgICAgICAgLy8gQWRkIGEgZmxleGJveCBjb250YWluZXIgdG8gdGhlIHNsaWRlIHdpdGggYSBjb2x1bW4gbGF5b3V0XHJcbiAgICAgICAgICAgIGxldCBmbGV4Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGZsZXhDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZ2RsLWZsZXgtY29udGFpbmVyJyk7XHJcbiAgICAgICAgICAgIGZsZXhDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICBmbGV4Q29udGFpbmVyLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSBcImNvbHVtblwiO1xyXG4gICAgICAgICAgICBmbGV4Q29udGFpbmVyLnN0eWxlLmp1c3RpZnlDb250ZW50ID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAgICAgZmxleENvbnRhaW5lci5zdHlsZS5hbGlnbkl0ZW1zID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAgICAgZmxleENvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgZmxleENvbnRhaW5lci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChmbGV4Q29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZvcmVhY2ggdmlzdWFsZWxlbWVudCBpbiBwYWdlIGFkZCB0byBzbGlkZVxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvb2sucGFnZXNbaV0udmlzdWFsRWxlbWVudHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCB2aXN1YWxFbGVtZW50ID0gYm9vay5wYWdlc1tpXS52aXN1YWxFbGVtZW50c1tqXTtcclxuICAgICAgICAgICAgICAgIGlmICh2aXN1YWxFbGVtZW50LnR5cGUgPT0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dEVsZW1lbnQ6IFRleHRFbGVtZW50ID0gdmlzdWFsRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dEVsZW1lbnREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS53aWR0aCA9IFwiNjAlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2dkbC10ZXh0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUud2Via2l0VGV4dFN0cm9rZSA9IFwiMXB4ICMzMDMwMzBcIjtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RWxlbWVudERpdi5zdHlsZS5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRFbGVtZW50RGl2LnN0eWxlLnRleHRTaGFkb3cgPSBcIjAuMXJlbSAwLjE1cmVtIDAuMXJlbSAjMzAzMDMwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udEZhbWlseSA9IFwiUXVpY2tzYW5kXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udFdlaWdodCA9IFwiODAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEVsZW1lbnREaXYuc3R5bGUuZm9udFNpemUgPSBcIjEuN2VtXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEVsZW1lbnREaXYuaW5uZXJIVE1MID0gdGV4dEVsZW1lbnQudGV4dENvbnRlbnRBc0hUTUw7XHJcbiAgICAgICAgICAgICAgICAgICAgZmxleENvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0RWxlbWVudERpdik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZpc3VhbEVsZW1lbnQudHlwZSA9PSBcImltYWdlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50OiBJbWFnZUVsZW1lbnQgPSB2aXN1YWxFbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50RGl2LmNsYXNzTGlzdC5hZGQoJ2dkbC1pbWFnZScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1hZ2VFbGVtZW50SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50SW1nLnNyYyA9IHRoaXMuaW1hZ2VzUGF0aCArIGltYWdlRWxlbWVudC5pbWFnZVNvdXJjZS5yZXBsYWNlKFwiaW1hZ2VzL1wiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnRJbWcuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnRJbWcuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50RGl2LmFwcGVuZENoaWxkKGltYWdlRWxlbWVudEltZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZmxleENvbnRhaW5lci5hcHBlbmRDaGlsZChpbWFnZUVsZW1lbnREaXYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNwbGlkZUhhbmRsZS5hZGQoc2xpZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnb1RvTmV4dFBhZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZ1RvUGFnZSkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlIDwgdGhpcy5udW1iZXJPZlBhZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50cmFuc2l0aW9uVG9QYWdlKHRoaXMuY3VycmVudFBhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGdvVG9QcmV2aW91c1BhZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZ1RvUGFnZSkgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvblRvUGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2l0aW9uVG9QYWdlKHBhZ2VOdW1iZXI6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbmluZ1RvUGFnZSA9IHRydWU7XHJcbiAgICB9XHJcbn0iLCJ0cnl7c2VsZltcIndvcmtib3g6d2luZG93OjYuNS4zXCJdJiZfKCl9Y2F0Y2gobil7fWZ1bmN0aW9uIG4obix0KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHIpe3ZhciBlPW5ldyBNZXNzYWdlQ2hhbm5lbDtlLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbihuKXtyKG4uZGF0YSl9LG4ucG9zdE1lc3NhZ2UodCxbZS5wb3J0Ml0pfSkpfWZ1bmN0aW9uIHQobix0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGU9dFtyXTtlLmVudW1lcmFibGU9ZS5lbnVtZXJhYmxlfHwhMSxlLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBlJiYoZS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sZS5rZXksZSl9fWZ1bmN0aW9uIHIobix0KXsobnVsbD09dHx8dD5uLmxlbmd0aCkmJih0PW4ubGVuZ3RoKTtmb3IodmFyIHI9MCxlPW5ldyBBcnJheSh0KTtyPHQ7cisrKWVbcl09bltyXTtyZXR1cm4gZX1mdW5jdGlvbiBlKG4sdCl7dmFyIGU7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFN5bWJvbHx8bnVsbD09bltTeW1ib2wuaXRlcmF0b3JdKXtpZihBcnJheS5pc0FycmF5KG4pfHwoZT1mdW5jdGlvbihuLHQpe2lmKG4pe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXJldHVybiByKG4sdCk7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pLnNsaWNlKDgsLTEpO3JldHVyblwiT2JqZWN0XCI9PT1lJiZuLmNvbnN0cnVjdG9yJiYoZT1uLmNvbnN0cnVjdG9yLm5hbWUpLFwiTWFwXCI9PT1lfHxcIlNldFwiPT09ZT9BcnJheS5mcm9tKG4pOlwiQXJndW1lbnRzXCI9PT1lfHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChlKT9yKG4sdCk6dm9pZCAwfX0obikpfHx0JiZuJiZcIm51bWJlclwiPT10eXBlb2Ygbi5sZW5ndGgpe2UmJihuPWUpO3ZhciBpPTA7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGk+PW4ubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTpuW2krK119fX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9cmV0dXJuKGU9bltTeW1ib2wuaXRlcmF0b3JdKCkpLm5leHQuYmluZChlKX10cnl7c2VsZltcIndvcmtib3g6Y29yZTo2LjUuM1wiXSYmXygpfWNhdGNoKG4pe312YXIgaT1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5wcm9taXNlPW5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe24ucmVzb2x2ZT10LG4ucmVqZWN0PXJ9KSl9O2Z1bmN0aW9uIG8obix0KXt2YXIgcj1sb2NhdGlvbi5ocmVmO3JldHVybiBuZXcgVVJMKG4scikuaHJlZj09PW5ldyBVUkwodCxyKS5ocmVmfXZhciB1PWZ1bmN0aW9uKG4sdCl7dGhpcy50eXBlPW4sT2JqZWN0LmFzc2lnbih0aGlzLHQpfTtmdW5jdGlvbiBhKG4sdCxyKXtyZXR1cm4gcj90P3Qobik6bjoobiYmbi50aGVufHwobj1Qcm9taXNlLnJlc29sdmUobikpLHQ/bi50aGVuKHQpOm4pfWZ1bmN0aW9uIGMoKXt9dmFyIGY9e3R5cGU6XCJTS0lQX1dBSVRJTkdcIn07ZnVuY3Rpb24gcyhuLHQpe2lmKCF0KXJldHVybiBuJiZuLnRoZW4/bi50aGVuKGMpOlByb21pc2UucmVzb2x2ZSgpfXZhciB2PWZ1bmN0aW9uKHIpe3ZhciBlLGM7ZnVuY3Rpb24gdihuLHQpe3ZhciBlLGM7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSwoZT1yLmNhbGwodGhpcyl8fHRoaXMpLm5uPXt9LGUudG49MCxlLnJuPW5ldyBpLGUuZW49bmV3IGksZS5vbj1uZXcgaSxlLnVuPTAsZS5hbj1uZXcgU2V0LGUuY249ZnVuY3Rpb24oKXt2YXIgbj1lLmZuLHQ9bi5pbnN0YWxsaW5nO2UudG4+MHx8IW8odC5zY3JpcHRVUkwsZS5zbi50b1N0cmluZygpKXx8cGVyZm9ybWFuY2Uubm93KCk+ZS51bis2ZTQ/KGUudm49dCxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuY24pKTooZS5obj10LGUuYW4uYWRkKHQpLGUucm4ucmVzb2x2ZSh0KSksKytlLnRuLHQuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsZS5sbil9LGUubG49ZnVuY3Rpb24obil7dmFyIHQ9ZS5mbixyPW4udGFyZ2V0LGk9ci5zdGF0ZSxvPXI9PT1lLnZuLGE9e3N3OnIsaXNFeHRlcm5hbDpvLG9yaWdpbmFsRXZlbnQ6bn07IW8mJmUubW4mJihhLmlzVXBkYXRlPSEwKSxlLmRpc3BhdGNoRXZlbnQobmV3IHUoaSxhKSksXCJpbnN0YWxsZWRcIj09PWk/ZS53bj1zZWxmLnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7XCJpbnN0YWxsZWRcIj09PWkmJnQud2FpdGluZz09PXImJmUuZGlzcGF0Y2hFdmVudChuZXcgdShcIndhaXRpbmdcIixhKSl9KSwyMDApOlwiYWN0aXZhdGluZ1wiPT09aSYmKGNsZWFyVGltZW91dChlLnduKSxvfHxlLmVuLnJlc29sdmUocikpfSxlLmRuPWZ1bmN0aW9uKG4pe3ZhciB0PWUuaG4scj10IT09bmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcjtlLmRpc3BhdGNoRXZlbnQobmV3IHUoXCJjb250cm9sbGluZ1wiLHtpc0V4dGVybmFsOnIsb3JpZ2luYWxFdmVudDpuLHN3OnQsaXNVcGRhdGU6ZS5tbn0pKSxyfHxlLm9uLnJlc29sdmUodCl9LGUuZ249KGM9ZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhLHI9bi5wb3J0cyxpPW4uc291cmNlO3JldHVybiBhKGUuZ2V0U1coKSwoZnVuY3Rpb24oKXtlLmFuLmhhcyhpKSYmZS5kaXNwYXRjaEV2ZW50KG5ldyB1KFwibWVzc2FnZVwiLHtkYXRhOnQsb3JpZ2luYWxFdmVudDpuLHBvcnRzOnIsc3c6aX0pKX0pKX0sZnVuY3Rpb24oKXtmb3IodmFyIG49W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspblt0XT1hcmd1bWVudHNbdF07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoYy5hcHBseSh0aGlzLG4pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSksZS5zbj1uLGUubm49dCxuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUuZ24pLGV9Yz1yLChlPXYpLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGMucHJvdG90eXBlKSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lLGUuX19wcm90b19fPWM7dmFyIGgsbCxtLHc9di5wcm90b3R5cGU7cmV0dXJuIHcucmVnaXN0ZXI9ZnVuY3Rpb24obil7dmFyIHQ9KHZvaWQgMD09PW4/e306bikuaW1tZWRpYXRlLHI9dm9pZCAwIT09dCYmdDt0cnl7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24obix0KXt2YXIgcj1uKCk7aWYociYmci50aGVuKXJldHVybiByLnRoZW4odCk7cmV0dXJuIHQocil9KChmdW5jdGlvbigpe2lmKCFyJiZcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlKXJldHVybiBzKG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsbil9KSkpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIGUubW49Qm9vbGVhbihuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSxlLnluPWUucG4oKSxhKGUuYm4oKSwoZnVuY3Rpb24obil7ZS5mbj1uLGUueW4mJihlLmhuPWUueW4sZS5lbi5yZXNvbHZlKGUueW4pLGUub24ucmVzb2x2ZShlLnluKSxlLnluLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLGUubG4se29uY2U6ITB9KSk7dmFyIHQ9ZS5mbi53YWl0aW5nO3JldHVybiB0JiZvKHQuc2NyaXB0VVJMLGUuc24udG9TdHJpbmcoKSkmJihlLmhuPXQsUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKXtlLmRpc3BhdGNoRXZlbnQobmV3IHUoXCJ3YWl0aW5nXCIse3N3OnQsd2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyOiEwfSkpfSkpLnRoZW4oKGZ1bmN0aW9uKCl7fSkpKSxlLmhuJiYoZS5ybi5yZXNvbHZlKGUuaG4pLGUuYW4uYWRkKGUuaG4pKSxlLmZuLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuY24pLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250cm9sbGVyY2hhbmdlXCIsZS5kbiksZS5mbn0pKX0pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSx3LnVwZGF0ZT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gdGhpcy5mbj9zKHRoaXMuZm4udXBkYXRlKCkpOnZvaWQgMH1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSx3LmdldFNXPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuaG4/UHJvbWlzZS5yZXNvbHZlKHRoaXMuaG4pOnRoaXMucm4ucHJvbWlzZX0sdy5tZXNzYWdlU1c9ZnVuY3Rpb24odCl7dHJ5e3JldHVybiBhKHRoaXMuZ2V0U1coKSwoZnVuY3Rpb24ocil7cmV0dXJuIG4ocix0KX0pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSx3Lm1lc3NhZ2VTa2lwV2FpdGluZz1mdW5jdGlvbigpe3RoaXMuZm4mJnRoaXMuZm4ud2FpdGluZyYmbih0aGlzLmZuLndhaXRpbmcsZil9LHcucG49ZnVuY3Rpb24oKXt2YXIgbj1uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyO3JldHVybiBuJiZvKG4uc2NyaXB0VVJMLHRoaXMuc24udG9TdHJpbmcoKSk/bjp2b2lkIDB9LHcuYm49ZnVuY3Rpb24oKXt0cnl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24obix0KXt0cnl7dmFyIHI9bigpfWNhdGNoKG4pe3JldHVybiB0KG4pfWlmKHImJnIudGhlbilyZXR1cm4gci50aGVuKHZvaWQgMCx0KTtyZXR1cm4gcn0oKGZ1bmN0aW9uKCl7cmV0dXJuIGEobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIobi5zbixuLm5uKSwoZnVuY3Rpb24odCl7cmV0dXJuIG4udW49cGVyZm9ybWFuY2Uubm93KCksdH0pKX0pLChmdW5jdGlvbihuKXt0aHJvdyBufSkpfWNhdGNoKG4pe3JldHVybiBQcm9taXNlLnJlamVjdChuKX19LGg9diwobD1be2tleTpcImFjdGl2ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVuLnByb21pc2V9fSx7a2V5OlwiY29udHJvbGxpbmdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vbi5wcm9taXNlfX1dKSYmdChoLnByb3RvdHlwZSxsKSxtJiZ0KGgsbSksdn0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dGhpcy5Qbj1uZXcgTWFwfXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLlNuKG4pLmFkZCh0KX0sdC5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKG4sdCl7dGhpcy5TbihuKS5kZWxldGUodCl9LHQuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihuKXtuLnRhcmdldD10aGlzO2Zvcih2YXIgdCxyPWUodGhpcy5TbihuLnR5cGUpKTshKHQ9cigpKS5kb25lOyl7KDAsdC52YWx1ZSkobil9fSx0LlNuPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLlBuLmhhcyhuKXx8dGhpcy5Qbi5zZXQobixuZXcgU2V0KSx0aGlzLlBuLmdldChuKX0sbn0oKSk7ZXhwb3J0e3YgYXMgV29ya2JveCx1IGFzIFdvcmtib3hFdmVudCxuIGFzIG1lc3NhZ2VTV307XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMubWFwXG4iLCIvLyBNYWluIEVudHJ5IGZvciB0aGUgQ3VyaW91cyBSZWFkZXIgV2ViIFBsYXllciBBcHBcclxuaW1wb3J0IHsgQ29udGVudFBhcnNlciB9IGZyb20gXCIuL1BhcnNlci9Db250ZW50UGFyc2VyXCI7XHJcbmltcG9ydCB7IFBsYXlCYWNrRW5naW5lIH0gZnJvbSBcIi4vUGxheUJhY2tFbmdpbmUvUGxheUJhY2tFbmdpbmVcIjtcclxuaW1wb3J0IHsgV29ya2JveCwgV29ya2JveEV2ZW50TWFwIH0gZnJvbSBcIndvcmtib3gtd2luZG93XCI7XHJcbmltcG9ydCB7IEJvb2sgfSBmcm9tIFwiLi9Nb2RlbHMvTW9kZWxzXCI7XHJcbmltcG9ydCB7IFNwbGlkZSB9IGZyb20gXCJAc3BsaWRlanMvc3BsaWRlXCI7XHJcbmltcG9ydCB7IGxvYWRhdmcgfSBmcm9tIFwib3NcIjtcclxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcImNvbnNvbGVcIjtcclxuXHJcbiBleHBvcnQgY2xhc3MgQXBwIHtcclxuXHJcbiAgICBjb250ZW50UGFyc2VyOiBDb250ZW50UGFyc2VyO1xyXG4gICAgcGxheUJhY2tFbmdpbmU6IFBsYXlCYWNrRW5naW5lO1xyXG4gICAgXHJcbiAgICBjb250ZW50RmlsZVBhdGg6IHN0cmluZztcclxuICAgIGltYWdlc1BhdGg6IHN0cmluZztcclxuICAgIGF1ZGlvUGF0aDogc3RyaW5nO1xyXG5cclxuICAgIGJyb2FkY2FzdENoYW5uZWw6IEJyb2FkY2FzdENoYW5uZWw7XHJcblxyXG4gICAgY2FjaGVkTGFuZ3VhZ2VzOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XHJcbiAgICBsYW5nOiBzdHJpbmcgPSBcImVuZ2xpc2hcIjtcclxuICAgIGlzQ2FjaGVkOiBzdHJpbmcgPSBcImlzX2NhY2hlZFwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnRGaWxlUGF0aDogc3RyaW5nLCBpbWFnZXNQYXRoOiBzdHJpbmcsIGF1ZGlvUGF0aDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50RmlsZVBhdGggPSBjb250ZW50RmlsZVBhdGg7XHJcbiAgICAgICAgdGhpcy5pbWFnZXNQYXRoID0gaW1hZ2VzUGF0aDtcclxuICAgICAgICB0aGlzLmF1ZGlvUGF0aCA9IGF1ZGlvUGF0aDtcclxuICAgICAgICB0aGlzLmNvbnRlbnRQYXJzZXIgPSBuZXcgQ29udGVudFBhcnNlcihjb250ZW50RmlsZVBhdGgpO1xyXG4gICAgICAgIHRoaXMucGxheUJhY2tFbmdpbmUgPSBuZXcgUGxheUJhY2tFbmdpbmUoaW1hZ2VzUGF0aCwgYXVkaW9QYXRoKTtcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdENoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbChcIm15LWNoYW5uZWxcIik7XHJcblxyXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmlzQ2FjaGVkKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuY2FjaGVkTGFuZ3VhZ2VzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBjYWNoZWRMYW5ndWFnZVN0cmluZzogc3RyaW5nIHwgbnVsbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuaXNDYWNoZWQpITtcclxuICAgICAgICAgICAgLy8gdGhpcy5jYWNoZWRMYW5ndWFnZXMgPSBuZXcgTWFwKEpTT04ucGFyc2UoY2FjaGVkTGFuZ3VhZ2VTdHJpbmcpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICBsZXQgYm9vazogQm9vayA9IGF3YWl0IHRoaXMuY29udGVudFBhcnNlci5wYXJzZUJvb2soKTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJEZXYgQXBwIGluaXRpYWxpemVkIVwiKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhib29rKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmZvcmNlTGFuZHNjYXBlTW9kZSgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgICAgIGxldCB3YiA9IG5ldyBXb3JrYm94KFwiLi9zdy5qc1wiLCB7fSk7XHJcbiAgICAgICAgICAgICAgICB3Yi5yZWdpc3RlcigpLnRoZW4oKHNlcnZpY2VXb3JrZXJSZWdpc3RyYXRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiEuaW5zdGFsbGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2aWNlV29ya2VyUmVnaXN0cmF0aW9uIS5pbnN0YWxsaW5nLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHlwZTogXCJSZWdpc3RyYXRpb25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWU6IHRoaXMubGFuZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZExhbmd1YWdlRGF0YUZyb21DYWNoZUFuZE5vdGlmeUFuZHJvaWRBcHAoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHdiLmFkZEV2ZW50TGlzdGVuZXIoXCJhY3RpdmF0ZWRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlIFdvcmtlciBpbnN0YWxsZWQsIHJlcXVlc3RpbmcgYSBjYWNoZSFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKCF0aGlzLmNhY2hlZExhbmd1YWdlcyEuaGFzKHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGhpcy5icm9hZGNhc3RDaGFubmVsLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogXCJDYWNoZVwiLCBkYXRhOiB7XCJjb250ZW50XCI6IHRoaXMuY29udGVudEZpbGVQYXRoIH0gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgaWYgKGV2ZW50LmRhdGEubXNnID09IFwiTG9hZGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGlmIChldmVudC5kYXRhLmRhdGEgPT0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRpbmcgY29tcGxldGUsIG5vdGlmeWluZyBBbmRyb2lkIEFwcCFcIik7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnJlYWRMYW5ndWFnZURhdGFGcm9tQ2FjaGVBbmROb3RpZnlBbmRyb2lkQXBwKCk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAvLyB0aGlzLmNhY2hlZExhbmd1YWdlcz8uc2V0KHRoaXMubGFuZywgXCJ0cnVlXCIpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgLy8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAvLyAgICAgdGhpcy5pc0NhY2hlZCxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLmNhY2hlZExhbmd1YWdlcz8uZW50cmllcygpKVxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgLy8gKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vIHRoaXMucmVhZExhbmd1YWdlRGF0YUZyb21DYWNoZUFuZE5vdGlmeUFuZHJvaWRBcHAoKTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnBsYXlCYWNrRW5naW5lLmluaXRpYWxpemVCb29rKGJvb2spO1xyXG4gICAgfVxyXG5cclxuICAgIHJlYWRMYW5ndWFnZURhdGFGcm9tQ2FjaGVBbmROb3RpZnlBbmRyb2lkQXBwKCkge1xyXG4gICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmICh3aW5kb3cuQW5kcm9pZCkge1xyXG4gICAgICAgICAgICAvLyBsZXQgaXNDb250ZW50Q2FjaGVkOiBib29sZWFuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5pc0NhY2hlZCkhID09PSBcInRydWVcIjtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHdpbmRvdy5BbmRyb2lkLmNhY2hlZFN0YXR1cyh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZW5mb3JjZUxhbmRzY2FwZU1vZGUoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHNjcmVlbi5vcmllbnRhdGlvbiAmJiBzY3JlZW4ub3JpZW50YXRpb24ubG9jaykge1xyXG4gICAgICAgICAgICAgICAgc2NyZWVuLm9yaWVudGF0aW9uLmxvY2soXCJsYW5kc2NhcGVcIikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTY3JlZW4gb3JpZW50YXRpb24gbG9ja2VkIHRvIGxhbmRzY2FwZSFcIik7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNjcmVlbiBvcmllbnRhdGlvbiBsb2NrIGZhaWxlZCEgSW50ZXJmYWNlIG1heSBub3Qgd29yayBhcyBleHBlY3RlZCBvbiBtb2JpbGUgZGV2aWNlcyFcIik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNjcmVlbiBvcmllbnRhdGlvbiBsb2NrIG5vdCBzdXBwb3J0ZWQhIEludGVyZmFjZSBtYXkgbm90IHdvcmsgYXMgZXhwZWN0ZWQgb24gbW9iaWxlIGRldmljZXMhXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiB9XHJcblxyXG4gLy8gUGFzc2luZyBhYnNvbHV0ZSBwYXRoIHRvIHRoZSBjb250ZW50IGZpbGUgYW5kIHJlc291cmNlIGRpcmVjdG9yaWVzXHJcbiAvLyBDdXJpb3VzIFJlYWRlciBCb29rOiBMZXQncyBGbHkgTGV2ZWwgMlxyXG5sZXQgYXBwOiBBcHAgPSBuZXcgQXBwKFwiL0Jvb2tDb250ZW50L0xldHNGbHlMZXZlbDJFbi9jb250ZW50L2NvbnRlbnQuanNvblwiLFxyXG4gICAgXCIvQm9va0NvbnRlbnQvTGV0c0ZseUxldmVsMkVuL2NvbnRlbnQvaW1hZ2VzL1wiLFxyXG4gICAgXCIvQm9va0NvbnRlbnQvTGV0c0ZseUxldmVsMkVuL2NvbnRlbnQvYXVkaW9zL1wiKTtcclxuXHJcbi8vIEdETCBCb29rOiBUYWxraW5nIEJhZyBFbmdsaXNoXHJcbi8vIGxldCBhcHA6IEFwcCA9IG5ldyBBcHAoXCIvQm9va0NvbnRlbnQvVGFsa2luZ0JhZ0VuL2NvbnRlbnQvY29udGVudC5qc29uXCIsXHJcbiAgICAvLyBcIi9Cb29rQ29udGVudC9UYWxraW5nQmFnRW4vY29udGVudC9pbWFnZXMvXCIsXHJcbiAgICAvLyBcIi9Cb29rQ29udGVudC9UYWxraW5nQmFnRW4vY29udGVudC9hdWRpby9cIik7XHJcblxyXG4vLyBJbml0aWFsaXplIHRoZSBhcHAsIGJlZ2lubmluZyB0byByZWFkIHRoZSBjb250ZW50IGZpbGUsIHBhcnNpbmcgIGFuZCBkaXNwbGF5aW5nIHRoZSBib29rXHJcbmFwcC5pbml0aWFsaXplKCk7Il0sIm5hbWVzIjpbIkJvb2tUeXBlIiwiQ29udGVudFBhcnNlciIsImNvbnN0cnVjdG9yIiwiY29udGVudEZpbGVQYXRoIiwiZW1wdHlHbG93SW1hZ2VUYWciLCJ0aGlzIiwicGFyc2VCb29rIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXJzZUNvbnRlbnRKU09ORmlsZSIsInRoZW4iLCJjb250ZW50SlNPTiIsImNvbnNvbGUiLCJsb2ciLCJib29rIiwicGFnZXMiLCJib29rVHlwZSIsImRldGVybWluZUJvb2tUeXBlIiwicGFyc2VQYWdlcyIsImNhdGNoIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJDdXJpb3VzUmVhZGVyIiwiR0RMIiwiVW5rbm93biIsInBhZ2VzSlNPTiIsImdsb2JhbEZpbGxDb2xvciIsImkiLCJsZW5ndGgiLCJwYWdlSlNPTiIsInBhZ2UiLCJ2aXN1YWxFbGVtZW50cyIsImJhY2tncm91bmRDb2xvciIsInBhcnNlUGFnZUNSIiwicHVzaCIsInBhcnNlUGFnZUdETCIsImVsZW1lbnRzSlNPTiIsImxpYnJhcnlTdHJpbmciLCJpbmNsdWRlcyIsInRleHRFbGVtZW50IiwicGFyc2VUZXh0RWxlbWVudENSIiwiaW1hZ2VFbGVtZW50IiwicGFyc2VJbWFnZUVsZW1lbnRDUiIsImF1ZGlvRWxlbWVudCIsInBhcnNlQXVkaW9FbGVtZW50Q1IiLCJlbGVtZW50c0pTT05BcnJheSIsInBhcnNlVGV4dEVsZW1lbnRHREwiLCJwYXJzZUltYWdlRWxlbWVudEdETCIsImVsZW1lbnRKU09OIiwidHlwZSIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dENvbnRlbnRBc0hUTUwiLCJOYU4iLCJwYXRoIiwiaW1hZ2VTb3VyY2UiLCJhdWRpb1NyYyIsInN0eWxlcyIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsIm9ubG9hZCIsInN0YXR1cyIsInJlc3BvbnNlIiwic2VuZCIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJNRURJQV9QUkVGRVJTX1JFRFVDRURfTU9USU9OIiwiZW1wdHkiLCJhcnJheSIsInNsaWNlIiwiYXJyYXlMaWtlIiwic3RhcnQiLCJlbmQiLCJBcnJheSIsInByb3RvdHlwZSIsImNhbGwiLCJhcHBseSIsImZ1bmMiLCJiaW5kIiwiY29uY2F0IiwiYXJndW1lbnRzIiwibmV4dFRpY2siLCJzZXRUaW1lb3V0Iiwibm9vcCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInR5cGVPZiIsInN1YmplY3QiLCJpc09iamVjdCIsImlzTnVsbCIsImlzQXJyYXkiLCJpc0Z1bmN0aW9uIiwiaXNTdHJpbmciLCJpc1VuZGVmaW5lZCIsImlzSFRNTEVsZW1lbnQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJ3aW5kb3ciLCJIVE1MRWxlbWVudCIsImUiLCJ0b0FycmF5IiwidmFsdWUiLCJmb3JFYWNoIiwidmFsdWVzIiwiaXRlcmF0ZWUiLCJpbmRleE9mIiwiaXRlbXMiLCJ0b2dnbGVDbGFzcyIsImVsbSIsImNsYXNzZXMiLCJhZGQiLCJuYW1lIiwiY2xhc3NMaXN0IiwiYWRkQ2xhc3MiLCJzcGxpdCIsImFwcGVuZCIsInBhcmVudCIsImNoaWxkcmVuIiwiYXBwZW5kQ2hpbGQiLCJiZWZvcmUiLCJub2RlcyIsInJlZiIsIm5vZGUiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwibWF0Y2hlcyIsInNlbGVjdG9yIiwiY2hpbGRyZW4yIiwiZmlsdGVyIiwiY2hpbGQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIm93bktleXMiLCJrZXlzIiwiZm9yT3duIiwib2JqZWN0IiwicmlnaHQiLCJyZXZlcnNlIiwic291cmNlIiwibWVyZ2UiLCJvbWl0IiwicmVtb3ZlQXR0cmlidXRlIiwiZWxtcyIsImF0dHJzIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsInZhbHVlMiIsIlN0cmluZyIsImNyZWF0ZSIsInRhZyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwicHJvcCIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwiZGlzcGxheTIiLCJmb2N1cyIsInByZXZlbnRTY3JvbGwiLCJnZXRBdHRyaWJ1dGUiLCJoYXNDbGFzcyIsImNsYXNzTmFtZSIsImNvbnRhaW5zIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlbW92ZSIsInJlbW92ZUNoaWxkIiwicGFyc2VIdG1sIiwiaHRtbCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJwcmV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJxdWVyeSIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeUFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmVDbGFzcyIsInRpbWVPZiIsInRpbWVTdGFtcCIsInVuaXQiLCJQUk9KRUNUX0NPREUiLCJhc3NlcnQiLCJjb25kaXRpb24iLCJtZXNzYWdlIiwiRXJyb3IiLCJtaW4iLCJNYXRoIiwibWF4IiwiZmxvb3IiLCJjZWlsIiwiYWJzIiwiYXBwcm94aW1hdGVseUVxdWFsIiwieCIsInkiLCJlcHNpbG9uIiwiYmV0d2VlbiIsIm51bWJlciIsImV4Y2x1c2l2ZSIsIm1pbmltdW0iLCJtYXhpbXVtIiwiY2xhbXAiLCJzaWduIiwiZm9ybWF0Iiwic3RyaW5nIiwicmVwbGFjZW1lbnRzIiwicmVwbGFjZW1lbnQiLCJyZXBsYWNlIiwicGFkIiwiaWRzIiwiRXZlbnRCaW5kZXIiLCJsaXN0ZW5lcnMiLCJmb3JFYWNoRXZlbnQiLCJ0YXJnZXRzIiwiZXZlbnRzIiwiZXZlbnRzMiIsImV2ZW50TlMiLCJmcmFnbWVudCIsImNhbGxiYWNrIiwib3B0aW9ucyIsImV2ZW50IiwibmFtZXNwYWNlIiwiaXNFdmVudFRhcmdldCIsInJlbW92ZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVuYmluZCIsImxpc3RlbmVyIiwiZGlzcGF0Y2giLCJkZXRhaWwiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJkZXN0cm95IiwiZGF0YSIsIkVWRU5UX01PVU5URUQiLCJFVkVOVF9SRUFEWSIsIkVWRU5UX01PVkUiLCJFVkVOVF9NT1ZFRCIsIkVWRU5UX0NMSUNLIiwiRVZFTlRfUkVGUkVTSCIsIkVWRU5UX1VQREFURUQiLCJFVkVOVF9SRVNJWkUiLCJFVkVOVF9SRVNJWkVEIiwiRVZFTlRfU0NST0xMIiwiRVZFTlRfU0NST0xMRUQiLCJFVkVOVF9ERVNUUk9ZIiwiRVZFTlRfTkFWSUdBVElPTl9NT1VOVEVEIiwiRVZFTlRfQVVUT1BMQVlfUExBWSIsIkVWRU5UX0FVVE9QTEFZX1BBVVNFIiwiRVZFTlRfTEFaWUxPQURfTE9BREVEIiwiRVZFTlRfRU5EX0lOREVYX0NIQU5HRUQiLCJFdmVudEludGVyZmFjZSIsIlNwbGlkZTIiLCJidXMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYmluZGVyIiwib24iLCJqb2luIiwib2ZmIiwiZW1pdCIsIlJlcXVlc3RJbnRlcnZhbCIsImludGVydmFsIiwib25JbnRlcnZhbCIsIm9uVXBkYXRlIiwibGltaXQiLCJzdGFydFRpbWUiLCJpZCIsIm5vdyIsIkRhdGUiLCJyYXRlIiwicGF1c2VkIiwiY291bnQiLCJ1cGRhdGUiLCJwYXVzZSIsImNhbmNlbCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVzdW1lIiwicmV3aW5kIiwic2V0IiwidGltZSIsImlzUGF1c2VkIiwiQVJST1dfTEVGVCIsIkFSUk9XIiwiQVJST1dfUklHSFQiLCJBUlJPV19VUCIsIkFSUk9XX0RPV04iLCJUVEIiLCJPUklFTlRBVElPTl9NQVAiLCJsZWZ0IiwiWCIsIlkiLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiUk9MRSIsIlRBQl9JTkRFWCIsIkFSSUFfQ09OVFJPTFMiLCJBUklBX1BSRUZJWCIsIkFSSUFfQ1VSUkVOVCIsIkFSSUFfU0VMRUNURUQiLCJBUklBX0xBQkVMIiwiQVJJQV9MQUJFTExFREJZIiwiQVJJQV9ISURERU4iLCJBUklBX09SSUVOVEFUSU9OIiwiQVJJQV9ST0xFREVTQ1JJUFRJT04iLCJBUklBX0xJVkUiLCJBUklBX0JVU1kiLCJBUklBX0FUT01JQyIsIkFMTF9BVFRSSUJVVEVTIiwiQ0xBU1NfUk9PVCIsIkNMQVNTX1RSQUNLIiwiQ0xBU1NfUFJFRklYIiwiQ0xBU1NfU0xJREUiLCJDTEFTU19DTE9ORSIsIkNMQVNTX0FSUk9XUyIsIkNMQVNTX0FSUk9XIiwiQ0xBU1NfQVJST1dfUFJFViIsIkNMQVNTX0FSUk9XX05FWFQiLCJDTEFTU19QQUdJTkFUSU9OIiwiQ0xBU1NfQUNUSVZFIiwiU1RBVFVTX0NMQVNTX1BSRUZJWCIsIkNMQVNTX1BSRVYiLCJDTEFTU19ORVhUIiwiQ0xBU1NfVklTSUJMRSIsIkNMQVNTX0xPQURJTkciLCJDTEFTU19GT0NVU19JTiIsIkNMQVNTX09WRVJGTE9XIiwiU1RBVFVTX0NMQVNTRVMiLCJDTEFTU0VTIiwic2xpZGUiLCJjbG9uZSIsImFycm93cyIsImFycm93IiwicHJldiIsIm5leHQiLCJwYWdpbmF0aW9uIiwic3Bpbm5lciIsIlBPSU5URVJfTU9WRV9FVkVOVFMiLCJQT0lOVEVSX1VQX0VWRU5UUyIsIlNMSURFIiwiTE9PUCIsIkZBREUiLCJTQ1JPTExfTElTVEVORVJfT1BUSU9OUyIsInBhc3NpdmUiLCJjYXB0dXJlIiwiTk9STUFMSVpBVElPTl9NQVAiLCJTcGFjZWJhciIsIlJpZ2h0IiwiTGVmdCIsIlVwIiwiRG93biIsIm5vcm1hbGl6ZUtleSIsIktFWUJPQVJEX0VWRU5UIiwiU1JDX0RBVEFfQVRUUklCVVRFIiwiREFUQV9BVFRSSUJVVEUiLCJTUkNTRVRfREFUQV9BVFRSSUJVVEUiLCJUUklHR0VSX0tFWVMiLCJDb21wb25lbnRDb25zdHJ1Y3RvcnMiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJNZWRpYSIsIkNvbXBvbmVudHMyIiwic3RhdGUiLCJicmVha3BvaW50cyIsInJlZHVjZWRNb3Rpb24iLCJxdWVyaWVzIiwiY29tcGxldGVseSIsInJlZ2lzdGVyIiwib3B0aW9uczIiLCJxdWVyeUxpc3QiLCJtYXRjaE1lZGlhIiwiZGVzdHJveWVkIiwiaXMiLCJkaXJlY3Rpb24iLCJtZXJnZWQiLCJyZWR1Y2UiLCJtZXJnZWQyIiwiZW50cnkiLCJtb3VudCIsInJlZnJlc2giLCJvcHRzIiwiYmFzZSIsIm5vdGlmeSIsImdldFByb3RvdHlwZU9mIiwic2V0dXAiLCJpc01pbiIsIm1lZGlhUXVlcnkiLCJzb3J0IiwibiIsIm0iLCJlbmFibGUiLCJEaXJlY3Rpb24iLCJheGlzT25seSIsImluZGV4IiwibWF0Y2giLCJvZmZzZXQiLCJ0b0xvd2VyQ2FzZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwib3JpZW50IiwiRWxlbWVudHMiLCJ0cmFjayIsImxpc3QiLCJpc1VzaW5nS2V5IiwiX0V2ZW50SW50ZXJmYWNlIiwicm9vdCIsImkxOG4iLCJlbGVtZW50cyIsInNsaWRlcyIsInJvb3RDbGFzc2VzIiwidHJhY2tDbGFzc2VzIiwicHJlZml4Iiwicm9sZSIsImZpbmQiLCJiYXIiLCJDTEFTU19QUk9HUkVTUyIsInRvZ2dsZSIsInRhZ05hbWUiLCJjYXJvdXNlbCIsImdldENsYXNzZXMiLCJsYWJlbCIsImxhYmVsbGVkYnkiLCJmcm9tIiwiY2xvc2VzdCIsIm5vZGVUeXBlIiwicGFyZW50RWxlbWVudCIsImRyYWciLCJpc05hdmlnYXRpb24iLCJQT0lOVEVSX0RPV05fRVZFTlRTIiwiU2xpZGVzIiwiX0V2ZW50SW50ZXJmYWNlMiIsIl9Db21wb25lbnRzMiRFbGVtZW50cyIsIlNsaWRlczIiLCJpbml0IiwiZm9yRWFjaCQxIiwiU2xpZGUyIiwic2xpZGVJbmRleCIsIkNvbXBvbmVudHMiLCJ1cGRhdGVPbk1vdmUiLCJzbGlkZUZvY3VzIiwiaXNDbG9uZSIsImNvbnRhaW5lciIsImluaXROYXZpZ2F0aW9uIiwiY29udHJvbHMiLCJzcGxpZGVzIiwibWFwIiwic3BsaWRlIiwiZ2V0QXQiLCJzbGlkZVgiLCJvbk1vdmUiLCJjdXJyIiwiYWN0aXZlIiwiaXNBY3RpdmUiLCJzZWxmIiwidmlzaWJsZSIsInRyYWNrUmVjdCIsInNsaWRlUmVjdCIsImlzVmlzaWJsZSIsImhpZGRlbiIsImZvY3VzYWJsZU5vZGVzIiwiYWN0aXZlRWxlbWVudCIsInVwZGF0ZVZpc2liaWxpdHkiLCJjbG9uZVN0YXR1cyIsInNsaWRlTGFiZWwiLCJ1c2VDb250YWluZXIiLCJpc1dpdGhpbiIsImRpc3RhbmNlIiwiZGlmZiIsIlNsaWRlJDEiLCJTbGlkZTEiLCJnZXQiLCJleGNsdWRlQ2xvbmVzIiwibWF0Y2hlciIsImdldEluIiwiQ29udHJvbGxlciIsInRvSW5kZXgiLCJoYXNGb2N1cyIsInBlclBhZ2UiLCJpbWFnZXMiLCJpbWciLCJnZXRMZW5ndGgiLCJpc0Vub3VnaCIsIkxheW91dCIsInZlcnRpY2FsIiwicm9vdFJlY3QiLCJvdmVyZmxvdyIsIl9FdmVudEludGVyZmFjZTMiLCJfQ29tcG9uZW50czIkRWxlbWVudHMyIiwic3R5bGVTbGlkZXMiLCJjc3NQYWRkaW5nIiwicmVzaXplIiwiZm9yY2UiLCJuZXdSZWN0IiwiY3NzSGVpZ2h0IiwiZ2FwIiwiYXV0b1dpZHRoIiwiZml4ZWRXaWR0aCIsImNzc1NsaWRlU2l6ZSIsImZpeGVkSGVpZ2h0IiwiYXV0b0hlaWdodCIsImlzT3ZlcmZsb3ciLCJwYWRkaW5nIiwiaGVpZ2h0UmF0aW8iLCJsaXN0U2l6ZSIsInNsaWRlU2l6ZSIsIndpdGhvdXRHYXAiLCJTbGlkZSIsImdldEdhcCIsInRvdGFsU2l6ZSIsInNsaWRlclNpemUiLCJwYXJzZUZsb2F0IiwiZ2V0UGFkZGluZyIsIkNsb25lcyIsImNsb25lQ291bnQiLCJjbG9uZXMiLCJyZW1vdW50Iiwib2JzZXJ2ZSIsImNvbXB1dGVDbG9uZUNvdW50IiwiaXNIZWFkIiwiY2xvbmVOb2RlIiwiY2xvbmVEZWVwIiwiZ2VuZXJhdGUiLCJjbG9uZXMyIiwiZml4ZWRTaXplIiwiTW92ZSIsIlRyYW5zaXRpb24iLCJfRXZlbnRJbnRlcmZhY2U0IiwiX0NvbXBvbmVudHMyJExheW91dCIsIl9Db21wb25lbnRzMiREaXJlY3RpbyIsIl9Db21wb25lbnRzMiRFbGVtZW50czMiLCJyZXBvc2l0aW9uIiwiaXNCdXN5IiwiU2Nyb2xsIiwianVtcCIsInRyYW5zbGF0ZSIsInRvUG9zaXRpb24iLCJwb3NpdGlvbiIsInByZXZlbnRMb29wIiwiZGVzdGluYXRpb24iLCJleGNlZWRlZE1heCIsImdldEVuZCIsInNoaWZ0IiwibG9vcCIsImJhY2t3YXJkcyIsImV4Y2VzcyIsImdldExpbWl0Iiwic2l6ZSIsImdldFBvc2l0aW9uIiwibWluRGlzdGFuY2UiLCJJbmZpbml0eSIsInRyaW1taW5nIiwidHJpbVNwYWNlIiwidHJpbSIsIm1vdmUiLCJkZXN0Iiwic2hpZnRlZCIsImV4Y2VlZGVkTGltaXQiLCJleGNlZWRlZE1pbiIsImVuZEluZGV4Iiwic2xpZGVDb3VudCIsInBlck1vdmUiLCJfRXZlbnRJbnRlcmZhY2U1IiwiX0NvbXBvbmVudHMyJFNsaWRlcyIsIm9taXRFbmQiLCJpc0xvb3AiLCJpc1NsaWRlIiwiZ2V0TmV4dCIsImdldEFkamFjZW50IiwiZ2V0UHJldiIsImN1cnJJbmRleCIsInByZXZJbmRleCIsIm9uUmVzaXplZCIsImNvbXB1dGVEZXN0SW5kZXgiLCJzbmFwUGFnZSIsImNvbXB1dGVNb3ZhYmxlRGVzdEluZGV4IiwidG9QYWdlIiwic2V0SW5kZXgiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImdvIiwiY29udHJvbCIsImFsbG93U2FtZUluZGV4IiwiX3JlZiIsImluZGljYXRvciIsInBhcnNlIiwic2Nyb2xsIiwiZHVyYXRpb24iLCJzbmFwIiwiZ2V0SW5kZXgiLCJ0b0Rlc3QiLCJBcnJvd3MiLCJjcmVhdGVkIiwid3JhcHBlckNsYXNzZXMiLCJwbGFjZWhvbGRlciIsIndyYXBwZXIiLCJlbmFibGVkIiwiY3JlYXRlQXJyb3ciLCJwcmV2MiIsImFycm93UGF0aCIsIm5leHRJbmRleCIsInByZXZMYWJlbCIsImxhc3QiLCJuZXh0TGFiZWwiLCJmaXJzdCIsImRpc2FibGVkIiwiQXV0b3BsYXkiLCJob3ZlcmVkIiwiZm9jdXNlZCIsIl9FdmVudEludGVyZmFjZTYiLCJfQ29tcG9uZW50czIkRWxlbWVudHM0IiwiYXV0b3BsYXkiLCJzdG9wcGVkIiwicGxheSIsInJlc2V0UHJvZ3Jlc3MiLCJzdG9wIiwiYXV0b1RvZ2dsZSIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsIkNvdmVyIiwiY292ZXIiLCJjb3ZlcjIiLCJzcmMiLCJfRXZlbnRJbnRlcmZhY2U4IiwiZnJpY3Rpb24iLCJvblNjcm9sbGVkIiwibm9Db25zdHJhaW4iLCJjbGVhciIsIm5vRGlzdGFuY2UiLCJvbkVuZCIsInRvIiwidCIsImVhc2luZ0Z1bmMiLCJwb3ciLCJlYXNpbmciLCJEcmFnIiwiYmFzZVBvc2l0aW9uIiwiYmFzZUV2ZW50IiwicHJldkJhc2VFdmVudCIsImlzRnJlZSIsImRyYWdnaW5nIiwiY2xpY2tQcmV2ZW50ZWQiLCJfRXZlbnRJbnRlcmZhY2U5IiwiX0NvbXBvbmVudHMyJERpcmVjdGlvMiIsImV4Y2VlZGVkIiwiZGlzYWJsZSIsIm9uUG9pbnRlckRvd24iLCJpc1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwidGFyZ2V0MiIsIm5vRHJhZyIsImJ1dHRvbiIsIm9uUG9pbnRlck1vdmUiLCJvblBvaW50ZXJVcCIsInNhdmUiLCJjYW5jZWxhYmxlIiwiZGlmZkNvb3JkIiwiZXhwaXJlZCIsImRpZmZUaW1lIiwiaGFzRXhjZWVkZWQiLCJpc1NsaWRlckRpcmVjdGlvbiIsInRocmVzaG9sZHMiLCJkcmFnTWluVGhyZXNob2xkIiwiaXNPYmoiLCJtb3VzZSIsInRvdWNoIiwic2hvdWxkU3RhcnQiLCJ2ZWxvY2l0eSIsImNvbXB1dGVWZWxvY2l0eSIsImZsaWNrUG93ZXIiLCJmbGlja01heFBhZ2VzIiwiY29tcHV0ZURlc3RpbmF0aW9uIiwicmV3aW5kQnlEcmFnIiwib25DbGljayIsIm9ydGhvZ29uYWwiLCJjb29yZE9mIiwiZ2V0QmFzZUV2ZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJUb3VjaEV2ZW50IiwiaXNEcmFnZ2luZyIsIktleWJvYXJkIiwiX0V2ZW50SW50ZXJmYWNlMTAiLCJrZXlib2FyZCIsIm9uS2V5ZG93biIsIl9kaXNhYmxlZCIsIkxhenlMb2FkIiwiX0V2ZW50SW50ZXJmYWNlMTEiLCJpc1NlcXVlbnRpYWwiLCJsYXp5TG9hZCIsImVudHJpZXMiLCJzcmNzZXQiLCJsb2FkTmV4dCIsImNoZWNrIiwicHJlbG9hZFBhZ2VzIiwibG9hZCIsIm9uTG9hZCIsIlBhZ2luYXRpb24iLCJwYWdpbmF0aW9uQ2xhc3NlcyIsImRpciIsImdldERpcmVjdGlvbiIsIm5leHRQYWdlIiwiaXRlbSIsInBhZ2luYXRpb25EaXJlY3Rpb24iLCJfYnV0dG9uIiwic2VsZWN0IiwibGkiLCJjbGFzcyIsInRleHQiLCJwYWdlWCIsInBhZ2luYXRpb25LZXlib2FyZCIsImNyZWF0ZVBhZ2luYXRpb24iLCJTeW5jIiwiaXNQYXJlbnQiLCJzeW5jIiwiV2hlZWwiLCJsYXN0VGltZSIsIm9uV2hlZWwiLCJkZWx0YVkiLCJfbWluIiwid2hlZWxNaW5UaHJlc2hvbGQiLCJzbGVlcCIsIndoZWVsU2xlZXAiLCJyZWxlYXNlV2hlZWwiLCJzaG91bGRQcmV2ZW50Iiwid2hlZWwiLCJMaXZlIiwibGl2ZSIsInNyIiwidGV4dENvbnRlbnQiLCJERUZBVUxUUyIsInNwZWVkIiwicmV3aW5kU3BlZWQiLCJGYWRlIiwiZG9uZSIsImVuZENhbGxiYWNrIiwidHJhbnNpdGlvbiIsImdldFNwZWVkIiwidXNlU2Nyb2xsIiwiU3BsaWRlIiwiX1NwbGlkZSIsInN0YXRlcyIsIl9vIiwiX0UiLCJkZWZhdWx0cyIsIkpTT04iLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJfcHJvdG8iLCJFeHRlbnNpb25zIiwiX3RoaXMiLCJfQyIsIl9UIiwiQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX3RoaXMkZXZlbnQiLCJTVEFURVMiLCJDUkVBVEVEIiwiTU9VTlRFRCIsIklETEUiLCJNT1ZJTkciLCJTQ1JPTExJTkciLCJEUkFHR0lORyIsIkRFU1RST1lFRCIsIlBsYXlCYWNrRW5naW5lIiwiaW1hZ2VzUGF0aCIsImF1ZGlvUGF0aCIsImN1cnJlbnRQYWdlIiwic3BsaWRlSGFuZGxlIiwiaW5uZXJIZWlnaHQiLCJhZGRQYWdlUmVzaXplTGlzdGVuZXIiLCJpbml0aWFsaXplQm9vayIsImN1cnJlbnRCb29rVHlwZSIsIm51bWJlck9mUGFnZXMiLCJpbml0aWFsaXplQ3VyaW91c1JlYWRlckJvb2siLCJpbml0aWFsaXplR0RMQm9vayIsImoiLCJ2aXN1YWxFbGVtZW50IiwiY3JlYXRlVGV4dENvbnRhaW5lciIsImNyZWF0ZUltYWdlQ29udGFpbmVyIiwiY3JlYXRlQXVkaW9Db250YWluZXIiLCJ0ZXh0RWxlbWVudERpdiIsIndlYmtpdFRleHRTdHJva2UiLCJjb2xvciIsInRleHRTaGFkb3ciLCJmb250RmFtaWx5IiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwidG9wIiwiaW5uZXJIVE1MIiwiaW1hZ2VFbGVtZW50RGl2IiwiaW1hZ2VFbGVtZW50SW1nIiwiYXVkaW9FbGVtZW50RGl2IiwiYXVkaW9FZW1lbnQiLCJmbGV4Q29udGFpbmVyIiwiZmxleERpcmVjdGlvbiIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImdvVG9OZXh0UGFnZSIsInRyYW5zaXRpb25pbmdUb1BhZ2UiLCJ0cmFuc2l0aW9uVG9QYWdlIiwiZ29Ub1ByZXZpb3VzUGFnZSIsInBhZ2VOdW1iZXIiLCJfIiwiciIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInBvcnQyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0b1N0cmluZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJwcm9taXNlIiwibyIsImxvY2F0aW9uIiwiaHJlZiIsIlVSTCIsInUiLCJhc3NpZ24iLCJhIiwiYyIsImYiLCJzIiwidiIsIm5uIiwidG4iLCJybiIsImVuIiwidW4iLCJhbiIsIlNldCIsImNuIiwiZm4iLCJpbnN0YWxsaW5nIiwic2NyaXB0VVJMIiwic24iLCJwZXJmb3JtYW5jZSIsInZuIiwiaG4iLCJsbiIsInN3IiwiaXNFeHRlcm5hbCIsIm9yaWdpbmFsRXZlbnQiLCJtbiIsImlzVXBkYXRlIiwid24iLCJ3YWl0aW5nIiwiY2xlYXJUaW1lb3V0IiwiZG4iLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwiY29udHJvbGxlciIsImduIiwicG9ydHMiLCJnZXRTVyIsImhhcyIsImwiLCJ3IiwiaW1tZWRpYXRlIiwicmVhZHlTdGF0ZSIsIkJvb2xlYW4iLCJ5biIsInBuIiwiYm4iLCJvbmNlIiwid2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyIiwibWVzc2FnZVNXIiwibWVzc2FnZVNraXBXYWl0aW5nIiwiUG4iLCJNYXAiLCJTbiIsImRlbGV0ZSIsImNhY2hlZExhbmd1YWdlcyIsImxhbmciLCJpc0NhY2hlZCIsImNvbnRlbnRQYXJzZXIiLCJwbGF5QmFja0VuZ2luZSIsImJyb2FkY2FzdENoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImluaXRpYWxpemUiLCJlbmZvcmNlTGFuZHNjYXBlTW9kZSIsIndiIiwic2VydmljZVdvcmtlclJlZ2lzdHJhdGlvbiIsInJlYWRMYW5ndWFnZURhdGFGcm9tQ2FjaGVBbmROb3RpZnlBbmRyb2lkQXBwIiwiQW5kcm9pZCIsImNhY2hlZFN0YXR1cyIsInNjcmVlbiIsIm9yaWVudGF0aW9uIiwibG9jayIsIndhcm4iXSwic291cmNlUm9vdCI6IiJ9